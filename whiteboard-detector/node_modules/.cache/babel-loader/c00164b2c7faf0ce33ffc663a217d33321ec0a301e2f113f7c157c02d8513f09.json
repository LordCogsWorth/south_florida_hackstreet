{"ast":null,"code":"var _jsxFileName = \"/Users/kyleprice/south_florida_hackstreet/whiteboard-detector/src/App.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [videoFile, setVideoFile] = useState(null);\n  const [videoURL, setVideoURL] = useState(null);\n  const [screenshots, setScreenshots] = useState([]);\n  const [isDetecting, setIsDetecting] = useState(false);\n  const [detectedText, setDetectedText] = useState('');\n  const [ocrWorker, setOcrWorker] = useState(null);\n  const [apiKey, setApiKey] = useState(process.env.REACT_APP_GEMINI_API_KEY || '');\n  const [isUsingChatGPT, setIsUsingChatGPT] = useState(false);\n  const [chatGPTResult, setChatGPTResult] = useState('');\n\n  // AI Vision Analysis Results\n  const [aiAnalysisResult, setAiAnalysisResult] = useState('');\n  const [showAnalysisPanel, setShowAnalysisPanel] = useState(false);\n\n  // Rate limiting and conversation state\n  const [lastApiCall, setLastApiCall] = useState(0);\n  const [rateLimitCooldown, setRateLimitCooldown] = useState(0);\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const [userQuestion, setUserQuestion] = useState('');\n  const [apiKeyStatus, setApiKeyStatus] = useState('unchecked'); // unchecked, valid, invalid\n\n  // Before/After Whiteboard Capture System\n  const [beforeCapture, setBeforeCapture] = useState(null);\n  const [afterCapture, setAfterCapture] = useState(null);\n  const [captureMode, setCaptureMode] = useState('waiting'); // waiting, before-captured, ready-for-after\n  const [comparisonResult, setComparisonResult] = useState('');\n  const [showComparison, setShowComparison] = useState(false);\n\n  // Video Analysis System\n  const [videoAnalysisResult, setVideoAnalysisResult] = useState('');\n  const [isAnalyzingVideo, setIsAnalyzingVideo] = useState(false);\n  const [showVideoAnalysis, setShowVideoAnalysis] = useState(false);\n  const [videoFramesSampled, setVideoFramesSampled] = useState([]);\n\n  // Test Gemini API key validity\n  const testApiKey = async () => {\n    if (!apiKey) {\n      setApiKeyStatus('invalid');\n      return;\n    }\n    try {\n      // Test Gemini API key with a simple request\n      const genAI = new GoogleGenerativeAI(apiKey);\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n\n      // Simple test request\n      const result = await model.generateContent(\"Test\");\n      const response = await result.response;\n      if (response.text()) {\n        setApiKeyStatus('valid');\n        console.log('‚úÖ Gemini API key is valid');\n      } else {\n        setApiKeyStatus('invalid');\n        console.log('‚ùå Gemini API key is invalid');\n      }\n    } catch (error) {\n      setApiKeyStatus('invalid');\n      console.log('‚ùå Gemini API key test failed:', error);\n    }\n  }; // Backend integration state\n  const [isUsingBackend, setIsUsingBackend] = useState(false);\n  const [lectureId, setLectureId] = useState('');\n  const [uploadProgress, setUploadProgress] = useState('');\n  const [processingStatus, setProcessingStatus] = useState('');\n  const [queryText, setQueryText] = useState('');\n  const [queryResult, setQueryResult] = useState('');\n  const [isQuerying, setIsQuerying] = useState(false);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Initialize OCR worker with handwriting optimizations\n  const initializeOCR = async () => {\n    if (ocrWorker) return ocrWorker;\n    try {\n      console.log('Starting OCR initialization...');\n      const worker = await Tesseract.createWorker('eng', 1, {\n        logger: m => console.log('OCR Logger:', m)\n      });\n\n      // Configure for better handwriting recognition\n      await worker.setParameters({\n        tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?()[]{}=-+*/\\'\"@#$%^&_|\\\\~ ',\n        tessedit_pageseg_mode: '6',\n        // Uniform block of text\n        preserve_interword_spaces: '1',\n        tessedit_do_invert: '0'\n      });\n      console.log('OCR worker created successfully');\n      setOcrWorker(worker);\n      return worker;\n    } catch (error) {\n      console.error('OCR initialization failed:', error);\n      setDetectedText('OCR initialization failed: ' + error.message);\n      return null;\n    }\n  };\n\n  // Before/After Whiteboard Capture Functions\n  const captureBeforeState = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n    if (video.videoWidth === 0 || video.videoHeight === 0) {\n      alert('Video not loaded properly');\n      return;\n    }\n\n    // Capture the current frame\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataURL = canvas.toDataURL('image/png');\n    setBeforeCapture({\n      image: dataURL,\n      timestamp: new Date().toLocaleString(),\n      frameTime: video.currentTime\n    });\n    setCaptureMode('before-captured');\n    setDetectedText('üì∏ Before state captured! Make your edits to the whiteboard, then capture the after state.');\n  };\n  const captureAfterState = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n    if (!beforeCapture) {\n      alert('Please capture the before state first.');\n      return;\n    }\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n\n    // Capture the current frame\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataURL = canvas.toDataURL('image/png');\n    setAfterCapture({\n      image: dataURL,\n      timestamp: new Date().toLocaleString(),\n      frameTime: video.currentTime\n    });\n    setCaptureMode('ready-for-after');\n    setShowComparison(true);\n    setDetectedText('üì∏ After state captured! Scroll down to see before/after comparison.');\n\n    // Auto-generate comparison analysis\n    await analyzeChanges();\n  };\n  const analyzeChanges = async () => {\n    if (!beforeCapture || !afterCapture) return;\n    setComparisonResult('üîç Analyzing changes between before and after states...');\n    try {\n      // For now, provide a basic comparison message\n      // In the future, this could use AI to detect actual differences\n      const timeDiff = afterCapture.frameTime - beforeCapture.frameTime;\n      const timeFormatted = Math.abs(timeDiff).toFixed(1);\n      const basicAnalysis = `üìä **Before/After Analysis Complete**\n\n‚è±Ô∏è **Time Difference**: ${timeFormatted} seconds between captures\nüìÖ **Before**: ${beforeCapture.timestamp}\nüìÖ **After**: ${afterCapture.timestamp}\n\nüîç **Visual Comparison**: \n- Both states have been captured for manual comparison\n- Review the images below to identify changes\n- Look for added text, erased content, or modified diagrams\n\nüí° **Tip**: Use the AI analysis feature on each image individually to get detailed descriptions of what changed.`;\n      setComparisonResult(basicAnalysis);\n    } catch (error) {\n      setComparisonResult(`‚ùå Error analyzing changes: ${error.message}`);\n    }\n  };\n  const resetCaptures = () => {\n    setBeforeCapture(null);\n    setAfterCapture(null);\n    setCaptureMode('waiting');\n    setComparisonResult('');\n    setShowComparison(false);\n    setDetectedText('üîÑ Capture system reset. Ready to capture new before/after states.');\n  };\n\n  // Comprehensive Video Analysis Function with Gemini\n  const analyzeEntireVideo = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (video.duration === 0 || isNaN(video.duration)) {\n      alert('Video not fully loaded. Please wait for the video to load completely.');\n      return;\n    }\n\n    // Check for Gemini API key\n    const geminiApiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!geminiApiKey) {\n      alert('Gemini API key not configured. Please check your environment variables.');\n      return;\n    }\n    setIsAnalyzingVideo(true);\n    setShowVideoAnalysis(true);\n    setVideoFramesSampled([]);\n    const initialMessage = `ü§ñ **Starting Comprehensive Video Analysis with Gemini**\n\nüìπ **Video Details:**\n- Duration: ${Math.round(video.duration)} seconds\n- Dimensions: ${video.videoWidth}x${video.videoHeight}\n\nüîç **Analysis Process:**\n1. Sampling key frames throughout the video\n2. Processing images with Gemini Vision AI\n3. Identifying patterns and changes over time\n4. Generating comprehensive summary and insights\n\n‚ö° **Processing Status:** Sampling frames...`;\n    setVideoAnalysisResult(initialMessage);\n    try {\n      // Sample frames at strategic intervals throughout the video\n      const framesToSample = Math.min(8, Math.max(3, Math.floor(video.duration / 10))); // 3-8 frames depending on video length\n      const frameInterval = video.duration / framesToSample;\n      const sampledFrames = [];\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n\n      // Sample frames at different timestamps\n      for (let i = 0; i < framesToSample; i++) {\n        const timestamp = i * frameInterval;\n\n        // Seek to timestamp and capture frame\n        await new Promise(resolve => {\n          const seekHandler = () => {\n            video.removeEventListener('seeked', seekHandler);\n\n            // Capture the frame\n            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n            const dataURL = canvas.toDataURL('image/jpeg', 0.8);\n            sampledFrames.push({\n              timestamp: timestamp,\n              image: dataURL,\n              frameNumber: i + 1\n            });\n            resolve();\n          };\n          video.addEventListener('seeked', seekHandler);\n          video.currentTime = timestamp;\n        });\n\n        // Update progress\n        setVideoAnalysisResult(prev => prev + `\\nüì∏ Frame ${i + 1}/${framesToSample} captured at ${timestamp.toFixed(1)}s`);\n      }\n      setVideoFramesSampled(sampledFrames);\n\n      // Update status\n      setVideoAnalysisResult(prev => prev + '\\n\\nüöÄ Sending frames to Gemini Vision AI for analysis...');\n\n      // Initialize Gemini\n      const genAI = new GoogleGenerativeAI(geminiApiKey);\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n\n      // Create comprehensive analysis prompt\n      const analysisPrompt = `Please provide a comprehensive analysis of this video based on the ${sampledFrames.length} key frames I've sampled throughout its ${Math.round(video.duration)}-second duration.\n\nüéØ **COMPREHENSIVE VIDEO ANALYSIS REQUEST:**\n\nüìä **OVERALL SUMMARY:**\n- What is the main purpose/topic of this video?\n- What type of content is being presented? (lecture, tutorial, meeting, etc.)\n- Who is the target audience?\n\nüîç **DETAILED CONTENT ANALYSIS:**\n- What are the key concepts, topics, or subjects discussed?\n- Are there any educational elements, teaching materials, or learning objectives?\n- What visual aids are used? (whiteboards, slides, demonstrations, etc.)\n\nüìù **TEXT AND WRITING ANALYSIS:**\n- Extract and transcribe ALL visible text throughout the video\n- Identify any equations, formulas, diagrams, or technical content\n- Note any handwritten vs. printed text\n- Track how text content changes over time\n\nüë• **PEOPLE AND ACTIVITIES:**\n- How many people are visible and what are their roles?\n- What activities are taking place? (teaching, presenting, discussing, etc.)\n- How do people interact with materials or each other?\n- What gestures, movements, or behaviors are significant?\n\nüéì **EDUCATIONAL VALUE:**\n- What skills or knowledge does this video teach?\n- What are the main learning outcomes?\n- How is information structured and presented?\n- What teaching methods or techniques are used?\n\n‚è±Ô∏è **TEMPORAL ANALYSIS:**\n- How does the content progress over time?\n- Are there distinct sections or phases in the video?\n- What changes occur between the beginning and end?\n- Identify any pivotal moments or transitions\n\nüèõÔ∏è **ENVIRONMENT & CONTEXT:**\n- Describe the setting/location (classroom, office, lab, etc.)\n- What equipment, tools, or materials are present?\n- How does the environment support the content?\n\nüí° **KEY INSIGHTS & TAKEAWAYS:**\n- What are the most important points or messages?\n- What would someone learn from watching this video?\n- How could this content be applied or used?\n\nüìã **STRUCTURED SUMMARY:**\nProvide a clear, organized summary that someone could use to understand the video's content without watching it.\n\nPlease be thorough and detailed - I want to understand everything that happens in this video and its educational/informational value.`;\n\n      // Convert image data URLs to parts for Gemini\n      const imageParts = [];\n      for (const frame of sampledFrames) {\n        // Convert data URL to base64\n        const base64Data = frame.image.split(',')[1];\n        imageParts.push({\n          inlineData: {\n            data: base64Data,\n            mimeType: \"image/jpeg\"\n          }\n        });\n      }\n\n      // Send to Gemini\n      const result = await model.generateContent([analysisPrompt, ...imageParts]);\n      const response = await result.response;\n      const analysis = response.text();\n      const finalMessage = `‚úÖ **Comprehensive Video Analysis Complete!**\n\nüéØ **Analysis Summary:**\n- Analyzed ${sampledFrames.length} key frames from ${Math.round(video.duration)}-second video\n- Processed with Gemini Vision AI\n- Comprehensive content analysis complete\n\nÔøΩ **Detailed Analysis Results:**\n\n${analysis}\n\n---\n*Analysis completed by Google Gemini Vision AI*\n*${sampledFrames.length} frames analyzed from ${Math.round(video.duration)}-second video*`;\n      setVideoAnalysisResult(finalMessage);\n      setDetectedText(`ü§ñ Comprehensive video analysis complete! View detailed results in the Video Analysis panel.`);\n    } catch (error) {\n      console.error('Video analysis error:', error);\n      const errorMsg = `‚ùå **Video Analysis Error**\n\n**Error**: ${error.message}\n\n**Troubleshooting:**\n‚Ä¢ Ensure video is fully loaded\n‚Ä¢ Check internet connection\n‚Ä¢ Verify Gemini API key is correct\n‚Ä¢ Try analyzing a shorter video segment\n\n**Alternative**: Use the single frame analysis for specific moments in the video.`;\n      setVideoAnalysisResult(errorMsg);\n    } finally {\n      setIsAnalyzingVideo(false);\n    }\n  };\n\n  // Handle video file upload\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (file && file.type.startsWith('video/')) {\n      setVideoFile(file);\n      const url = URL.createObjectURL(file);\n      setVideoURL(url);\n      setScreenshots([]);\n      setDetectedText('');\n      setOcrWorker(null); // Reset worker for new video\n      setLectureId('');\n      setProcessingStatus('');\n      setQueryResult('');\n\n      // If using backend, upload and process the video\n      if (isUsingBackend) {\n        try {\n          setUploadProgress('Uploading video to backend...');\n          const uploadResult = await uploadVideoToBackend(file);\n          console.log('Upload result:', uploadResult);\n          setUploadProgress('Upload complete! Processing video...');\n          const processResult = await processVideoWithBackend(uploadResult.video.path, file.name);\n          console.log('Process result:', processResult);\n          setLectureId(processResult.lectureId);\n          setProcessingStatus(`Processing started. Lecture ID: ${processResult.lectureId}`);\n          setUploadProgress('');\n        } catch (error) {\n          console.error('Backend upload/processing failed:', error);\n          setUploadProgress(`Error: ${error.message}`);\n        }\n      } else {\n        // Initialize OCR for local processing\n        setTimeout(() => {\n          initializeOCR();\n        }, 1000);\n      }\n    } else {\n      alert('Please select a valid video file');\n    }\n  };\n\n  // Take a screenshot of current video frame\n  const takeScreenshot = async () => {\n    if (!videoRef.current || !canvasRef.current) return;\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Draw video frame to canvas\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Convert to blob and create screenshot object\n    canvas.toBlob(blob => {\n      const screenshot = {\n        id: Date.now(),\n        blob: blob,\n        url: URL.createObjectURL(blob),\n        timestamp: video.currentTime,\n        detectedText: detectedText || 'No text detected'\n      };\n      setScreenshots(prev => [...prev, screenshot]);\n    }, 'image/png');\n  };\n\n  // Image preprocessing for better OCR\n  const preprocessImage = (canvas, ctx) => {\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n\n    // Convert to grayscale and enhance contrast\n    for (let i = 0; i < data.length; i += 4) {\n      // Convert to grayscale\n      const gray = Math.round(0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]);\n\n      // Enhance contrast - make text darker and background lighter\n      let enhanced;\n      if (gray < 128) {\n        // Dark pixels (likely text) - make darker\n        enhanced = Math.max(0, gray - 30);\n      } else {\n        // Light pixels (likely background) - make lighter\n        enhanced = Math.min(255, gray + 30);\n      }\n\n      // Apply threshold for better text separation\n      const threshold = enhanced < 100 ? 0 : 255;\n      data[i] = threshold; // Red\n      data[i + 1] = threshold; // Green\n      data[i + 2] = threshold; // Blue\n      // Alpha channel (data[i + 3]) remains unchanged\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n  };\n\n  // OCR text detection with preprocessing\n  const detectText = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n    setIsDetecting(true);\n    setDetectedText('Initializing OCR...');\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      setDetectedText('Preprocessing image for handwriting...');\n\n      // Apply image preprocessing for better OCR\n      preprocessImage(canvas, ctx);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n      if (worker) {\n        setDetectedText('Running enhanced OCR...');\n\n        // Convert processed canvas to data URL and run OCR\n        const dataURL = canvas.toDataURL('image/png');\n        const {\n          data: {\n            text,\n            confidence\n          }\n        } = await worker.recognize(dataURL, {\n          rectangle: {\n            top: 0,\n            left: 0,\n            width: canvas.width,\n            height: canvas.height\n          }\n        });\n        const cleanText = text.trim() || 'No text detected';\n        const confidenceText = confidence ? ` (Confidence: ${confidence.toFixed(1)}%)` : '';\n        setDetectedText(cleanText + confidenceText);\n        console.log('OCR Result:', cleanText, 'Confidence:', confidence);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n    } catch (error) {\n      console.error('Text detection failed:', error);\n      setDetectedText('Detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Enhanced OCR for messy handwriting\n  const detectTextEnhanced = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n    setIsDetecting(true);\n    setDetectedText('Initializing enhanced handwriting detection...');\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n      if (worker) {\n        // Try multiple preprocessing approaches\n        const results = [];\n\n        // Method 1: High contrast black/white\n        setDetectedText('Method 1: High contrast processing...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        preprocessImage(canvas, ctx);\n        const dataURL1 = canvas.toDataURL('image/png');\n        await worker.setParameters({\n          tessedit_pageseg_mode: '6',\n          // Uniform block of text\n          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?()[]{}=-+*/\\'\"@#$%^&_|\\\\~ \\n'\n        });\n        const result1 = await worker.recognize(dataURL1);\n        results.push({\n          method: 'High Contrast',\n          text: result1.data.text,\n          confidence: result1.data.confidence\n        });\n\n        // Method 2: Single character mode for individual letters\n        setDetectedText('Method 2: Character-by-character analysis...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        await worker.setParameters({\n          tessedit_pageseg_mode: '8',\n          // Single character\n          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n        });\n        const dataURL2 = canvas.toDataURL('image/png');\n        const result2 = await worker.recognize(dataURL2);\n        results.push({\n          method: 'Character Mode',\n          text: result2.data.text,\n          confidence: result2.data.confidence\n        });\n\n        // Method 3: Raw text detection with minimal processing\n        setDetectedText('Method 3: Raw text detection...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        await worker.setParameters({\n          tessedit_pageseg_mode: '13',\n          // Raw line. Treat the image as a single text line\n          preserve_interword_spaces: '1'\n        });\n        const dataURL3 = canvas.toDataURL('image/png');\n        const result3 = await worker.recognize(dataURL3);\n        results.push({\n          method: 'Raw Line',\n          text: result3.data.text,\n          confidence: result3.data.confidence\n        });\n\n        // Find best result\n        const bestResult = results.reduce((best, current) => current.confidence > best.confidence ? current : best);\n\n        // Display all results\n        let displayText = `üèÜ BEST (${bestResult.method}): ${bestResult.text}\\n\\n`;\n        results.forEach(result => {\n          var _result$confidence;\n          displayText += `${result.method} (${(_result$confidence = result.confidence) === null || _result$confidence === void 0 ? void 0 : _result$confidence.toFixed(1)}%): ${result.text}\\n\\n`;\n        });\n        setDetectedText(displayText);\n        console.log('Enhanced OCR Results:', results);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n    } catch (error) {\n      console.error('Enhanced text detection failed:', error);\n      setDetectedText('Enhanced detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // ChatGPT integration for better text interpretation\n  const enhanceWithChatGPT = async (imageDataURL, ocrText) => {\n    if (!apiKey) {\n      setChatGPTResult('Please enter your Gemini API key first');\n      return;\n    }\n    setIsUsingChatGPT(true);\n    setChatGPTResult('Sending to Gemini for analysis...');\n    try {\n      // Initialize Gemini\n      const genAI = new GoogleGenerativeAI(apiKey);\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n\n      // Convert the image data URL to the format Gemini expects\n      const base64Data = imageDataURL.split(',')[1];\n      const imagePart = {\n        inlineData: {\n          data: base64Data,\n          mimeType: \"image/jpeg\"\n        }\n      };\n      const prompt = `I have handwritten text on a whiteboard that OCR is struggling to read accurately. The OCR detected this text: \"${ocrText}\". Please look at the image and provide a clean, corrected version of what is actually written. Focus on:\n1. Correcting OCR errors and misread characters\n2. Fixing spacing and formatting\n3. Interpreting unclear handwriting\n4. Organizing the text logically\n5. Only return the corrected text content, nothing else.`;\n\n      // Send request to Gemini\n      const result = await model.generateContent([prompt, imagePart]);\n      const response = await result.response;\n      const correctedText = response.text();\n      setChatGPTResult(correctedText);\n\n      // Update the main detected text with Gemini result\n      setDetectedText(`ü§ñ Gemini Enhanced:\\n${correctedText}\\n\\nüìù Original OCR:\\n${ocrText}`);\n    } catch (error) {\n      console.error('Gemini API error:', error);\n      let errorMessage = `Error: ${error.message}`;\n      if (error.message.includes('API_KEY_INVALID')) {\n        errorMessage = `üîë Authentication Error: Your Gemini API key appears to be invalid. Please check your configuration.`;\n      } else if (error.message.includes('RATE_LIMIT_EXCEEDED')) {\n        errorMessage = `‚ö†Ô∏è Rate Limit Exceeded: You've made too many requests to the Gemini API. Please wait a few minutes and try again.`;\n      }\n      setChatGPTResult(errorMessage);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Gemini Scene Analysis Function\n  const analyzeSceneWithAI = async imageDataURL => {\n    const geminiApiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!geminiApiKey) {\n      setChatGPTResult('Gemini API key missing. Please check environment variables.');\n      setAiAnalysisResult('Gemini API key missing. Please check environment variables.');\n      setShowAnalysisPanel(true);\n      return;\n    }\n\n    // Rate limiting check\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall;\n    const minDelay = 2000; // 2 seconds between calls for Gemini\n\n    if (timeSinceLastCall < minDelay) {\n      const waitTime = Math.ceil((minDelay - timeSinceLastCall) / 1000);\n      const waitMessage = `‚è±Ô∏è Please wait ${waitTime} seconds before making another request.`;\n      setAiAnalysisResult(waitMessage);\n      setShowAnalysisPanel(true);\n      return;\n    }\n    setLastApiCall(now);\n    setIsUsingChatGPT(true);\n    setShowAnalysisPanel(true);\n    try {\n      // Show immediate feedback\n      const loadingMessage = `ü§ñ **Gemini AI Analysis Starting!**\n\nüì∏ **Image Received**: Processing your image now...\nüöÄ **AI Status**: Connecting to Google Gemini Vision AI...\n‚ö° **Processing**: This typically takes 5-15 seconds\n\n**What I'm analyzing:**\n‚Ä¢ All visible text (handwritten, printed, signs)\n‚Ä¢ People and their activities\n‚Ä¢ Objects and equipment in the scene\n‚Ä¢ Educational content and concepts\n‚Ä¢ Overall scene description and context\n\nPlease wait while I provide a comprehensive analysis...`;\n      setChatGPTResult(loadingMessage);\n      setAiAnalysisResult(loadingMessage);\n\n      // Initialize Gemini\n      const genAI = new GoogleGenerativeAI(geminiApiKey);\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n\n      // Prepare the prompt\n      const prompt = `Please provide a comprehensive analysis of this image. I want to understand everything that's happening in this scene. Please include:\n\nüìã **SCENE OVERVIEW:**\n- What type of environment is this? (classroom, office, meeting room, etc.)\n- What is the main focus or subject?\n\nüîç **DETAILED OBSERVATIONS:**\n- All text visible (handwritten, printed, on boards, signs, etc.)\n- People present (count, what they're doing, clothing, gestures)\n- Objects and equipment (whiteboards, computers, furniture, tools)\n- Colors, lighting, and atmosphere\n\nüìù **TEXT CONTENT:**\n- Transcribe ALL visible text accurately\n- Note the context of each text element\n- Identify any diagrams, equations, or drawings\n\nüéØ **EDUCATIONAL CONTENT:**\n- If this appears to be educational, what subject/topic?\n- Key concepts being taught or discussed\n- Any visual aids or teaching materials\n\nüìä **SUMMARY:**\n- Main purpose/activity in this scene\n- Most important information conveyed\n- Overall assessment of what's happening\n\nBe thorough and detailed - I want to understand everything about this scene!`;\n\n      // Convert the image data URL to the format Gemini expects\n      const base64Data = imageDataURL.split(',')[1];\n      const imagePart = {\n        inlineData: {\n          data: base64Data,\n          mimeType: \"image/jpeg\"\n        }\n      };\n\n      // Send request to Gemini\n      const result = await model.generateContent([prompt, imagePart]);\n      const response = await result.response;\n      const analysis = response.text();\n      const finalMessage = `üéâ **Gemini Analysis Complete!**\n\n${analysis}\n\n---\n*Analysis completed by Google Gemini Vision AI*`;\n      setChatGPTResult(finalMessage);\n      setAiAnalysisResult(finalMessage);\n      setDetectedText(`ü§ñ AI Analysis Complete! Full results available in analysis panel.`);\n    } catch (error) {\n      console.error('Gemini API error:', error);\n      let errorMsg = `‚ùå **Error**: ${error.message}`;\n      if (error.message.includes('API_KEY_INVALID')) {\n        errorMsg = `üîë **API Key Error**: Your Gemini API key is invalid. Please check your configuration.`;\n      } else if (error.message.includes('RATE_LIMIT_EXCEEDED')) {\n        errorMsg = `‚ö†Ô∏è **Rate Limit**: You've made too many requests. Please wait a moment and try again.`;\n      } else if (error.message.includes('SAFETY')) {\n        errorMsg = `üõ°Ô∏è **Safety Filter**: The image was blocked by safety filters. Please try a different image.`;\n      } else {\n        errorMsg += `\n\n**Troubleshooting Tips:**\n‚Ä¢ Check your internet connection\n‚Ä¢ Verify your Gemini API key is correct\n‚Ä¢ Try again in a few moments\n‚Ä¢ Contact support if the issue persists`;\n      }\n      setChatGPTResult(errorMsg);\n      setAiAnalysisResult(errorMsg);\n      setShowAnalysisPanel(true);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Gemini Q&A about analyzed content\n  const askQuestionAboutContent = async () => {\n    const geminiApiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!geminiApiKey) {\n      alert('Gemini API key missing. Please check environment variables.');\n      return;\n    }\n    if (!userQuestion.trim()) {\n      alert('Please enter a question');\n      return;\n    }\n    if (!aiAnalysisResult) {\n      alert('Please analyze some content first before asking questions');\n      return;\n    }\n\n    // Rate limiting check\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall;\n    const minDelay = 2000; // 2 seconds for Q&A with Gemini\n\n    if (timeSinceLastCall < minDelay) {\n      const waitTime = Math.ceil((minDelay - timeSinceLastCall) / 1000);\n      alert(`Please wait ${waitTime} seconds before asking another question.`);\n      return;\n    }\n    setLastApiCall(now);\n    setIsUsingChatGPT(true);\n    try {\n      // Create context-aware message for Gemini\n      const contextualQuestion = `Based on my previous image analysis, please answer this question:\n\nPREVIOUS ANALYSIS CONTEXT:\n${aiAnalysisResult}\n\nCONVERSATION HISTORY:\n${conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nCURRENT QUESTION: ${userQuestion}\n\nPlease provide a helpful, detailed answer based on the analysis and conversation context above. Be specific and reference the visual content when relevant.`;\n\n      // Initialize Gemini\n      const genAI = new GoogleGenerativeAI(geminiApiKey);\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n\n      // Send request to Gemini\n      const result = await model.generateContent(contextualQuestion);\n      const response = await result.response;\n      const answer = response.text();\n\n      // Add to conversation history\n      const newConversation = [...conversationHistory, {\n        role: \"user\",\n        content: userQuestion\n      }, {\n        role: \"assistant\",\n        content: answer\n      }];\n\n      // Keep only last 8 messages (4 Q&A pairs) to manage context length\n      const trimmedHistory = newConversation.slice(-8);\n      setConversationHistory(trimmedHistory);\n\n      // Clear the input\n      setUserQuestion('');\n    } catch (error) {\n      console.error('Gemini API error:', error);\n      let errorMessage = `Error: ${error.message}`;\n      if (error.message.includes('API_KEY_INVALID')) {\n        errorMessage = `üîë **API Key Error**: Your Gemini API key is invalid. Please check your configuration.`;\n      } else if (error.message.includes('RATE_LIMIT_EXCEEDED')) {\n        errorMessage = `‚ö†Ô∏è **Rate Limit**: You've made too many requests. Please wait a moment and try again.`;\n      } else if (error.message.includes('SAFETY')) {\n        errorMessage = `üõ°Ô∏è **Safety Filter**: Your question was blocked by safety filters. Please rephrase your question.`;\n      }\n      alert(errorMessage);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Full Scene Analysis - capture frame and analyze everything with AI Vision\n  const analyzeCurrentScene = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n    setIsDetecting(true);\n    setDetectedText('üì∏ Capturing frame for AI analysis...');\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw current video frame without any preprocessing for AI Vision\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // Convert to data URL for AI Vision API\n      const dataURL = canvas.toDataURL('image/jpeg', 0.8); // Use JPEG for smaller size\n\n      // Run AI Vision analysis\n      await analyzeSceneWithAI(dataURL);\n    } catch (error) {\n      console.error('Scene analysis failed:', error);\n      setDetectedText('Scene analysis failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Enhanced OCR with ChatGPT integration\n  const detectTextWithChatGPT = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n    setIsDetecting(true);\n    setDetectedText('Running OCR + ChatGPT analysis...');\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      setDetectedText('Preprocessing image...');\n\n      // Apply image preprocessing for better OCR\n      preprocessImage(canvas, ctx);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n      if (worker) {\n        setDetectedText('Running OCR...');\n\n        // Convert processed canvas to data URL\n        const dataURL = canvas.toDataURL('image/png');\n        const {\n          data: {\n            text,\n            confidence\n          }\n        } = await worker.recognize(dataURL);\n        const ocrText = text.trim() || 'No text detected';\n        setDetectedText(`OCR Result: ${ocrText}\\n\\nSending to ChatGPT for enhancement...`);\n\n        // Send to ChatGPT for enhancement\n        await enhanceWithChatGPT(dataURL, ocrText);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n    } catch (error) {\n      console.error('OCR + ChatGPT detection failed:', error);\n      setDetectedText('Detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Auto-detect text and take screenshot\n  const detectAndCapture = async () => {\n    await detectText();\n    setTimeout(() => {\n      takeScreenshot();\n    }, 500); // Small delay to ensure text is updated\n  };\n\n  // Clear all screenshots\n  const clearScreenshots = () => {\n    screenshots.forEach(screenshot => {\n      if (screenshot.url) {\n        URL.revokeObjectURL(screenshot.url);\n      }\n    });\n    setScreenshots([]);\n  };\n\n  // Backend API Integration Functions\n  const API_BASE_URL = 'http://localhost:3000';\n\n  // Upload video to backend\n  const uploadVideoToBackend = async videoFile => {\n    const formData = new FormData();\n    formData.append('video', videoFile);\n    try {\n      const response = await fetch(`${API_BASE_URL}/upload`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend upload error:', error);\n      throw error;\n    }\n  };\n\n  // Process video with backend\n  const processVideoWithBackend = async (videoPath, title = 'Untitled Lecture') => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ingest`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          videoPath,\n          title\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Processing failed: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend processing error:', error);\n      throw error;\n    }\n  };\n\n  // Query processed lecture\n  const queryLecture = async (lectureId, query) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          lectureId,\n          query\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Query failed: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend query error:', error);\n      throw error;\n    }\n  };\n\n  // Handle querying the backend\n  const handleBackendQuery = async () => {\n    if (!lectureId || !queryText.trim()) {\n      setQueryResult('Please ensure video is processed and enter a query');\n      return;\n    }\n    setIsQuerying(true);\n    setQueryResult('Analyzing lecture content...');\n    try {\n      const result = await queryLecture(lectureId, queryText.trim());\n      console.log('Query result:', result);\n      let formattedResult = `Answer: ${result.answer}\\n\\n`;\n      if (result.links && result.links.length > 0) {\n        formattedResult += 'Relevant timestamps:\\n';\n        result.links.forEach(link => {\n          formattedResult += `‚Ä¢ ${link.timecode}: ${link.text}\\n`;\n        });\n        formattedResult += '\\n';\n      }\n      if (result.flashcards && result.flashcards.length > 0) {\n        formattedResult += 'Generated flashcard:\\n';\n        result.flashcards.forEach(card => {\n          formattedResult += `Q: ${card.question}\\nA: ${card.answer}\\n`;\n        });\n      }\n      setQueryResult(formattedResult);\n    } catch (error) {\n      console.error('Query failed:', error);\n      setQueryResult(`Query failed: ${error.message}`);\n    } finally {\n      setIsQuerying(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uFFFD AI Scene Analyzer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Upload videos and analyze everything with AI Vision + OCR text detection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1225,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"video-upload\",\n          className: \"upload-label\",\n          children: \"Choose Video File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"video-upload\",\n          type: \"file\",\n          accept: \"video/*\",\n          onChange: handleFileUpload,\n          className: \"file-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1234,\n          columnNumber: 11\n        }, this), !videoFile && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-prompt\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uD83D\\uDCF9 Select a video file to get started\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1243,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"small\", {\n              children: \"Supported formats: MP4, WebM, AVI\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1244,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1244,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1242,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1230,\n        columnNumber: 9\n      }, this), videoURL && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"api-config\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83E\\uDD16 Gemini AI-Powered Analysis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1254,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"api-input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              placeholder: \"Enter your Google Gemini API key...\",\n              value: apiKey,\n              onChange: e => setApiKey(e.target.value),\n              className: \"api-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1256,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"api-help\",\n              children: [\"Get your API key from \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"https://aistudio.google.com/app/apikey\",\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                children: \"Google AI Studio\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1264,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1265,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Features:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1266,\n                columnNumber: 19\n              }, this), \" Vision AI Analysis + Video Analysis + Q&A Chat\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1263,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1255,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1253,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"backend-config\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83D\\uDE80 Backend Analysis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1273,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"backend-toggle\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"toggle-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: isUsingBackend,\n                onChange: e => setIsUsingBackend(e.target.checked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1276,\n                columnNumber: 19\n              }, this), \"Use backend API for full lecture analysis\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1275,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"backend-help\",\n              children: \"Enable this to upload videos to the backend for comprehensive analysis including board change detection and Q&A capabilities\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1283,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1274,\n            columnNumber: 15\n          }, this), uploadProgress && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status-message upload-status\",\n            children: uploadProgress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1290,\n            columnNumber: 17\n          }, this), processingStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status-message processing-status\",\n            children: processingStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1296,\n            columnNumber: 17\n          }, this), lectureId && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"query-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\uD83D\\uDD0D Ask Questions About This Lecture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1304,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"query-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Ask a question about the lecture content...\",\n                value: queryText,\n                onChange: e => setQueryText(e.target.value),\n                className: \"query-input\",\n                onKeyPress: e => e.key === 'Enter' && handleBackendQuery()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1306,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleBackendQuery,\n                disabled: isQuerying || !queryText.trim(),\n                className: \"query-button\",\n                children: isQuerying ? 'Analyzing...' : 'Ask Question'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1314,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1305,\n              columnNumber: 19\n            }, this), queryResult && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"query-result\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"\\uD83D\\uDCCB Analysis Result:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1325,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n                className: \"result-text\",\n                children: queryResult\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1326,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1324,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1303,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1272,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: videoRef,\n            src: videoURL,\n            controls: true,\n            className: \"video-player\",\n            children: \"Your browser does not support the video tag.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1334,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: canvasRef,\n            style: {\n              display: 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1342,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1333,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: takeScreenshot,\n            className: \"btn primary\",\n            children: \"\\uD83D\\uDCF8 Screenshot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1347,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: analyzeCurrentScene,\n            disabled: isDetecting || !apiKey,\n            className: \"btn ai-vision primary-action\",\n            children: isDetecting ? 'üîÑ Analyzing with AI...' : 'üîç Analyze Full Scene with AI'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1350,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: analyzeEntireVideo,\n            disabled: isAnalyzingVideo || !apiKey || !videoRef.current,\n            className: \"btn ai-video comprehensive-analysis\",\n            children: isAnalyzingVideo ? 'üé¨ Analyzing Video...' : 'üéØ Comprehensive Video Analysis'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1357,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: initializeOCR,\n            disabled: isDetecting,\n            className: \"btn info\",\n            children: \"\\uD83D\\uDD27 Initialize OCR\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1364,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: detectAndCapture,\n            disabled: isDetecting,\n            className: \"btn highlight\",\n            children: isDetecting ? '‚ö° Processing...' : '‚ö° Detect & Capture'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1371,\n            columnNumber: 15\n          }, this), screenshots.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: clearScreenshots,\n            className: \"btn danger\",\n            children: [\"\\uD83D\\uDDD1\\uFE0F Clear All (\", screenshots.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1379,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              alert(`API Status:\\n- API Key: ${apiKey ? 'Present' : 'Missing'}\\n- Connection: Testing...\\n\\nCheck console for details.`);\n              console.log('API Key Check:', {\n                hasKey: !!apiKey,\n                keyLength: apiKey === null || apiKey === void 0 ? void 0 : apiKey.length,\n                keyStart: (apiKey === null || apiKey === void 0 ? void 0 : apiKey.substring(0, 15)) + '...',\n                timestamp: new Date().toISOString()\n              });\n            },\n            className: \"btn info\",\n            title: \"Test API connection and debug\",\n            children: \"\\uD83D\\uDD27 Test API\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1383,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1346,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"capture-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83D\\uDCCB Before/After Whiteboard Capture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1402,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"capture-status\",\n            children: [captureMode === 'waiting' && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\uD83C\\uDFAF Ready to capture whiteboard states. Start by capturing the BEFORE state.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1405,\n              columnNumber: 19\n            }, this), captureMode === 'before-captured' && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\u2705 Before state captured! Make your changes to the whiteboard, then capture the AFTER state.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1408,\n              columnNumber: 19\n            }, this), captureMode === 'ready-for-after' && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\uD83C\\uDF8A Both states captured! Scroll down to view the comparison analysis.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1411,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1403,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"capture-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: captureBeforeState,\n              disabled: isDetecting,\n              className: \"btn secondary\",\n              title: \"Capture the current state before making changes\",\n              children: \"\\uD83D\\uDCF8 Capture BEFORE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1416,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: captureAfterState,\n              disabled: isDetecting || !beforeCapture,\n              className: \"btn secondary\",\n              title: \"Capture the state after making changes\",\n              children: \"\\uD83D\\uDCF8 Capture AFTER\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1424,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: resetCaptures,\n              disabled: !beforeCapture && !afterCapture,\n              className: \"btn danger\",\n              title: \"Reset and start over with new captures\",\n              children: \"\\uD83D\\uDD04 Reset Captures\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1432,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1415,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1401,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-detection\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83D\\uDD0D Detected Text:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1445,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detected-text-box\",\n            children: detectedText || 'Click \"Detect Text\" to analyze the current frame'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1446,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1444,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1251,\n        columnNumber: 11\n      }, this), showAnalysisPanel && aiAnalysisResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ai-analysis-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83D\\uDEF8 AI Vision Analysis Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1458,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowAnalysisPanel(false),\n            className: \"close-panel-btn\",\n            children: \"\\u2715\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1459,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1457,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"analysis-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\uD83D\\uDCCA Scene Analysis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1468,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n              className: \"analysis-text\",\n              children: aiAnalysisResult\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1469,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1467,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"qa-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\uD83E\\uDD16 Ask Questions About This Content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1474,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"qa-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Ask a question about what you see in the image...\",\n                value: userQuestion,\n                onChange: e => setUserQuestion(e.target.value),\n                className: \"qa-input\",\n                onKeyPress: e => e.key === 'Enter' && askQuestionAboutContent(),\n                disabled: isUsingChatGPT\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1476,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: askQuestionAboutContent,\n                disabled: isUsingChatGPT || !userQuestion.trim(),\n                className: \"qa-button\",\n                children: isUsingChatGPT ? 'ü§î Thinking...' : 'üí¨ Ask'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1485,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1475,\n              columnNumber: 17\n            }, this), conversationHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"conversation-history\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"\\uD83D\\uDCAD Conversation\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1497,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"conversation-messages\",\n                children: conversationHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `message ${message.role === 'user' ? 'user-message' : 'ai-message'}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"message-role\",\n                    children: message.role === 'user' ? 'üë§ You:' : 'ü§ñ AI:'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1504,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"message-content\",\n                    children: message.content\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1507,\n                    columnNumber: 27\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1500,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1498,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setConversationHistory([]),\n                className: \"clear-conversation-btn\",\n                children: \"\\uD83D\\uDDD1\\uFE0F Clear Conversation\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1511,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1496,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1473,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1466,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1456,\n        columnNumber: 11\n      }, this), showVideoAnalysis && videoAnalysisResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-analysis-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83C\\uDFAC Comprehensive Video Analysis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1528,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowVideoAnalysis(false),\n            className: \"close-panel-btn\",\n            children: \"\\u2715\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1529,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1527,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"analysis-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\uD83D\\uDCCA Complete Video Analysis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1538,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n              className: \"video-analysis-text\",\n              children: videoAnalysisResult\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1539,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1537,\n            columnNumber: 15\n          }, this), videoFramesSampled.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sampled-frames-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"\\uD83D\\uDCF8 Analyzed Video Frames (\", videoFramesSampled.length, \" samples)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1545,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"frames-grid\",\n              children: videoFramesSampled.map((frame, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"frame-sample\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: frame.image,\n                  alt: `Frame ${frame.frameNumber}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1549,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"frame-info\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"Frame \", frame.frameNumber]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1551,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [frame.timestamp.toFixed(1), \"s\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1552,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1550,\n                  columnNumber: 25\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1548,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1546,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1544,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1536,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1526,\n        columnNumber: 11\n      }, this), screenshots.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gallery-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"\\uD83D\\uDCF1 Screenshots (\", screenshots.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1566,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gallery\",\n          children: screenshots.map(screenshot => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"screenshot-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: screenshot.url,\n              alt: `Screenshot at ${screenshot.timestamp.toFixed(1)}s`,\n              className: \"screenshot-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1570,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"screenshot-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"\\u23F1\\uFE0F Time:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1576,\n                  columnNumber: 24\n                }, this), \" \", screenshot.timestamp.toFixed(1), \"s\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1576,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"\\uD83D\\uDCDD Text:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1577,\n                  columnNumber: 24\n                }, this), \" \", screenshot.detectedText]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1577,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1575,\n              columnNumber: 19\n            }, this)]\n          }, screenshot.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1569,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1567,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1565,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1228,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1222,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"irhysTVCyc/euMYyp7hutQOxjPM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useRef","useState","Tesseract","GoogleGenerativeAI","jsxDEV","_jsxDEV","App","_s","videoFile","setVideoFile","videoURL","setVideoURL","screenshots","setScreenshots","isDetecting","setIsDetecting","detectedText","setDetectedText","ocrWorker","setOcrWorker","apiKey","setApiKey","process","env","REACT_APP_GEMINI_API_KEY","isUsingChatGPT","setIsUsingChatGPT","chatGPTResult","setChatGPTResult","aiAnalysisResult","setAiAnalysisResult","showAnalysisPanel","setShowAnalysisPanel","lastApiCall","setLastApiCall","rateLimitCooldown","setRateLimitCooldown","conversationHistory","setConversationHistory","userQuestion","setUserQuestion","apiKeyStatus","setApiKeyStatus","beforeCapture","setBeforeCapture","afterCapture","setAfterCapture","captureMode","setCaptureMode","comparisonResult","setComparisonResult","showComparison","setShowComparison","videoAnalysisResult","setVideoAnalysisResult","isAnalyzingVideo","setIsAnalyzingVideo","showVideoAnalysis","setShowVideoAnalysis","videoFramesSampled","setVideoFramesSampled","testApiKey","genAI","model","getGenerativeModel","result","generateContent","response","text","console","log","error","isUsingBackend","setIsUsingBackend","lectureId","setLectureId","uploadProgress","setUploadProgress","processingStatus","setProcessingStatus","queryText","setQueryText","queryResult","setQueryResult","isQuerying","setIsQuerying","videoRef","canvasRef","initializeOCR","worker","createWorker","logger","m","setParameters","tessedit_char_whitelist","tessedit_pageseg_mode","preserve_interword_spaces","tessedit_do_invert","message","captureBeforeState","current","alert","video","canvas","ctx","getContext","width","videoWidth","height","videoHeight","drawImage","dataURL","toDataURL","image","timestamp","Date","toLocaleString","frameTime","currentTime","captureAfterState","analyzeChanges","timeDiff","timeFormatted","Math","abs","toFixed","basicAnalysis","resetCaptures","analyzeEntireVideo","duration","isNaN","geminiApiKey","initialMessage","round","framesToSample","min","max","floor","frameInterval","sampledFrames","i","Promise","resolve","seekHandler","removeEventListener","push","frameNumber","addEventListener","prev","analysisPrompt","length","imageParts","frame","base64Data","split","inlineData","data","mimeType","analysis","finalMessage","errorMsg","handleFileUpload","event","file","target","files","type","startsWith","url","URL","createObjectURL","uploadResult","uploadVideoToBackend","processResult","processVideoWithBackend","path","name","setTimeout","takeScreenshot","toBlob","blob","screenshot","id","now","preprocessImage","imageData","getImageData","gray","enhanced","threshold","putImageData","detectText","confidence","recognize","rectangle","top","left","cleanText","trim","confidenceText","detectTextEnhanced","results","dataURL1","result1","method","dataURL2","result2","dataURL3","result3","bestResult","reduce","best","displayText","forEach","_result$confidence","enhanceWithChatGPT","imageDataURL","ocrText","imagePart","prompt","correctedText","errorMessage","includes","analyzeSceneWithAI","timeSinceLastCall","minDelay","waitTime","ceil","waitMessage","loadingMessage","askQuestionAboutContent","contextualQuestion","map","msg","role","content","join","answer","newConversation","trimmedHistory","slice","analyzeCurrentScene","detectTextWithChatGPT","detectAndCapture","clearScreenshots","revokeObjectURL","API_BASE_URL","formData","FormData","append","fetch","body","ok","Error","status","statusText","json","videoPath","title","headers","JSON","stringify","queryLecture","query","handleBackendQuery","formattedResult","links","link","timecode","flashcards","card","question","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","accept","onChange","placeholder","value","e","href","rel","checked","onKeyPress","key","onClick","disabled","ref","src","controls","style","display","hasKey","keyLength","keyStart","substring","toISOString","index","alt","_c","$RefreshReg$"],"sources":["/Users/kyleprice/south_florida_hackstreet/whiteboard-detector/src/App.js"],"sourcesContent":["import { useRef, useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\nimport './App.css';\n\nfunction App() {\n  const [videoFile, setVideoFile] = useState(null);\n  const [videoURL, setVideoURL] = useState(null);\n  const [screenshots, setScreenshots] = useState([]);\n  const [isDetecting, setIsDetecting] = useState(false);\n  const [detectedText, setDetectedText] = useState('');\n  const [ocrWorker, setOcrWorker] = useState(null);\n  const [apiKey, setApiKey] = useState(process.env.REACT_APP_GEMINI_API_KEY || '');\n  const [isUsingChatGPT, setIsUsingChatGPT] = useState(false);\n  const [chatGPTResult, setChatGPTResult] = useState('');\n  \n  // AI Vision Analysis Results\n  const [aiAnalysisResult, setAiAnalysisResult] = useState('');\n  const [showAnalysisPanel, setShowAnalysisPanel] = useState(false);\n  \n  // Rate limiting and conversation state\n  const [lastApiCall, setLastApiCall] = useState(0);\n  const [rateLimitCooldown, setRateLimitCooldown] = useState(0);\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const [userQuestion, setUserQuestion] = useState('');\n  const [apiKeyStatus, setApiKeyStatus] = useState('unchecked'); // unchecked, valid, invalid\n  \n  // Before/After Whiteboard Capture System\n  const [beforeCapture, setBeforeCapture] = useState(null);\n  const [afterCapture, setAfterCapture] = useState(null);\n  const [captureMode, setCaptureMode] = useState('waiting'); // waiting, before-captured, ready-for-after\n  const [comparisonResult, setComparisonResult] = useState('');\n  const [showComparison, setShowComparison] = useState(false);\n  \n  // Video Analysis System\n  const [videoAnalysisResult, setVideoAnalysisResult] = useState('');\n  const [isAnalyzingVideo, setIsAnalyzingVideo] = useState(false);\n  const [showVideoAnalysis, setShowVideoAnalysis] = useState(false);\n  const [videoFramesSampled, setVideoFramesSampled] = useState([]);\n  \n  // Test Gemini API key validity\n  const testApiKey = async () => {\n    if (!apiKey) {\n      setApiKeyStatus('invalid');\n      return;\n    }\n    \n    try {\n      // Test Gemini API key with a simple request\n      const genAI = new GoogleGenerativeAI(apiKey);\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      \n      // Simple test request\n      const result = await model.generateContent(\"Test\");\n      const response = await result.response;\n      \n      if (response.text()) {\n        setApiKeyStatus('valid');\n        console.log('‚úÖ Gemini API key is valid');\n      } else {\n        setApiKeyStatus('invalid');\n        console.log('‚ùå Gemini API key is invalid');\n      }\n    } catch (error) {\n      setApiKeyStatus('invalid');\n      console.log('‚ùå Gemini API key test failed:', error);\n    }\n  };  // Backend integration state\n  const [isUsingBackend, setIsUsingBackend] = useState(false);\n  const [lectureId, setLectureId] = useState('');\n  const [uploadProgress, setUploadProgress] = useState('');\n  const [processingStatus, setProcessingStatus] = useState('');\n  const [queryText, setQueryText] = useState('');\n  const [queryResult, setQueryResult] = useState('');\n  const [isQuerying, setIsQuerying] = useState(false);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Initialize OCR worker with handwriting optimizations\n  const initializeOCR = async () => {\n    if (ocrWorker) return ocrWorker;\n    \n    try {\n      console.log('Starting OCR initialization...');\n      const worker = await Tesseract.createWorker('eng', 1, {\n        logger: m => console.log('OCR Logger:', m)\n      });\n      \n      // Configure for better handwriting recognition\n      await worker.setParameters({\n        tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?()[]{}=-+*/\\'\"@#$%^&_|\\\\~ ',\n        tessedit_pageseg_mode: '6', // Uniform block of text\n        preserve_interword_spaces: '1',\n        tessedit_do_invert: '0'\n      });\n      \n      console.log('OCR worker created successfully');\n      setOcrWorker(worker);\n      return worker;\n    } catch (error) {\n      console.error('OCR initialization failed:', error);\n      setDetectedText('OCR initialization failed: ' + error.message);\n      return null;\n    }\n  };\n\n  // Before/After Whiteboard Capture Functions\n  const captureBeforeState = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n    \n    if (video.videoWidth === 0 || video.videoHeight === 0) {\n      alert('Video not loaded properly');\n      return;\n    }\n\n    // Capture the current frame\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataURL = canvas.toDataURL('image/png');\n    \n    setBeforeCapture({\n      image: dataURL,\n      timestamp: new Date().toLocaleString(),\n      frameTime: video.currentTime\n    });\n    \n    setCaptureMode('before-captured');\n    setDetectedText('üì∏ Before state captured! Make your edits to the whiteboard, then capture the after state.');\n  };\n\n  const captureAfterState = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n\n    if (!beforeCapture) {\n      alert('Please capture the before state first.');\n      return;\n    }\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n\n    // Capture the current frame\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataURL = canvas.toDataURL('image/png');\n    \n    setAfterCapture({\n      image: dataURL,\n      timestamp: new Date().toLocaleString(),\n      frameTime: video.currentTime\n    });\n    \n    setCaptureMode('ready-for-after');\n    setShowComparison(true);\n    setDetectedText('üì∏ After state captured! Scroll down to see before/after comparison.');\n    \n    // Auto-generate comparison analysis\n    await analyzeChanges();\n  };\n\n  const analyzeChanges = async () => {\n    if (!beforeCapture || !afterCapture) return;\n    \n    setComparisonResult('üîç Analyzing changes between before and after states...');\n    \n    try {\n      // For now, provide a basic comparison message\n      // In the future, this could use AI to detect actual differences\n      const timeDiff = afterCapture.frameTime - beforeCapture.frameTime;\n      const timeFormatted = Math.abs(timeDiff).toFixed(1);\n      \n      const basicAnalysis = `üìä **Before/After Analysis Complete**\n\n‚è±Ô∏è **Time Difference**: ${timeFormatted} seconds between captures\nüìÖ **Before**: ${beforeCapture.timestamp}\nüìÖ **After**: ${afterCapture.timestamp}\n\nüîç **Visual Comparison**: \n- Both states have been captured for manual comparison\n- Review the images below to identify changes\n- Look for added text, erased content, or modified diagrams\n\nüí° **Tip**: Use the AI analysis feature on each image individually to get detailed descriptions of what changed.`;\n\n      setComparisonResult(basicAnalysis);\n      \n    } catch (error) {\n      setComparisonResult(`‚ùå Error analyzing changes: ${error.message}`);\n    }\n  };\n\n  const resetCaptures = () => {\n    setBeforeCapture(null);\n    setAfterCapture(null);\n    setCaptureMode('waiting');\n    setComparisonResult('');\n    setShowComparison(false);\n    setDetectedText('üîÑ Capture system reset. Ready to capture new before/after states.');\n  };\n\n  // Comprehensive Video Analysis Function with Gemini\n  const analyzeEntireVideo = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    if (video.duration === 0 || isNaN(video.duration)) {\n      alert('Video not fully loaded. Please wait for the video to load completely.');\n      return;\n    }\n\n    // Check for Gemini API key\n    const geminiApiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!geminiApiKey) {\n      alert('Gemini API key not configured. Please check your environment variables.');\n      return;\n    }\n\n    setIsAnalyzingVideo(true);\n    setShowVideoAnalysis(true);\n    setVideoFramesSampled([]);\n    \n    const initialMessage = `ü§ñ **Starting Comprehensive Video Analysis with Gemini**\n\nüìπ **Video Details:**\n- Duration: ${Math.round(video.duration)} seconds\n- Dimensions: ${video.videoWidth}x${video.videoHeight}\n\nüîç **Analysis Process:**\n1. Sampling key frames throughout the video\n2. Processing images with Gemini Vision AI\n3. Identifying patterns and changes over time\n4. Generating comprehensive summary and insights\n\n‚ö° **Processing Status:** Sampling frames...`;\n\n    setVideoAnalysisResult(initialMessage);\n\n    try {\n      // Sample frames at strategic intervals throughout the video\n      const framesToSample = Math.min(8, Math.max(3, Math.floor(video.duration / 10))); // 3-8 frames depending on video length\n      const frameInterval = video.duration / framesToSample;\n      const sampledFrames = [];\n\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n\n      // Sample frames at different timestamps\n      for (let i = 0; i < framesToSample; i++) {\n        const timestamp = i * frameInterval;\n        \n        // Seek to timestamp and capture frame\n        await new Promise((resolve) => {\n          const seekHandler = () => {\n            video.removeEventListener('seeked', seekHandler);\n            \n            // Capture the frame\n            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n            const dataURL = canvas.toDataURL('image/jpeg', 0.8);\n            \n            sampledFrames.push({\n              timestamp: timestamp,\n              image: dataURL,\n              frameNumber: i + 1\n            });\n            \n            resolve();\n          };\n          \n          video.addEventListener('seeked', seekHandler);\n          video.currentTime = timestamp;\n        });\n\n        // Update progress\n        setVideoAnalysisResult(prev => prev + `\\nüì∏ Frame ${i + 1}/${framesToSample} captured at ${timestamp.toFixed(1)}s`);\n      }\n\n      setVideoFramesSampled(sampledFrames);\n\n      // Update status\n      setVideoAnalysisResult(prev => prev + '\\n\\nüöÄ Sending frames to Gemini Vision AI for analysis...');\n\n      // Initialize Gemini\n      const genAI = new GoogleGenerativeAI(geminiApiKey);\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n      // Create comprehensive analysis prompt\n      const analysisPrompt = `Please provide a comprehensive analysis of this video based on the ${sampledFrames.length} key frames I've sampled throughout its ${Math.round(video.duration)}-second duration.\n\nüéØ **COMPREHENSIVE VIDEO ANALYSIS REQUEST:**\n\nüìä **OVERALL SUMMARY:**\n- What is the main purpose/topic of this video?\n- What type of content is being presented? (lecture, tutorial, meeting, etc.)\n- Who is the target audience?\n\nüîç **DETAILED CONTENT ANALYSIS:**\n- What are the key concepts, topics, or subjects discussed?\n- Are there any educational elements, teaching materials, or learning objectives?\n- What visual aids are used? (whiteboards, slides, demonstrations, etc.)\n\nüìù **TEXT AND WRITING ANALYSIS:**\n- Extract and transcribe ALL visible text throughout the video\n- Identify any equations, formulas, diagrams, or technical content\n- Note any handwritten vs. printed text\n- Track how text content changes over time\n\nüë• **PEOPLE AND ACTIVITIES:**\n- How many people are visible and what are their roles?\n- What activities are taking place? (teaching, presenting, discussing, etc.)\n- How do people interact with materials or each other?\n- What gestures, movements, or behaviors are significant?\n\nüéì **EDUCATIONAL VALUE:**\n- What skills or knowledge does this video teach?\n- What are the main learning outcomes?\n- How is information structured and presented?\n- What teaching methods or techniques are used?\n\n‚è±Ô∏è **TEMPORAL ANALYSIS:**\n- How does the content progress over time?\n- Are there distinct sections or phases in the video?\n- What changes occur between the beginning and end?\n- Identify any pivotal moments or transitions\n\nüèõÔ∏è **ENVIRONMENT & CONTEXT:**\n- Describe the setting/location (classroom, office, lab, etc.)\n- What equipment, tools, or materials are present?\n- How does the environment support the content?\n\nüí° **KEY INSIGHTS & TAKEAWAYS:**\n- What are the most important points or messages?\n- What would someone learn from watching this video?\n- How could this content be applied or used?\n\nüìã **STRUCTURED SUMMARY:**\nProvide a clear, organized summary that someone could use to understand the video's content without watching it.\n\nPlease be thorough and detailed - I want to understand everything that happens in this video and its educational/informational value.`;\n\n      // Convert image data URLs to parts for Gemini\n      const imageParts = [];\n      for (const frame of sampledFrames) {\n        // Convert data URL to base64\n        const base64Data = frame.image.split(',')[1];\n        imageParts.push({\n          inlineData: {\n            data: base64Data,\n            mimeType: \"image/jpeg\"\n          }\n        });\n      }\n\n      // Send to Gemini\n      const result = await model.generateContent([\n        analysisPrompt,\n        ...imageParts\n      ]);\n\n      const response = await result.response;\n      const analysis = response.text();\n\n      const finalMessage = `‚úÖ **Comprehensive Video Analysis Complete!**\n\nüéØ **Analysis Summary:**\n- Analyzed ${sampledFrames.length} key frames from ${Math.round(video.duration)}-second video\n- Processed with Gemini Vision AI\n- Comprehensive content analysis complete\n\nÔøΩ **Detailed Analysis Results:**\n\n${analysis}\n\n---\n*Analysis completed by Google Gemini Vision AI*\n*${sampledFrames.length} frames analyzed from ${Math.round(video.duration)}-second video*`;\n\n      setVideoAnalysisResult(finalMessage);\n      setDetectedText(`ü§ñ Comprehensive video analysis complete! View detailed results in the Video Analysis panel.`);\n\n    } catch (error) {\n      console.error('Video analysis error:', error);\n      const errorMsg = `‚ùå **Video Analysis Error**\n\n**Error**: ${error.message}\n\n**Troubleshooting:**\n‚Ä¢ Ensure video is fully loaded\n‚Ä¢ Check internet connection\n‚Ä¢ Verify Gemini API key is correct\n‚Ä¢ Try analyzing a shorter video segment\n\n**Alternative**: Use the single frame analysis for specific moments in the video.`;\n      \n      setVideoAnalysisResult(errorMsg);\n    } finally {\n      setIsAnalyzingVideo(false);\n    }\n  };\n\n  // Handle video file upload\n  const handleFileUpload = async (event) => {\n    const file = event.target.files[0];\n    if (file && file.type.startsWith('video/')) {\n      setVideoFile(file);\n      const url = URL.createObjectURL(file);\n      setVideoURL(url);\n      setScreenshots([]);\n      setDetectedText('');\n      setOcrWorker(null); // Reset worker for new video\n      setLectureId('');\n      setProcessingStatus('');\n      setQueryResult('');\n      \n      // If using backend, upload and process the video\n      if (isUsingBackend) {\n        try {\n          setUploadProgress('Uploading video to backend...');\n          const uploadResult = await uploadVideoToBackend(file);\n          console.log('Upload result:', uploadResult);\n          \n          setUploadProgress('Upload complete! Processing video...');\n          const processResult = await processVideoWithBackend(\n            uploadResult.video.path, \n            file.name\n          );\n          console.log('Process result:', processResult);\n          \n          setLectureId(processResult.lectureId);\n          setProcessingStatus(`Processing started. Lecture ID: ${processResult.lectureId}`);\n          setUploadProgress('');\n        } catch (error) {\n          console.error('Backend upload/processing failed:', error);\n          setUploadProgress(`Error: ${error.message}`);\n        }\n      } else {\n        // Initialize OCR for local processing\n        setTimeout(() => {\n          initializeOCR();\n        }, 1000);\n      }\n    } else {\n      alert('Please select a valid video file');\n    }\n  };\n\n  // Take a screenshot of current video frame\n  const takeScreenshot = async () => {\n    if (!videoRef.current || !canvasRef.current) return;\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Draw video frame to canvas\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Convert to blob and create screenshot object\n    canvas.toBlob((blob) => {\n      const screenshot = {\n        id: Date.now(),\n        blob: blob,\n        url: URL.createObjectURL(blob),\n        timestamp: video.currentTime,\n        detectedText: detectedText || 'No text detected'\n      };\n      setScreenshots(prev => [...prev, screenshot]);\n    }, 'image/png');\n  };\n\n  // Image preprocessing for better OCR\n  const preprocessImage = (canvas, ctx) => {\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n    \n    // Convert to grayscale and enhance contrast\n    for (let i = 0; i < data.length; i += 4) {\n      // Convert to grayscale\n      const gray = Math.round(0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]);\n      \n      // Enhance contrast - make text darker and background lighter\n      let enhanced;\n      if (gray < 128) {\n        // Dark pixels (likely text) - make darker\n        enhanced = Math.max(0, gray - 30);\n      } else {\n        // Light pixels (likely background) - make lighter\n        enhanced = Math.min(255, gray + 30);\n      }\n      \n      // Apply threshold for better text separation\n      const threshold = enhanced < 100 ? 0 : 255;\n      \n      data[i] = threshold;     // Red\n      data[i + 1] = threshold; // Green\n      data[i + 2] = threshold; // Blue\n      // Alpha channel (data[i + 3]) remains unchanged\n    }\n    \n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n  };\n\n  // OCR text detection with preprocessing\n  const detectText = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n\n    setIsDetecting(true);\n    setDetectedText('Initializing OCR...');\n\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      \n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      setDetectedText('Preprocessing image for handwriting...');\n\n      // Apply image preprocessing for better OCR\n      preprocessImage(canvas, ctx);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n\n      if (worker) {\n        setDetectedText('Running enhanced OCR...');\n        \n        // Convert processed canvas to data URL and run OCR\n        const dataURL = canvas.toDataURL('image/png');\n        \n        const { data: { text, confidence } } = await worker.recognize(dataURL, {\n          rectangle: { top: 0, left: 0, width: canvas.width, height: canvas.height }\n        });\n        \n        const cleanText = text.trim() || 'No text detected';\n        const confidenceText = confidence ? ` (Confidence: ${confidence.toFixed(1)}%)` : '';\n        setDetectedText(cleanText + confidenceText);\n        console.log('OCR Result:', cleanText, 'Confidence:', confidence);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n\n    } catch (error) {\n      console.error('Text detection failed:', error);\n      setDetectedText('Detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Enhanced OCR for messy handwriting\n  const detectTextEnhanced = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n\n    setIsDetecting(true);\n    setDetectedText('Initializing enhanced handwriting detection...');\n\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      \n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n\n      if (worker) {\n        // Try multiple preprocessing approaches\n        const results = [];\n        \n        // Method 1: High contrast black/white\n        setDetectedText('Method 1: High contrast processing...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        preprocessImage(canvas, ctx);\n        const dataURL1 = canvas.toDataURL('image/png');\n        \n        await worker.setParameters({\n          tessedit_pageseg_mode: '6', // Uniform block of text\n          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?()[]{}=-+*/\\'\"@#$%^&_|\\\\~ \\n'\n        });\n        \n        const result1 = await worker.recognize(dataURL1);\n        results.push({ method: 'High Contrast', text: result1.data.text, confidence: result1.data.confidence });\n\n        // Method 2: Single character mode for individual letters\n        setDetectedText('Method 2: Character-by-character analysis...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        \n        await worker.setParameters({\n          tessedit_pageseg_mode: '8', // Single character\n          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n        });\n        \n        const dataURL2 = canvas.toDataURL('image/png');\n        const result2 = await worker.recognize(dataURL2);\n        results.push({ method: 'Character Mode', text: result2.data.text, confidence: result2.data.confidence });\n\n        // Method 3: Raw text detection with minimal processing\n        setDetectedText('Method 3: Raw text detection...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        \n        await worker.setParameters({\n          tessedit_pageseg_mode: '13', // Raw line. Treat the image as a single text line\n          preserve_interword_spaces: '1'\n        });\n        \n        const dataURL3 = canvas.toDataURL('image/png');\n        const result3 = await worker.recognize(dataURL3);\n        results.push({ method: 'Raw Line', text: result3.data.text, confidence: result3.data.confidence });\n\n        // Find best result\n        const bestResult = results.reduce((best, current) => \n          current.confidence > best.confidence ? current : best\n        );\n\n        // Display all results\n        let displayText = `üèÜ BEST (${bestResult.method}): ${bestResult.text}\\n\\n`;\n        results.forEach(result => {\n          displayText += `${result.method} (${result.confidence?.toFixed(1)}%): ${result.text}\\n\\n`;\n        });\n\n        setDetectedText(displayText);\n        console.log('Enhanced OCR Results:', results);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n\n    } catch (error) {\n      console.error('Enhanced text detection failed:', error);\n      setDetectedText('Enhanced detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // ChatGPT integration for better text interpretation\n  const enhanceWithChatGPT = async (imageDataURL, ocrText) => {\n    if (!apiKey) {\n      setChatGPTResult('Please enter your Gemini API key first');\n      return;\n    }\n\n    setIsUsingChatGPT(true);\n    setChatGPTResult('Sending to Gemini for analysis...');\n\n    try {\n      // Initialize Gemini\n      const genAI = new GoogleGenerativeAI(apiKey);\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n      // Convert the image data URL to the format Gemini expects\n      const base64Data = imageDataURL.split(',')[1];\n      \n      const imagePart = {\n        inlineData: {\n          data: base64Data,\n          mimeType: \"image/jpeg\"\n        }\n      };\n\n      const prompt = `I have handwritten text on a whiteboard that OCR is struggling to read accurately. The OCR detected this text: \"${ocrText}\". Please look at the image and provide a clean, corrected version of what is actually written. Focus on:\n1. Correcting OCR errors and misread characters\n2. Fixing spacing and formatting\n3. Interpreting unclear handwriting\n4. Organizing the text logically\n5. Only return the corrected text content, nothing else.`;\n\n      // Send request to Gemini\n      const result = await model.generateContent([prompt, imagePart]);\n      const response = await result.response;\n      const correctedText = response.text();\n\n      setChatGPTResult(correctedText);\n      \n      // Update the main detected text with Gemini result\n      setDetectedText(`ü§ñ Gemini Enhanced:\\n${correctedText}\\n\\nüìù Original OCR:\\n${ocrText}`);\n      \n    } catch (error) {\n      console.error('Gemini API error:', error);\n      let errorMessage = `Error: ${error.message}`;\n      \n      if (error.message.includes('API_KEY_INVALID')) {\n        errorMessage = `üîë Authentication Error: Your Gemini API key appears to be invalid. Please check your configuration.`;\n      } else if (error.message.includes('RATE_LIMIT_EXCEEDED')) {\n        errorMessage = `‚ö†Ô∏è Rate Limit Exceeded: You've made too many requests to the Gemini API. Please wait a few minutes and try again.`;\n      }\n      \n      setChatGPTResult(errorMessage);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Gemini Scene Analysis Function\n  const analyzeSceneWithAI = async (imageDataURL) => {\n    const geminiApiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    \n    if (!geminiApiKey) {\n      setChatGPTResult('Gemini API key missing. Please check environment variables.');\n      setAiAnalysisResult('Gemini API key missing. Please check environment variables.');\n      setShowAnalysisPanel(true);\n      return;\n    }\n\n    // Rate limiting check\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall;\n    const minDelay = 2000; // 2 seconds between calls for Gemini\n    \n    if (timeSinceLastCall < minDelay) {\n      const waitTime = Math.ceil((minDelay - timeSinceLastCall) / 1000);\n      const waitMessage = `‚è±Ô∏è Please wait ${waitTime} seconds before making another request.`;\n      setAiAnalysisResult(waitMessage);\n      setShowAnalysisPanel(true);\n      return;\n    }\n\n    setLastApiCall(now);\n    setIsUsingChatGPT(true);\n    setShowAnalysisPanel(true);\n\n    try {\n      // Show immediate feedback\n      const loadingMessage = `ü§ñ **Gemini AI Analysis Starting!**\n\nüì∏ **Image Received**: Processing your image now...\nüöÄ **AI Status**: Connecting to Google Gemini Vision AI...\n‚ö° **Processing**: This typically takes 5-15 seconds\n\n**What I'm analyzing:**\n‚Ä¢ All visible text (handwritten, printed, signs)\n‚Ä¢ People and their activities\n‚Ä¢ Objects and equipment in the scene\n‚Ä¢ Educational content and concepts\n‚Ä¢ Overall scene description and context\n\nPlease wait while I provide a comprehensive analysis...`;\n\n      setChatGPTResult(loadingMessage);\n      setAiAnalysisResult(loadingMessage);\n      \n      // Initialize Gemini\n      const genAI = new GoogleGenerativeAI(geminiApiKey);\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n      // Prepare the prompt\n      const prompt = `Please provide a comprehensive analysis of this image. I want to understand everything that's happening in this scene. Please include:\n\nüìã **SCENE OVERVIEW:**\n- What type of environment is this? (classroom, office, meeting room, etc.)\n- What is the main focus or subject?\n\nüîç **DETAILED OBSERVATIONS:**\n- All text visible (handwritten, printed, on boards, signs, etc.)\n- People present (count, what they're doing, clothing, gestures)\n- Objects and equipment (whiteboards, computers, furniture, tools)\n- Colors, lighting, and atmosphere\n\nüìù **TEXT CONTENT:**\n- Transcribe ALL visible text accurately\n- Note the context of each text element\n- Identify any diagrams, equations, or drawings\n\nüéØ **EDUCATIONAL CONTENT:**\n- If this appears to be educational, what subject/topic?\n- Key concepts being taught or discussed\n- Any visual aids or teaching materials\n\nüìä **SUMMARY:**\n- Main purpose/activity in this scene\n- Most important information conveyed\n- Overall assessment of what's happening\n\nBe thorough and detailed - I want to understand everything about this scene!`;\n\n      // Convert the image data URL to the format Gemini expects\n      const base64Data = imageDataURL.split(',')[1];\n      \n      const imagePart = {\n        inlineData: {\n          data: base64Data,\n          mimeType: \"image/jpeg\"\n        }\n      };\n\n      // Send request to Gemini\n      const result = await model.generateContent([prompt, imagePart]);\n      const response = await result.response;\n      const analysis = response.text();\n\n      const finalMessage = `üéâ **Gemini Analysis Complete!**\n\n${analysis}\n\n---\n*Analysis completed by Google Gemini Vision AI*`;\n\n      setChatGPTResult(finalMessage);\n      setAiAnalysisResult(finalMessage);\n      setDetectedText(`ü§ñ AI Analysis Complete! Full results available in analysis panel.`);\n      \n    } catch (error) {\n      console.error('Gemini API error:', error);\n      let errorMsg = `‚ùå **Error**: ${error.message}`;\n      \n      if (error.message.includes('API_KEY_INVALID')) {\n        errorMsg = `üîë **API Key Error**: Your Gemini API key is invalid. Please check your configuration.`;\n      } else if (error.message.includes('RATE_LIMIT_EXCEEDED')) {\n        errorMsg = `‚ö†Ô∏è **Rate Limit**: You've made too many requests. Please wait a moment and try again.`;\n      } else if (error.message.includes('SAFETY')) {\n        errorMsg = `üõ°Ô∏è **Safety Filter**: The image was blocked by safety filters. Please try a different image.`;\n      } else {\n        errorMsg += `\n\n**Troubleshooting Tips:**\n‚Ä¢ Check your internet connection\n‚Ä¢ Verify your Gemini API key is correct\n‚Ä¢ Try again in a few moments\n‚Ä¢ Contact support if the issue persists`;\n      }\n      \n      setChatGPTResult(errorMsg);\n      setAiAnalysisResult(errorMsg);\n      setShowAnalysisPanel(true);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Gemini Q&A about analyzed content\n  const askQuestionAboutContent = async () => {\n    const geminiApiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    \n    if (!geminiApiKey) {\n      alert('Gemini API key missing. Please check environment variables.');\n      return;\n    }\n    \n    if (!userQuestion.trim()) {\n      alert('Please enter a question');\n      return;\n    }\n    \n    if (!aiAnalysisResult) {\n      alert('Please analyze some content first before asking questions');\n      return;\n    }\n\n    // Rate limiting check\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall;\n    const minDelay = 2000; // 2 seconds for Q&A with Gemini\n    \n    if (timeSinceLastCall < minDelay) {\n      const waitTime = Math.ceil((minDelay - timeSinceLastCall) / 1000);\n      alert(`Please wait ${waitTime} seconds before asking another question.`);\n      return;\n    }\n\n    setLastApiCall(now);\n    setIsUsingChatGPT(true);\n\n    try {\n      // Create context-aware message for Gemini\n      const contextualQuestion = `Based on my previous image analysis, please answer this question:\n\nPREVIOUS ANALYSIS CONTEXT:\n${aiAnalysisResult}\n\nCONVERSATION HISTORY:\n${conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nCURRENT QUESTION: ${userQuestion}\n\nPlease provide a helpful, detailed answer based on the analysis and conversation context above. Be specific and reference the visual content when relevant.`;\n\n      // Initialize Gemini\n      const genAI = new GoogleGenerativeAI(geminiApiKey);\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n      // Send request to Gemini\n      const result = await model.generateContent(contextualQuestion);\n      const response = await result.response;\n      const answer = response.text();\n\n      // Add to conversation history\n      const newConversation = [\n        ...conversationHistory,\n        { role: \"user\", content: userQuestion },\n        { role: \"assistant\", content: answer }\n      ];\n      \n      // Keep only last 8 messages (4 Q&A pairs) to manage context length\n      const trimmedHistory = newConversation.slice(-8);\n      setConversationHistory(trimmedHistory);\n      \n      // Clear the input\n      setUserQuestion('');\n      \n    } catch (error) {\n      console.error('Gemini API error:', error);\n      let errorMessage = `Error: ${error.message}`;\n      \n      if (error.message.includes('API_KEY_INVALID')) {\n        errorMessage = `üîë **API Key Error**: Your Gemini API key is invalid. Please check your configuration.`;\n      } else if (error.message.includes('RATE_LIMIT_EXCEEDED')) {\n        errorMessage = `‚ö†Ô∏è **Rate Limit**: You've made too many requests. Please wait a moment and try again.`;\n      } else if (error.message.includes('SAFETY')) {\n        errorMessage = `üõ°Ô∏è **Safety Filter**: Your question was blocked by safety filters. Please rephrase your question.`;\n      }\n      \n      alert(errorMessage);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Full Scene Analysis - capture frame and analyze everything with AI Vision\n  const analyzeCurrentScene = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n\n    setIsDetecting(true);\n    setDetectedText('üì∏ Capturing frame for AI analysis...');\n\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      \n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw current video frame without any preprocessing for AI Vision\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      \n      // Convert to data URL for AI Vision API\n      const dataURL = canvas.toDataURL('image/jpeg', 0.8); // Use JPEG for smaller size\n      \n      // Run AI Vision analysis\n      await analyzeSceneWithAI(dataURL);\n      \n    } catch (error) {\n      console.error('Scene analysis failed:', error);\n      setDetectedText('Scene analysis failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Enhanced OCR with ChatGPT integration\n  const detectTextWithChatGPT = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n\n    setIsDetecting(true);\n    setDetectedText('Running OCR + ChatGPT analysis...');\n\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      \n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      setDetectedText('Preprocessing image...');\n\n      // Apply image preprocessing for better OCR\n      preprocessImage(canvas, ctx);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n\n      if (worker) {\n        setDetectedText('Running OCR...');\n        \n        // Convert processed canvas to data URL\n        const dataURL = canvas.toDataURL('image/png');\n        \n        const { data: { text, confidence } } = await worker.recognize(dataURL);\n        const ocrText = text.trim() || 'No text detected';\n        \n        setDetectedText(`OCR Result: ${ocrText}\\n\\nSending to ChatGPT for enhancement...`);\n        \n        // Send to ChatGPT for enhancement\n        await enhanceWithChatGPT(dataURL, ocrText);\n        \n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n\n    } catch (error) {\n      console.error('OCR + ChatGPT detection failed:', error);\n      setDetectedText('Detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Auto-detect text and take screenshot\n  const detectAndCapture = async () => {\n    await detectText();\n    setTimeout(() => {\n      takeScreenshot();\n    }, 500); // Small delay to ensure text is updated\n  };\n\n  // Clear all screenshots\n  const clearScreenshots = () => {\n    screenshots.forEach(screenshot => {\n      if (screenshot.url) {\n        URL.revokeObjectURL(screenshot.url);\n      }\n    });\n    setScreenshots([]);\n  };\n\n  // Backend API Integration Functions\n  const API_BASE_URL = 'http://localhost:3000';\n\n  // Upload video to backend\n  const uploadVideoToBackend = async (videoFile) => {\n    const formData = new FormData();\n    formData.append('video', videoFile);\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/upload`, {\n        method: 'POST',\n        body: formData\n      });\n\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend upload error:', error);\n      throw error;\n    }\n  };\n\n  // Process video with backend\n  const processVideoWithBackend = async (videoPath, title = 'Untitled Lecture') => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ingest`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          videoPath,\n          title\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Processing failed: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend processing error:', error);\n      throw error;\n    }\n  };\n\n  // Query processed lecture\n  const queryLecture = async (lectureId, query) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          lectureId,\n          query\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Query failed: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend query error:', error);\n      throw error;\n    }\n  };\n\n  // Handle querying the backend\n  const handleBackendQuery = async () => {\n    if (!lectureId || !queryText.trim()) {\n      setQueryResult('Please ensure video is processed and enter a query');\n      return;\n    }\n\n    setIsQuerying(true);\n    setQueryResult('Analyzing lecture content...');\n\n    try {\n      const result = await queryLecture(lectureId, queryText.trim());\n      console.log('Query result:', result);\n      \n      let formattedResult = `Answer: ${result.answer}\\n\\n`;\n      \n      if (result.links && result.links.length > 0) {\n        formattedResult += 'Relevant timestamps:\\n';\n        result.links.forEach(link => {\n          formattedResult += `‚Ä¢ ${link.timecode}: ${link.text}\\n`;\n        });\n        formattedResult += '\\n';\n      }\n      \n      if (result.flashcards && result.flashcards.length > 0) {\n        formattedResult += 'Generated flashcard:\\n';\n        result.flashcards.forEach(card => {\n          formattedResult += `Q: ${card.question}\\nA: ${card.answer}\\n`;\n        });\n      }\n      \n      setQueryResult(formattedResult);\n    } catch (error) {\n      console.error('Query failed:', error);\n      setQueryResult(`Query failed: ${error.message}`);\n    } finally {\n      setIsQuerying(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>ÔøΩ AI Scene Analyzer</h1>\n        <p>Upload videos and analyze everything with AI Vision + OCR text detection</p>\n      </header>\n\n      <main className=\"App-main\">\n        {/* File Upload */}\n        <div className=\"upload-section\">\n          <label htmlFor=\"video-upload\" className=\"upload-label\">\n            Choose Video File\n          </label>\n          <input\n            id=\"video-upload\"\n            type=\"file\"\n            accept=\"video/*\"\n            onChange={handleFileUpload}\n            className=\"file-input\"\n          />\n          {!videoFile && (\n            <div className=\"upload-prompt\">\n              <p>üìπ Select a video file to get started</p>\n              <p><small>Supported formats: MP4, WebM, AVI</small></p>\n            </div>\n          )}\n        </div>\n\n        {/* Video Player */}\n        {videoURL && (\n          <div className=\"video-section\">\n            {/* API Key Input */}\n            <div className=\"api-config\">\n              <h3>ü§ñ Gemini AI-Powered Analysis</h3>\n              <div className=\"api-input-group\">\n                <input\n                  type=\"password\"\n                  placeholder=\"Enter your Google Gemini API key...\"\n                  value={apiKey}\n                  onChange={(e) => setApiKey(e.target.value)}\n                  className=\"api-input\"\n                />\n                <small className=\"api-help\">\n                  Get your API key from <a href=\"https://aistudio.google.com/app/apikey\" target=\"_blank\" rel=\"noopener noreferrer\">Google AI Studio</a>\n                  <br />\n                  <strong>Features:</strong> Vision AI Analysis + Video Analysis + Q&A Chat\n                </small>\n              </div>\n            </div>\n\n            {/* Backend Integration Toggle */}\n            <div className=\"backend-config\">\n              <h3>üöÄ Backend Analysis</h3>\n              <div className=\"backend-toggle\">\n                <label className=\"toggle-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={isUsingBackend}\n                    onChange={(e) => setIsUsingBackend(e.target.checked)}\n                  />\n                  Use backend API for full lecture analysis\n                </label>\n                <small className=\"backend-help\">\n                  Enable this to upload videos to the backend for comprehensive analysis including board change detection and Q&A capabilities\n                </small>\n              </div>\n              \n              {/* Upload/Processing Status */}\n              {uploadProgress && (\n                <div className=\"status-message upload-status\">\n                  {uploadProgress}\n                </div>\n              )}\n              \n              {processingStatus && (\n                <div className=\"status-message processing-status\">\n                  {processingStatus}\n                </div>\n              )}\n              \n              {/* Query Interface */}\n              {lectureId && (\n                <div className=\"query-section\">\n                  <h4>üîç Ask Questions About This Lecture</h4>\n                  <div className=\"query-input-group\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Ask a question about the lecture content...\"\n                      value={queryText}\n                      onChange={(e) => setQueryText(e.target.value)}\n                      className=\"query-input\"\n                      onKeyPress={(e) => e.key === 'Enter' && handleBackendQuery()}\n                    />\n                    <button\n                      onClick={handleBackendQuery}\n                      disabled={isQuerying || !queryText.trim()}\n                      className=\"query-button\"\n                    >\n                      {isQuerying ? 'Analyzing...' : 'Ask Question'}\n                    </button>\n                  </div>\n                  \n                  {queryResult && (\n                    <div className=\"query-result\">\n                      <h5>üìã Analysis Result:</h5>\n                      <pre className=\"result-text\">{queryResult}</pre>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"video-container\">\n              <video\n                ref={videoRef}\n                src={videoURL}\n                controls\n                className=\"video-player\"\n              >\n                Your browser does not support the video tag.\n              </video>\n              <canvas ref={canvasRef} style={{ display: 'none' }} />\n            </div>\n\n            {/* Controls */}\n            <div className=\"controls\">\n              <button onClick={takeScreenshot} className=\"btn primary\">\n                üì∏ Screenshot\n              </button>\n              <button \n                onClick={analyzeCurrentScene} \n                disabled={isDetecting || !apiKey}\n                className=\"btn ai-vision primary-action\"\n              >\n                {isDetecting ? 'üîÑ Analyzing with AI...' : 'üîç Analyze Full Scene with AI'}\n              </button>\n              <button \n                onClick={analyzeEntireVideo} \n                disabled={isAnalyzingVideo || !apiKey || !videoRef.current}\n                className=\"btn ai-video comprehensive-analysis\"\n              >\n                {isAnalyzingVideo ? 'üé¨ Analyzing Video...' : 'üéØ Comprehensive Video Analysis'}\n              </button>\n              <button \n                onClick={initializeOCR} \n                disabled={isDetecting}\n                className=\"btn info\"\n              >\n                üîß Initialize OCR\n              </button>\n              <button \n                onClick={detectAndCapture} \n                disabled={isDetecting}\n                className=\"btn highlight\"\n              >\n                {isDetecting ? '‚ö° Processing...' : '‚ö° Detect & Capture'}\n              </button>\n              {screenshots.length > 0 && (\n                <button onClick={clearScreenshots} className=\"btn danger\">\n                  üóëÔ∏è Clear All ({screenshots.length})\n                </button>\n              )}\n              <button \n                onClick={() => {\n                  alert(`API Status:\\n- API Key: ${apiKey ? 'Present' : 'Missing'}\\n- Connection: Testing...\\n\\nCheck console for details.`);\n                  console.log('API Key Check:', { \n                    hasKey: !!apiKey, \n                    keyLength: apiKey?.length,\n                    keyStart: apiKey?.substring(0, 15) + '...',\n                    timestamp: new Date().toISOString()\n                  });\n                }}\n                className=\"btn info\"\n                title=\"Test API connection and debug\"\n              >\n                üîß Test API\n              </button>\n            </div>\n\n            {/* Before/After Capture Section */}\n            <div className=\"capture-section\">\n              <h3>üìã Before/After Whiteboard Capture</h3>\n              <div className=\"capture-status\">\n                {captureMode === 'waiting' && (\n                  <p>üéØ Ready to capture whiteboard states. Start by capturing the BEFORE state.</p>\n                )}\n                {captureMode === 'before-captured' && (\n                  <p>‚úÖ Before state captured! Make your changes to the whiteboard, then capture the AFTER state.</p>\n                )}\n                {captureMode === 'ready-for-after' && (\n                  <p>üéä Both states captured! Scroll down to view the comparison analysis.</p>\n                )}\n              </div>\n              \n              <div className=\"capture-buttons\">\n                <button \n                  onClick={captureBeforeState}\n                  disabled={isDetecting}\n                  className=\"btn secondary\"\n                  title=\"Capture the current state before making changes\"\n                >\n                  üì∏ Capture BEFORE\n                </button>\n                <button \n                  onClick={captureAfterState}\n                  disabled={isDetecting || !beforeCapture}\n                  className=\"btn secondary\"\n                  title=\"Capture the state after making changes\"\n                >\n                  üì∏ Capture AFTER\n                </button>\n                <button \n                  onClick={resetCaptures}\n                  disabled={!beforeCapture && !afterCapture}\n                  className=\"btn danger\"\n                  title=\"Reset and start over with new captures\"\n                >\n                  üîÑ Reset Captures\n                </button>\n              </div>\n            </div>\n\n            {/* Detected Text Display */}\n            <div className=\"text-detection\">\n              <h3>üîç Detected Text:</h3>\n              <div className=\"detected-text-box\">\n                {detectedText || 'Click \"Detect Text\" to analyze the current frame'}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Screenshots Gallery */}\n        {/* AI Vision Analysis Panel */}\n        {showAnalysisPanel && aiAnalysisResult && (\n          <div className=\"ai-analysis-panel\">\n            <div className=\"panel-header\">\n              <h3>üõ∏ AI Vision Analysis Results</h3>\n              <button \n                onClick={() => setShowAnalysisPanel(false)}\n                className=\"close-panel-btn\"\n              >\n                ‚úï\n              </button>\n            </div>\n            <div className=\"analysis-content\">\n              <div className=\"analysis-section\">\n                <h4>üìä Scene Analysis</h4>\n                <pre className=\"analysis-text\">{aiAnalysisResult}</pre>\n              </div>\n              \n              {/* AI Agent Q&A Interface */}\n              <div className=\"qa-section\">\n                <h4>ü§ñ Ask Questions About This Content</h4>\n                <div className=\"qa-input-group\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Ask a question about what you see in the image...\"\n                    value={userQuestion}\n                    onChange={(e) => setUserQuestion(e.target.value)}\n                    className=\"qa-input\"\n                    onKeyPress={(e) => e.key === 'Enter' && askQuestionAboutContent()}\n                    disabled={isUsingChatGPT}\n                  />\n                  <button\n                    onClick={askQuestionAboutContent}\n                    disabled={isUsingChatGPT || !userQuestion.trim()}\n                    className=\"qa-button\"\n                  >\n                    {isUsingChatGPT ? 'ü§î Thinking...' : 'üí¨ Ask'}\n                  </button>\n                </div>\n                \n                {/* Conversation History */}\n                {conversationHistory.length > 0 && (\n                  <div className=\"conversation-history\">\n                    <h5>üí≠ Conversation</h5>\n                    <div className=\"conversation-messages\">\n                      {conversationHistory.map((message, index) => (\n                        <div \n                          key={index} \n                          className={`message ${message.role === 'user' ? 'user-message' : 'ai-message'}`}\n                        >\n                          <div className=\"message-role\">\n                            {message.role === 'user' ? 'üë§ You:' : 'ü§ñ AI:'}\n                          </div>\n                          <div className=\"message-content\">{message.content}</div>\n                        </div>\n                      ))}\n                    </div>\n                    <button \n                      onClick={() => setConversationHistory([])}\n                      className=\"clear-conversation-btn\"\n                    >\n                      üóëÔ∏è Clear Conversation\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Comprehensive Video Analysis Panel */}\n        {showVideoAnalysis && videoAnalysisResult && (\n          <div className=\"video-analysis-panel\">\n            <div className=\"panel-header\">\n              <h3>üé¨ Comprehensive Video Analysis</h3>\n              <button \n                onClick={() => setShowVideoAnalysis(false)}\n                className=\"close-panel-btn\"\n              >\n                ‚úï\n              </button>\n            </div>\n            <div className=\"analysis-content\">\n              <div className=\"analysis-section\">\n                <h4>üìä Complete Video Analysis</h4>\n                <pre className=\"video-analysis-text\">{videoAnalysisResult}</pre>\n              </div>\n              \n              {/* Sampled Frames Display */}\n              {videoFramesSampled.length > 0 && (\n                <div className=\"sampled-frames-section\">\n                  <h4>üì∏ Analyzed Video Frames ({videoFramesSampled.length} samples)</h4>\n                  <div className=\"frames-grid\">\n                    {videoFramesSampled.map((frame, index) => (\n                      <div key={index} className=\"frame-sample\">\n                        <img src={frame.image} alt={`Frame ${frame.frameNumber}`} />\n                        <div className=\"frame-info\">\n                          <span>Frame {frame.frameNumber}</span>\n                          <span>{frame.timestamp.toFixed(1)}s</span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Screenshots Gallery */}\n        {screenshots.length > 0 && (\n          <div className=\"gallery-section\">\n            <h3>üì± Screenshots ({screenshots.length})</h3>\n            <div className=\"gallery\">\n              {screenshots.map((screenshot) => (\n                <div key={screenshot.id} className=\"screenshot-item\">\n                  <img \n                    src={screenshot.url} \n                    alt={`Screenshot at ${screenshot.timestamp.toFixed(1)}s`}\n                    className=\"screenshot-image\"\n                  />\n                  <div className=\"screenshot-info\">\n                    <p><strong>‚è±Ô∏è Time:</strong> {screenshot.timestamp.toFixed(1)}s</p>\n                    <p><strong>üìù Text:</strong> {screenshot.detectedText}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}