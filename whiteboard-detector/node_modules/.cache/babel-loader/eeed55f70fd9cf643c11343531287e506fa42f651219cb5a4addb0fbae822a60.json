{"ast":null,"code":"var _jsxFileName = \"/Users/kyleprice/south_florida_hackstreet/whiteboard-detector/src/App.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState, useEffect, useCallback } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\nimport jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\nimport { Hands } from '@mediapipe/hands';\nimport { Camera } from '@mediapipe/camera_utils';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [videoFile, setVideoFile] = useState(null);\n  const [videoURL, setVideoURL] = useState(null);\n  const [screenshots, setScreenshots] = useState([]);\n  const [isDetecting, setIsDetecting] = useState(false);\n  const [detectedText, setDetectedText] = useState('');\n  const [ocrWorker, setOcrWorker] = useState(null);\n  const [apiKey, setApiKey] = useState(process.env.REACT_APP_GEMINI_API_KEY || '');\n  const [isUsingChatGPT, setIsUsingChatGPT] = useState(false);\n  const [chatGPTResult, setChatGPTResult] = useState('');\n\n  // AI Vision Analysis Results\n  const [aiAnalysisResult, setAiAnalysisResult] = useState('');\n  const [showAnalysisPanel, setShowAnalysisPanel] = useState(false);\n\n  // Rate limiting and conversation state\n  const [lastApiCall, setLastApiCall] = useState(0);\n  const [rateLimitCooldown, setRateLimitCooldown] = useState(0);\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const [userQuestion, setUserQuestion] = useState('');\n  const [apiKeyStatus, setApiKeyStatus] = useState('unchecked'); // unchecked, valid, invalid\n\n  // Before/After Whiteboard Capture System\n  const [beforeCapture, setBeforeCapture] = useState(null);\n  const [afterCapture, setAfterCapture] = useState(null);\n  const [captureMode, setCaptureMode] = useState('waiting'); // waiting, before-captured, ready-for-after\n  const [comparisonResult, setComparisonResult] = useState('');\n  const [showComparison, setShowComparison] = useState(false);\n\n  // Video Analysis System\n  const [videoAnalysisResult, setVideoAnalysisResult] = useState('');\n  const [isAnalyzingVideo, setIsAnalyzingVideo] = useState(false);\n  const [showVideoAnalysis, setShowVideoAnalysis] = useState(false);\n  const [videoFramesSampled, setVideoFramesSampled] = useState([]);\n\n  // Continuous Whiteboard Monitoring System\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const [currentBoardState, setCurrentBoardState] = useState(null);\n  const [boardHistory, setBoardHistory] = useState([]);\n  const [lastChangeDetected, setLastChangeDetected] = useState(null);\n  const [monitoringInterval, setMonitoringInterval] = useState(null);\n  const [changeThreshold, setChangeThreshold] = useState(0.15); // 15% change threshold\n  const [monitoringFrequency, setMonitoringFrequency] = useState(5000); // Check every 5 seconds\n  const [showMonitoringPanel, setShowMonitoringPanel] = useState(false);\n\n  // Summary and Q&A States for Whiteboard Content\n  const [boardSummary, setBoardSummary] = useState('');\n  const [isGeneratingSummary, setIsGeneratingSummary] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState('');\n  const [questionResponse, setQuestionResponse] = useState('');\n  const [isAnswering, setIsAnswering] = useState(false);\n\n  // Live Interactive Whiteboard System\n  const [isLiveMode, setIsLiveMode] = useState(false);\n  const [cameraStream, setCameraStream] = useState(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isErasing, setIsErasing] = useState(false);\n  const [drawingPath, setDrawingPath] = useState([]);\n  const [allPaths, setAllPaths] = useState([]);\n  const [voiceRecognition, setVoiceRecognition] = useState(null);\n  const [isListening, setIsListening] = useState(false);\n  const [lastVoiceCommand, setLastVoiceCommand] = useState('');\n  const [liveAIResponse, setLiveAIResponse] = useState('');\n  const [hands, setHands] = useState(null);\n  const [camera, setCamera] = useState(null);\n\n  // Refs for live whiteboard\n  const liveVideoRef = useRef(null);\n  const liveCanvasRef = useRef(null);\n  const drawingCanvasRef = useRef(null);\n  const handsRef = useRef(null);\n\n  // Handle video stream playback\n  useEffect(() => {\n    if (cameraStream && liveVideoRef.current) {\n      liveVideoRef.current.srcObject = cameraStream;\n      liveVideoRef.current.play().catch(console.error);\n    }\n  }, [cameraStream]);\n\n  // Test Gemini API key validity\n  const testApiKey = async () => {\n    if (!apiKey) {\n      setApiKeyStatus('invalid');\n      return;\n    }\n    try {\n      // Test Gemini API key with a simple request\n      const genAI = new GoogleGenerativeAI(apiKey);\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n\n      // Simple test request\n      const result = await model.generateContent(\"Test\");\n      const response = await result.response;\n      if (response.text()) {\n        setApiKeyStatus('valid');\n        console.log('✅ Gemini API key is valid');\n      } else {\n        setApiKeyStatus('invalid');\n        console.log('❌ Gemini API key is invalid');\n      }\n    } catch (error) {\n      setApiKeyStatus('invalid');\n      console.log('❌ Gemini API key test failed:', error);\n    }\n  }; // Backend integration state\n  const [isUsingBackend, setIsUsingBackend] = useState(false);\n  const [lectureId, setLectureId] = useState('');\n  const [uploadProgress, setUploadProgress] = useState('');\n  const [processingStatus, setProcessingStatus] = useState('');\n  const [queryText, setQueryText] = useState('');\n  const [queryResult, setQueryResult] = useState('');\n  const [isQuerying, setIsQuerying] = useState(false);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Initialize OCR worker with handwriting optimizations\n  const initializeOCR = async () => {\n    if (ocrWorker) return ocrWorker;\n    try {\n      console.log('Starting OCR initialization...');\n      const worker = await Tesseract.createWorker('eng', 1, {\n        logger: m => console.log('OCR Logger:', m)\n      });\n\n      // Configure for better handwriting recognition\n      await worker.setParameters({\n        tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?()[]{}=-+*/\\'\"@#$%^&_|\\\\~ ',\n        tessedit_pageseg_mode: '6',\n        // Uniform block of text\n        preserve_interword_spaces: '1',\n        tessedit_do_invert: '0'\n      });\n      console.log('OCR worker created successfully');\n      setOcrWorker(worker);\n      return worker;\n    } catch (error) {\n      console.error('OCR initialization failed:', error);\n      setDetectedText('OCR initialization failed: ' + error.message);\n      return null;\n    }\n  };\n\n  // Before/After Whiteboard Capture Functions\n  const captureBeforeState = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n    if (video.videoWidth === 0 || video.videoHeight === 0) {\n      alert('Video not loaded properly');\n      return;\n    }\n\n    // Capture the current frame\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataURL = canvas.toDataURL('image/png');\n    setBeforeCapture({\n      image: dataURL,\n      timestamp: new Date().toLocaleString(),\n      frameTime: video.currentTime\n    });\n    setCaptureMode('before-captured');\n    setDetectedText('📸 Before state captured! Make your edits to the whiteboard, then capture the after state.');\n  };\n  const captureAfterState = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n    if (!beforeCapture) {\n      alert('Please capture the before state first.');\n      return;\n    }\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n\n    // Capture the current frame\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataURL = canvas.toDataURL('image/png');\n    setAfterCapture({\n      image: dataURL,\n      timestamp: new Date().toLocaleString(),\n      frameTime: video.currentTime\n    });\n    setCaptureMode('ready-for-after');\n    setShowComparison(true);\n    setDetectedText('📸 After state captured! Scroll down to see before/after comparison.');\n\n    // Auto-generate comparison analysis\n    await analyzeChanges();\n  };\n  const analyzeChanges = async () => {\n    if (!beforeCapture || !afterCapture) return;\n    setComparisonResult('🔍 Analyzing changes between before and after states...');\n    try {\n      // For now, provide a basic comparison message\n      // In the future, this could use AI to detect actual differences\n      const timeDiff = afterCapture.frameTime - beforeCapture.frameTime;\n      const timeFormatted = Math.abs(timeDiff).toFixed(1);\n      const basicAnalysis = `📊 **Before/After Analysis Complete**\n\n⏱️ **Time Difference**: ${timeFormatted} seconds between captures\n📅 **Before**: ${beforeCapture.timestamp}\n📅 **After**: ${afterCapture.timestamp}\n\n🔍 **Visual Comparison**: \n- Both states have been captured for manual comparison\n- Review the images below to identify changes\n- Look for added text, erased content, or modified diagrams\n\n💡 **Tip**: Use the AI analysis feature on each image individually to get detailed descriptions of what changed.`;\n      setComparisonResult(basicAnalysis);\n    } catch (error) {\n      setComparisonResult(`❌ Error analyzing changes: ${error.message}`);\n    }\n  };\n  const resetCaptures = () => {\n    setBeforeCapture(null);\n    setAfterCapture(null);\n    setCaptureMode('waiting');\n    setComparisonResult('');\n    setShowComparison(false);\n    setDetectedText('🔄 Capture system reset. Ready to capture new before/after states.');\n  };\n\n  // Comprehensive Video Analysis Function with Gemini\n  const analyzeEntireVideo = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (video.duration === 0 || isNaN(video.duration)) {\n      alert('Video not fully loaded. Please wait for the video to load completely.');\n      return;\n    }\n\n    // Check for Gemini API key\n    const geminiApiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!geminiApiKey) {\n      alert('Gemini API key not configured. Please check your environment variables.');\n      return;\n    }\n    setIsAnalyzingVideo(true);\n    setShowVideoAnalysis(true);\n    setVideoFramesSampled([]);\n    const initialMessage = `🤖 **Starting Comprehensive Video Analysis with Gemini**\n\n📹 **Video Details:**\n- Duration: ${Math.round(video.duration)} seconds\n- Dimensions: ${video.videoWidth}x${video.videoHeight}\n\n🔍 **Analysis Process:**\n1. Sampling key frames throughout the video\n2. Processing images with Gemini Vision AI\n3. Identifying patterns and changes over time\n4. Generating comprehensive summary and insights\n\n⚡ **Processing Status:** Sampling frames...`;\n    setVideoAnalysisResult(initialMessage);\n    try {\n      // Sample frames at strategic intervals throughout the video\n      const framesToSample = Math.min(8, Math.max(3, Math.floor(video.duration / 10))); // 3-8 frames depending on video length\n      const frameInterval = video.duration / framesToSample;\n      const sampledFrames = [];\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n\n      // Sample frames at different timestamps\n      for (let i = 0; i < framesToSample; i++) {\n        const timestamp = i * frameInterval;\n\n        // Seek to timestamp and capture frame\n        await new Promise(resolve => {\n          const seekHandler = () => {\n            video.removeEventListener('seeked', seekHandler);\n\n            // Capture the frame\n            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n            const dataURL = canvas.toDataURL('image/jpeg', 0.8);\n            sampledFrames.push({\n              timestamp: timestamp,\n              image: dataURL,\n              frameNumber: i + 1\n            });\n            resolve();\n          };\n          video.addEventListener('seeked', seekHandler);\n          video.currentTime = timestamp;\n        });\n\n        // Update progress\n        setVideoAnalysisResult(prev => prev + `\\n📸 Frame ${i + 1}/${framesToSample} captured at ${timestamp.toFixed(1)}s`);\n      }\n      setVideoFramesSampled(sampledFrames);\n\n      // Update status\n      setVideoAnalysisResult(prev => prev + '\\n\\n🚀 Sending frames to Gemini Vision AI for analysis...');\n\n      // Initialize Gemini\n      const genAI = new GoogleGenerativeAI(geminiApiKey);\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n\n      // Create comprehensive analysis prompt\n      const analysisPrompt = `Please provide a comprehensive analysis of this video based on the ${sampledFrames.length} key frames I've sampled throughout its ${Math.round(video.duration)}-second duration.\n\n🎯 **COMPREHENSIVE VIDEO ANALYSIS REQUEST:**\n\n📊 **OVERALL SUMMARY:**\n- What is the main purpose/topic of this video?\n- What type of content is being presented? (lecture, tutorial, meeting, etc.)\n- Who is the target audience?\n\n🔍 **DETAILED CONTENT ANALYSIS:**\n- What are the key concepts, topics, or subjects discussed?\n- Are there any educational elements, teaching materials, or learning objectives?\n- What visual aids are used? (whiteboards, slides, demonstrations, etc.)\n\n📝 **TEXT AND WRITING ANALYSIS:**\n- Extract and transcribe ALL visible text throughout the video\n- Identify any equations, formulas, diagrams, or technical content\n- Note any handwritten vs. printed text\n- Track how text content changes over time\n\n👥 **PEOPLE AND ACTIVITIES:**\n- How many people are visible and what are their roles?\n- What activities are taking place? (teaching, presenting, discussing, etc.)\n- How do people interact with materials or each other?\n- What gestures, movements, or behaviors are significant?\n\n🎓 **EDUCATIONAL VALUE:**\n- What skills or knowledge does this video teach?\n- What are the main learning outcomes?\n- How is information structured and presented?\n- What teaching methods or techniques are used?\n\n⏱️ **TEMPORAL ANALYSIS:**\n- How does the content progress over time?\n- Are there distinct sections or phases in the video?\n- What changes occur between the beginning and end?\n- Identify any pivotal moments or transitions\n\n🏛️ **ENVIRONMENT & CONTEXT:**\n- Describe the setting/location (classroom, office, lab, etc.)\n- What equipment, tools, or materials are present?\n- How does the environment support the content?\n\n💡 **KEY INSIGHTS & TAKEAWAYS:**\n- What are the most important points or messages?\n- What would someone learn from watching this video?\n- How could this content be applied or used?\n\n📋 **STRUCTURED SUMMARY:**\nProvide a clear, organized summary that someone could use to understand the video's content without watching it.\n\nPlease be thorough and detailed - I want to understand everything that happens in this video and its educational/informational value.`;\n\n      // Convert image data URLs to parts for Gemini\n      const imageParts = [];\n      for (const frame of sampledFrames) {\n        // Convert data URL to base64\n        const base64Data = frame.image.split(',')[1];\n        imageParts.push({\n          inlineData: {\n            data: base64Data,\n            mimeType: \"image/jpeg\"\n          }\n        });\n      }\n\n      // Send to Gemini\n      const result = await model.generateContent([analysisPrompt, ...imageParts]);\n      const response = await result.response;\n      const analysis = response.text();\n      const finalMessage = `✅ **Comprehensive Video Analysis Complete!**\n\n🎯 **Analysis Summary:**\n- Analyzed ${sampledFrames.length} key frames from ${Math.round(video.duration)}-second video\n- Processed with Gemini Vision AI\n- Comprehensive content analysis complete\n\n� **Detailed Analysis Results:**\n\n${analysis}\n\n---\n*Analysis completed by Google Gemini Vision AI*\n*${sampledFrames.length} frames analyzed from ${Math.round(video.duration)}-second video*`;\n      setVideoAnalysisResult(finalMessage);\n      setDetectedText(`🤖 Comprehensive video analysis complete! View detailed results in the Video Analysis panel.`);\n    } catch (error) {\n      console.error('Video analysis error:', error);\n      const errorMsg = `❌ **Video Analysis Error**\n\n**Error**: ${error.message}\n\n**Troubleshooting:**\n• Ensure video is fully loaded\n• Check internet connection\n• Verify Gemini API key is correct\n• Try analyzing a shorter video segment\n\n**Alternative**: Use the single frame analysis for specific moments in the video.`;\n      setVideoAnalysisResult(errorMsg);\n    } finally {\n      setIsAnalyzingVideo(false);\n    }\n  };\n\n  // Handle video file upload\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (file && file.type.startsWith('video/')) {\n      setVideoFile(file);\n      const url = URL.createObjectURL(file);\n      setVideoURL(url);\n      setScreenshots([]);\n      setDetectedText('');\n      setOcrWorker(null); // Reset worker for new video\n      setLectureId('');\n      setProcessingStatus('');\n      setQueryResult('');\n\n      // If using backend, upload and process the video\n      if (isUsingBackend) {\n        try {\n          setUploadProgress('Uploading video to backend...');\n          const uploadResult = await uploadVideoToBackend(file);\n          console.log('Upload result:', uploadResult);\n          setUploadProgress('Upload complete! Processing video...');\n          const processResult = await processVideoWithBackend(uploadResult.video.path, file.name);\n          console.log('Process result:', processResult);\n          setLectureId(processResult.lectureId);\n          setProcessingStatus(`Processing started. Lecture ID: ${processResult.lectureId}`);\n          setUploadProgress('');\n        } catch (error) {\n          console.error('Backend upload/processing failed:', error);\n          setUploadProgress(`Error: ${error.message}`);\n        }\n      } else {\n        // Initialize OCR for local processing\n        setTimeout(() => {\n          initializeOCR();\n        }, 1000);\n      }\n    } else {\n      alert('Please select a valid video file');\n    }\n  };\n\n  // Continuous Whiteboard Monitoring System\n\n  // Compare two images to detect changes\n  const compareImages = (img1DataURL, img2DataURL) => {\n    return new Promise(resolve => {\n      const canvas1 = document.createElement('canvas');\n      const canvas2 = document.createElement('canvas');\n      const ctx1 = canvas1.getContext('2d');\n      const ctx2 = canvas2.getContext('2d');\n      const image1 = new Image();\n      const image2 = new Image();\n      let loadedImages = 0;\n      const processComparison = () => {\n        loadedImages++;\n        if (loadedImages === 2) {\n          // Set canvas dimensions\n          const width = Math.min(image1.width, image2.width, 640);\n          const height = Math.min(image1.height, image2.height, 480);\n          canvas1.width = canvas2.width = width;\n          canvas1.height = canvas2.height = height;\n\n          // Draw images\n          ctx1.drawImage(image1, 0, 0, width, height);\n          ctx2.drawImage(image2, 0, 0, width, height);\n\n          // Get image data\n          const data1 = ctx1.getImageData(0, 0, width, height);\n          const data2 = ctx2.getImageData(0, 0, width, height);\n\n          // Calculate difference\n          let differentPixels = 0;\n          const totalPixels = width * height;\n          for (let i = 0; i < data1.data.length; i += 4) {\n            const r1 = data1.data[i];\n            const g1 = data1.data[i + 1];\n            const b1 = data1.data[i + 2];\n            const r2 = data2.data[i];\n            const g2 = data2.data[i + 1];\n            const b2 = data2.data[i + 2];\n\n            // Calculate color difference (simple threshold)\n            const diff = Math.abs(r1 - r2) + Math.abs(g1 - g2) + Math.abs(b1 - b2);\n            if (diff > 30) {\n              // Threshold for considering a pixel \"different\"\n              differentPixels++;\n            }\n          }\n          const changePercentage = differentPixels / totalPixels * 100;\n          resolve(changePercentage);\n        }\n      };\n      image1.onload = processComparison;\n      image2.onload = processComparison;\n      image1.src = img1DataURL;\n      image2.src = img2DataURL;\n    });\n  };\n\n  // Capture current whiteboard state\n  const captureCurrentBoardState = () => {\n    if (!videoRef.current || !canvasRef.current) return null;\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    return canvas.toDataURL('image/jpeg', 0.8);\n  };\n\n  // Start continuous monitoring\n  const startMonitoring = () => {\n    if (isMonitoring) return;\n    setIsMonitoring(true);\n    setShowMonitoringPanel(true);\n\n    // Capture initial state\n    const initialState = captureCurrentBoardState();\n    if (initialState) {\n      setCurrentBoardState(initialState);\n      const timestamp = new Date();\n      setBoardHistory([{\n        id: Date.now(),\n        image: initialState,\n        timestamp: timestamp,\n        description: \"Initial whiteboard state\",\n        changes: \"Monitoring started\"\n      }]);\n    }\n\n    // Set up monitoring interval\n    const interval = setInterval(async () => {\n      const newState = captureCurrentBoardState();\n      if (!newState || !currentBoardState) return;\n      try {\n        const changePercentage = await compareImages(currentBoardState, newState);\n        if (changePercentage > changeThreshold) {\n          // Significant change detected!\n          const timestamp = new Date();\n\n          // Analyze the change with Gemini\n          const geminiApiKey = process.env.REACT_APP_GEMINI_API_KEY;\n          if (geminiApiKey) {\n            try {\n              const genAI = new GoogleGenerativeAI(geminiApiKey);\n              const model = genAI.getGenerativeModel({\n                model: \"gemini-1.5-flash\"\n              });\n              const base64Data = newState.split(',')[1];\n              const imagePart = {\n                inlineData: {\n                  data: base64Data,\n                  mimeType: \"image/jpeg\"\n                }\n              };\n              const prompt = `Please briefly describe what's visible on this whiteboard/board. Focus on:\n- Any text or writing\n- Diagrams, equations, or drawings\n- Key concepts being taught\n- Overall topic or subject\nKeep it concise but informative for students reviewing the content.`;\n              const result = await model.generateContent([prompt, imagePart]);\n              const response = await result.response;\n              const description = response.text();\n\n              // Add to history with AI description\n              const newHistoryItem = {\n                id: Date.now(),\n                image: newState,\n                timestamp: timestamp,\n                description: description,\n                changes: `${changePercentage.toFixed(1)}% change detected`\n              };\n              setBoardHistory(prev => [...prev, newHistoryItem]);\n              setCurrentBoardState(newState);\n              setLastChangeDetected(timestamp);\n            } catch (error) {\n              console.error('Gemini analysis failed:', error);\n              // Fallback without AI description\n              const newHistoryItem = {\n                id: Date.now(),\n                image: newState,\n                timestamp: timestamp,\n                description: \"Whiteboard content updated\",\n                changes: `${changePercentage.toFixed(1)}% change detected`\n              };\n              setBoardHistory(prev => [...prev, newHistoryItem]);\n              setCurrentBoardState(newState);\n              setLastChangeDetected(timestamp);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Image comparison failed:', error);\n      }\n    }, monitoringFrequency);\n    setMonitoringInterval(interval);\n    setDetectedText(`📊 Whiteboard monitoring started! Checking for changes every ${monitoringFrequency / 1000} seconds.`);\n  };\n\n  // Stop monitoring\n  const stopMonitoring = () => {\n    if (monitoringInterval) {\n      clearInterval(monitoringInterval);\n      setMonitoringInterval(null);\n    }\n    setIsMonitoring(false);\n    setDetectedText('📊 Whiteboard monitoring stopped.');\n  };\n\n  // Clear monitoring history\n  const clearBoardHistory = () => {\n    setBoardHistory([]);\n    setDetectedText('📊 Whiteboard history cleared.');\n  };\n\n  // Generate summary of all captured whiteboard content\n  const generateBoardSummary = async () => {\n    if (boardHistory.length === 0) {\n      alert('📝 No whiteboard content captured yet. Start monitoring to capture board changes first!');\n      return;\n    }\n    setIsGeneratingSummary(true);\n    setBoardSummary('');\n    try {\n      const genAI = new GoogleGenerativeAI(apiKey);\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n\n      // Create a comprehensive content string from all captures\n      const allContent = boardHistory.map((item, index) => `**Capture ${index + 1}** (${item.timestamp.toLocaleString()}):\\n${item.description}`).join('\\n\\n');\n      const prompt = `Please provide a comprehensive analysis of this classroom whiteboard session based on the ${boardHistory.length} captures I've taken throughout the class.\n\n🎯 **COMPREHENSIVE WHITEBOARD SESSION ANALYSIS:**\n\n📊 **OVERALL SESSION SUMMARY:**\n- What is the main subject/topic being taught in this class?\n- What type of lesson is this? (lecture, problem-solving, review, etc.)\n- What grade level or course does this appear to be for?\n\n🔍 **DETAILED CONTENT ANALYSIS:**\n- What are the key concepts, topics, or subjects covered?\n- What educational elements and learning objectives are present?\n- What types of visual aids are used? (diagrams, formulas, examples, etc.)\n\n📝 **TEXT AND MATHEMATICAL CONTENT:**\n- Extract and organize ALL formulas, equations, and mathematical expressions\n- Identify any diagrams, charts, graphs, or technical drawings\n- Note the progression of problem-solving or concept development\n- Track how content builds upon previous material\n\n🎓 **EDUCATIONAL STRUCTURE:**\n- What skills or knowledge does this lesson teach?\n- What are the main learning outcomes and objectives?\n- How is information structured and presented throughout the class?\n- What teaching methods or techniques are demonstrated?\n\n⏱️ **LESSON PROGRESSION:**\n- How does the content develop over the course of the class?\n- Are there distinct sections, topics, or phases in the lesson?\n- What changes occur from the beginning to end of class?\n- Identify any pivotal moments, key explanations, or important transitions\n\n🏛️ **CLASSROOM CONTEXT:**\n- What subject area is being taught? (Math, Science, History, etc.)\n- What level of complexity is the material?\n- How does the content relate to broader curriculum goals?\n\n💡 **KEY INSIGHTS & LEARNING POINTS:**\n- What are the most important concepts students should remember?\n- What would a student learn from this complete lesson?\n- Which topics require the most attention or practice?\n- What connections are made between different concepts?\n\n📋 **STUDENT-READY SUMMARY:**\nProvide a clear, organized study guide that students could use to review the entire lesson, including:\n- Main topics covered\n- Important formulas or key facts\n- Examples worked through\n- Concepts to remember for exams\n\n**Captured Whiteboard Content:**\n${allContent}\n\nPlease be thorough and educational - create a summary that helps students understand and review everything taught in this class session.`;\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const summary = response.text();\n      setBoardSummary(summary);\n      setDetectedText('📋 Whiteboard session summary generated successfully!');\n    } catch (error) {\n      console.error('Error generating summary:', error);\n      setDetectedText('❌ Error generating summary. Please try again.');\n    } finally {\n      setIsGeneratingSummary(false);\n    }\n  };\n\n  // Generate PDF study guide from whiteboard summary\n  const generatePDFStudyGuide = async () => {\n    if (!boardSummary) {\n      alert('📚 Please generate a summary first before creating a PDF study guide!');\n      return;\n    }\n    try {\n      setDetectedText('📄 Generating PDF study guide...');\n\n      // Create a temporary div for PDF content\n      const tempDiv = document.createElement('div');\n      tempDiv.style.position = 'absolute';\n      tempDiv.style.left = '-9999px';\n      tempDiv.style.width = '800px';\n      tempDiv.style.padding = '40px';\n      tempDiv.style.fontFamily = 'Arial, sans-serif';\n      tempDiv.style.fontSize = '14px';\n      tempDiv.style.lineHeight = '1.6';\n      tempDiv.style.color = '#333';\n      tempDiv.style.backgroundColor = '#ffffff';\n\n      // Get current date for the study guide\n      const currentDate = new Date().toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n\n      // Format the summary content for PDF\n      const formattedSummary = boardSummary.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>').replace(/🎯|📊|🔍|📝|🎓|⏱️|🏛️|💡|📋/g, '').split('\\n').map(line => {\n        if (line.trim().startsWith('-')) {\n          return `<div style=\"margin-left: 20px; margin-bottom: 5px;\">• ${line.trim().substring(1)}</div>`;\n        }\n        return `<div style=\"margin-bottom: 10px;\">${line}</div>`;\n      }).join('');\n      tempDiv.innerHTML = `\n        <div style=\"text-align: center; margin-bottom: 30px; padding-bottom: 20px; border-bottom: 2px solid #667eea;\">\n          <h1 style=\"color: #667eea; margin: 0; font-size: 28px;\">📚 Whiteboard Study Guide</h1>\n          <h2 style=\"color: #666; margin: 10px 0 0 0; font-size: 16px; font-weight: normal;\">Generated on ${currentDate}</h2>\n          <div style=\"color: #888; margin-top: 10px; font-size: 12px;\">\n            Based on ${boardHistory.length} whiteboard captures from classroom session\n          </div>\n        </div>\n\n        <div style=\"margin-bottom: 20px;\">\n          ${formattedSummary}\n        </div>\n\n        <div style=\"margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd;\">\n          <h3 style=\"color: #667eea; margin-bottom: 15px;\">📸 Captured Whiteboard Content Timeline:</h3>\n          ${boardHistory.map((item, index) => `\n            <div style=\"margin-bottom: 15px; padding: 10px; background-color: #f8f9fa; border-left: 4px solid #667eea; border-radius: 4px;\">\n              <div style=\"font-weight: bold; color: #667eea; margin-bottom: 5px;\">\n                Capture ${index + 1} - ${item.timestamp.toLocaleString()}\n              </div>\n              <div style=\"font-size: 12px; color: #666;\">\n                ${item.description}\n              </div>\n            </div>\n          `).join('')}\n        </div>\n\n        <div style=\"margin-top: 30px; text-align: center; font-size: 10px; color: #888; border-top: 1px solid #ddd; padding-top: 15px;\">\n          Generated by Whiteboard Monitoring System | AI-Powered Educational Analysis\n        </div>\n      `;\n      document.body.appendChild(tempDiv);\n\n      // Convert to canvas and then PDF\n      const canvas = await html2canvas(tempDiv, {\n        scale: 2,\n        useCORS: true,\n        backgroundColor: '#ffffff',\n        width: 800,\n        height: tempDiv.scrollHeight\n      });\n\n      // Remove temporary div\n      document.body.removeChild(tempDiv);\n\n      // Create PDF\n      const pdf = new jsPDF('p', 'mm', 'a4');\n      const imgData = canvas.toDataURL('image/png');\n      const pdfWidth = pdf.internal.pageSize.getWidth();\n      const pdfHeight = pdf.internal.pageSize.getHeight();\n      const imgWidth = canvas.width;\n      const imgHeight = canvas.height;\n      const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);\n      const imgX = (pdfWidth - imgWidth * ratio) / 2;\n      const imgY = 0;\n      pdf.addImage(imgData, 'PNG', imgX, imgY, imgWidth * ratio, imgHeight * ratio);\n\n      // Generate filename with current date and time\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);\n      const filename = `Whiteboard-Study-Guide-${timestamp}.pdf`;\n\n      // Save the PDF\n      pdf.save(filename);\n      setDetectedText(`📄 PDF study guide saved as: ${filename}`);\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      setDetectedText('❌ Error generating PDF. Please try again.');\n    }\n  };\n\n  // Ask questions about whiteboard content\n  const askQuestionAboutBoard = async () => {\n    if (!currentQuestion.trim()) {\n      alert('📝 Please enter a question first!');\n      return;\n    }\n    if (boardHistory.length === 0) {\n      alert('📝 No whiteboard content available. Start monitoring to capture board changes first!');\n      return;\n    }\n    setIsAnswering(true);\n    setQuestionResponse('');\n    try {\n      const genAI = new GoogleGenerativeAI(apiKey);\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n\n      // Create context from all captured content\n      const allContent = boardHistory.map((item, index) => `**Board State ${index + 1}** (${item.timestamp.toLocaleString()}):\\n${item.description}`).join('\\n\\n');\n      const prompt = `\n        🎓 **CLASSROOM WHITEBOARD Q&A ASSISTANT**\n        \n        You are helping a student understand content from a classroom whiteboard session. \n        The student has a question about what was written on the board during class.\n\n        **Complete Whiteboard Content from the Session:**\n        ${allContent}\n\n        **Student's Question:**\n        \"${currentQuestion}\"\n\n        **Please provide:**\n        - A clear, educational answer based on the whiteboard content\n        - Reference specific parts of the board content when relevant\n        - If the question can't be answered from the available content, explain what information would be needed\n        - Use a helpful, teaching tone appropriate for a student\n\n        Answer the question as if you're a helpful teaching assistant who has access to everything that was written on the board during class.\n      `;\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const answer = response.text();\n      setQuestionResponse(answer);\n      setDetectedText('💬 Question answered based on whiteboard content!');\n    } catch (error) {\n      console.error('Error answering question:', error);\n      setQuestionResponse('❌ Sorry, I encountered an error while processing your question. Please try again.');\n      setDetectedText('❌ Error processing question. Please try again.');\n    } finally {\n      setIsAnswering(false);\n    }\n  };\n\n  // ==================== LIVE INTERACTIVE WHITEBOARD SYSTEM ====================\n\n  // Initialize live camera and hand tracking\n  const initializeLiveMode = async () => {\n    try {\n      setDetectedText('🚀 Initializing live interactive whiteboard...');\n\n      // Get camera access\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: 1280,\n          height: 720,\n          facingMode: 'user'\n        }\n      });\n      setCameraStream(stream);\n      if (liveVideoRef.current) {\n        liveVideoRef.current.srcObject = stream;\n        // Ensure video starts playing\n        await liveVideoRef.current.play();\n      }\n\n      // Initialize MediaPipe Hands\n      const handsInstance = new Hands({\n        locateFile: file => `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`\n      });\n      handsInstance.setOptions({\n        maxNumHands: 2,\n        modelComplexity: 1,\n        minDetectionConfidence: 0.5,\n        minTrackingConfidence: 0.5\n      });\n      handsInstance.onResults(onHandsResults);\n      handsRef.current = handsInstance;\n\n      // Initialize camera utility\n      if (liveVideoRef.current) {\n        const cameraInstance = new Camera(liveVideoRef.current, {\n          onFrame: async () => {\n            if (handsRef.current && liveVideoRef.current) {\n              await handsRef.current.send({\n                image: liveVideoRef.current\n              });\n            }\n          },\n          width: 1280,\n          height: 720\n        });\n        cameraInstance.start();\n        setCamera(cameraInstance);\n      }\n\n      // Initialize voice recognition\n      initializeVoiceRecognition();\n      setIsLiveMode(true);\n      setDetectedText('✅ Live interactive whiteboard ready! Say \"EDITH\" + your question, or use hand gestures to draw.');\n    } catch (error) {\n      console.error('Error initializing live mode:', error);\n      setDetectedText('❌ Error accessing camera. Please allow camera permissions.');\n    }\n  };\n\n  // Handle hand tracking results\n  const onHandsResults = useCallback(results => {\n    if (!liveCanvasRef.current || !drawingCanvasRef.current) return;\n    const canvas = liveCanvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const drawingCanvas = drawingCanvasRef.current;\n    const drawingCtx = drawingCanvas.getContext('2d');\n\n    // Clear the overlay canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    if (results.multiHandLandmarks && results.multiHandLandmarks.length > 0) {\n      for (const landmarks of results.multiHandLandmarks) {\n        // Check for pinch gesture (thumb and index finger close)\n        const thumb = landmarks[4];\n        const indexFinger = landmarks[8];\n        const distance = Math.sqrt(Math.pow(thumb.x - indexFinger.x, 2) + Math.pow(thumb.y - indexFinger.y, 2));\n\n        // Check for open palm (all fingers extended)\n        const fingerTips = [8, 12, 16, 20]; // Index, middle, ring, pinky tips\n        const fingerBases = [6, 10, 14, 18]; // Finger bases\n        const fingersExtended = fingerTips.every((tip, index) => landmarks[tip].y < landmarks[fingerBases[index]].y);\n        if (distance < 0.05) {\n          // Pinch gesture - draw\n          setIsDrawing(true);\n          setIsErasing(false);\n\n          // Draw blue dot at pinch location\n          const x = indexFinger.x * canvas.width;\n          const y = indexFinger.y * canvas.height;\n          drawingCtx.fillStyle = '#4A90E2';\n          drawingCtx.beginPath();\n          drawingCtx.arc(x, y, 5, 0, 2 * Math.PI);\n          drawingCtx.fill();\n\n          // Add to drawing path\n          setDrawingPath(prev => [...prev, {\n            x,\n            y,\n            type: 'draw'\n          }]);\n        } else if (fingersExtended && landmarks[4].y < landmarks[3].y) {\n          // Open palm gesture - erase\n          setIsDrawing(false);\n          setIsErasing(true);\n\n          // Erase in area around palm\n          const palmX = landmarks[9].x * canvas.width;\n          const palmY = landmarks[9].y * canvas.height;\n          drawingCtx.globalCompositeOperation = 'destination-out';\n          drawingCtx.beginPath();\n          drawingCtx.arc(palmX, palmY, 30, 0, 2 * Math.PI);\n          drawingCtx.fill();\n          drawingCtx.globalCompositeOperation = 'source-over';\n        } else {\n          setIsDrawing(false);\n          setIsErasing(false);\n        }\n\n        // Draw hand landmarks for visual feedback\n        ctx.fillStyle = isDrawing ? '#4A90E2' : isErasing ? '#FF6B6B' : '#00FF00';\n        for (const landmark of landmarks) {\n          ctx.beginPath();\n          ctx.arc(landmark.x * canvas.width, landmark.y * canvas.height, 3, 0, 2 * Math.PI);\n          ctx.fill();\n        }\n      }\n    }\n  }, [isDrawing, isErasing]);\n\n  // Initialize voice recognition for \"EDITH\" commands\n  const initializeVoiceRecognition = () => {\n    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      recognition.continuous = true;\n      recognition.interimResults = true;\n      recognition.lang = 'en-US';\n      recognition.onstart = () => {\n        setIsListening(true);\n        console.log('🎤 Voice recognition started - listening for \"EDITH\"...');\n      };\n      recognition.onresult = async event => {\n        const transcript = Array.from(event.results).map(result => result[0].transcript).join('');\n        console.log('Heard:', transcript);\n\n        // Check if transcript contains \"EDITH\"\n        if (transcript.toLowerCase().includes('edith')) {\n          const command = transcript.toLowerCase().replace('edith', '').trim();\n          if (command) {\n            setLastVoiceCommand(command);\n            await processVoiceCommand(command);\n          }\n        }\n      };\n      recognition.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n      };\n      recognition.onend = () => {\n        setIsListening(false);\n        // Restart recognition to keep listening\n        if (isLiveMode) {\n          setTimeout(() => recognition.start(), 1000);\n        }\n      };\n      recognition.start();\n      setVoiceRecognition(recognition);\n    } else {\n      console.warn('Speech recognition not supported in this browser');\n      setDetectedText('⚠️ Voice recognition not supported in this browser');\n    }\n  };\n\n  // Process voice commands directed to EDITH\n  const processVoiceCommand = async command => {\n    try {\n      var _drawingCanvasRef$cur;\n      setDetectedText(`🎤 EDITH heard: \"${command}\"`);\n\n      // Capture current whiteboard state\n      const currentDrawing = (_drawingCanvasRef$cur = drawingCanvasRef.current) === null || _drawingCanvasRef$cur === void 0 ? void 0 : _drawingCanvasRef$cur.toDataURL('image/jpeg', 0.8);\n      const genAI = new GoogleGenerativeAI(apiKey);\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const prompt = `\n        🎓 **EDITH - Educational Digital Intelligence Teaching Helper**\n        \n        You are EDITH, an AI teaching assistant helping with live whiteboard work. \n        A student has asked you a question while working on their whiteboard.\n\n        **Student's Question/Command:** \"${command}\"\n\n        **Context:** This is a live interactive whiteboard session where the student is drawing and working on problems in real-time.\n\n        **Please provide:**\n        - A helpful, concise response (keep it brief for live interaction)\n        - Educational guidance if they're asking about math, science, or academic topics\n        - Encouragement and clear explanations\n        - If they're asking for help with a problem, guide them through the thinking process\n\n        **Tone:** Friendly, encouraging teacher who wants to help students learn and succeed.\n        \n        Respond as EDITH would - like a knowledgeable, patient teaching assistant.\n      `;\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const aiResponse = response.text();\n      setLiveAIResponse(aiResponse);\n      setDetectedText(`🤖 EDITH: ${aiResponse.substring(0, 100)}...`);\n\n      // Speak the response (optional)\n      if ('speechSynthesis' in window) {\n        const utterance = new SpeechSynthesisUtterance(aiResponse);\n        utterance.rate = 0.9;\n        utterance.pitch = 1.1;\n        window.speechSynthesis.speak(utterance);\n      }\n    } catch (error) {\n      console.error('Error processing voice command:', error);\n      setDetectedText('❌ EDITH encountered an error processing your request.');\n    }\n  };\n\n  // Stop live mode and cleanup\n  const stopLiveMode = () => {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(track => track.stop());\n      setCameraStream(null);\n    }\n    if (camera) {\n      camera.stop();\n      setCamera(null);\n    }\n    if (voiceRecognition) {\n      voiceRecognition.stop();\n      setVoiceRecognition(null);\n    }\n    setIsLiveMode(false);\n    setIsListening(false);\n    setDetectedText('📱 Live interactive whiteboard stopped.');\n  };\n\n  // Clear all drawings\n  const clearDrawings = () => {\n    if (drawingCanvasRef.current) {\n      const ctx = drawingCanvasRef.current.getContext('2d');\n      ctx.clearRect(0, 0, drawingCanvasRef.current.width, drawingCanvasRef.current.height);\n    }\n    setAllPaths([]);\n    setDrawingPath([]);\n  };\n\n  // Export board history for students\n  const exportBoardHistory = () => {\n    const historyData = boardHistory.map(item => ({\n      timestamp: item.timestamp.toISOString(),\n      description: item.description,\n      changes: item.changes\n      // Note: Images would need to be handled separately for full export\n    }));\n    const blob = new Blob([JSON.stringify(historyData, null, 2)], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `whiteboard-history-${new Date().toISOString().split('T')[0]}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  // Take a screenshot of current video frame\n  const takeScreenshot = async () => {\n    if (!videoRef.current || !canvasRef.current) return;\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Draw video frame to canvas\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Convert to blob and create screenshot object\n    canvas.toBlob(blob => {\n      const screenshot = {\n        id: Date.now(),\n        blob: blob,\n        url: URL.createObjectURL(blob),\n        timestamp: video.currentTime,\n        detectedText: detectedText || 'No text detected'\n      };\n      setScreenshots(prev => [...prev, screenshot]);\n    }, 'image/png');\n  };\n\n  // Image preprocessing for better OCR\n  const preprocessImage = (canvas, ctx) => {\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n\n    // Convert to grayscale and enhance contrast\n    for (let i = 0; i < data.length; i += 4) {\n      // Convert to grayscale\n      const gray = Math.round(0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]);\n\n      // Enhance contrast - make text darker and background lighter\n      let enhanced;\n      if (gray < 128) {\n        // Dark pixels (likely text) - make darker\n        enhanced = Math.max(0, gray - 30);\n      } else {\n        // Light pixels (likely background) - make lighter\n        enhanced = Math.min(255, gray + 30);\n      }\n\n      // Apply threshold for better text separation\n      const threshold = enhanced < 100 ? 0 : 255;\n      data[i] = threshold; // Red\n      data[i + 1] = threshold; // Green\n      data[i + 2] = threshold; // Blue\n      // Alpha channel (data[i + 3]) remains unchanged\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n  };\n\n  // OCR text detection with preprocessing\n  const detectText = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n    setIsDetecting(true);\n    setDetectedText('Initializing OCR...');\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      setDetectedText('Preprocessing image for handwriting...');\n\n      // Apply image preprocessing for better OCR\n      preprocessImage(canvas, ctx);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n      if (worker) {\n        setDetectedText('Running enhanced OCR...');\n\n        // Convert processed canvas to data URL and run OCR\n        const dataURL = canvas.toDataURL('image/png');\n        const {\n          data: {\n            text,\n            confidence\n          }\n        } = await worker.recognize(dataURL, {\n          rectangle: {\n            top: 0,\n            left: 0,\n            width: canvas.width,\n            height: canvas.height\n          }\n        });\n        const cleanText = text.trim() || 'No text detected';\n        const confidenceText = confidence ? ` (Confidence: ${confidence.toFixed(1)}%)` : '';\n        setDetectedText(cleanText + confidenceText);\n        console.log('OCR Result:', cleanText, 'Confidence:', confidence);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n    } catch (error) {\n      console.error('Text detection failed:', error);\n      setDetectedText('Detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Enhanced OCR for messy handwriting\n  const detectTextEnhanced = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n    setIsDetecting(true);\n    setDetectedText('Initializing enhanced handwriting detection...');\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n      if (worker) {\n        // Try multiple preprocessing approaches\n        const results = [];\n\n        // Method 1: High contrast black/white\n        setDetectedText('Method 1: High contrast processing...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        preprocessImage(canvas, ctx);\n        const dataURL1 = canvas.toDataURL('image/png');\n        await worker.setParameters({\n          tessedit_pageseg_mode: '6',\n          // Uniform block of text\n          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?()[]{}=-+*/\\'\"@#$%^&_|\\\\~ \\n'\n        });\n        const result1 = await worker.recognize(dataURL1);\n        results.push({\n          method: 'High Contrast',\n          text: result1.data.text,\n          confidence: result1.data.confidence\n        });\n\n        // Method 2: Single character mode for individual letters\n        setDetectedText('Method 2: Character-by-character analysis...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        await worker.setParameters({\n          tessedit_pageseg_mode: '8',\n          // Single character\n          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n        });\n        const dataURL2 = canvas.toDataURL('image/png');\n        const result2 = await worker.recognize(dataURL2);\n        results.push({\n          method: 'Character Mode',\n          text: result2.data.text,\n          confidence: result2.data.confidence\n        });\n\n        // Method 3: Raw text detection with minimal processing\n        setDetectedText('Method 3: Raw text detection...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        await worker.setParameters({\n          tessedit_pageseg_mode: '13',\n          // Raw line. Treat the image as a single text line\n          preserve_interword_spaces: '1'\n        });\n        const dataURL3 = canvas.toDataURL('image/png');\n        const result3 = await worker.recognize(dataURL3);\n        results.push({\n          method: 'Raw Line',\n          text: result3.data.text,\n          confidence: result3.data.confidence\n        });\n\n        // Find best result\n        const bestResult = results.reduce((best, current) => current.confidence > best.confidence ? current : best);\n\n        // Display all results\n        let displayText = `🏆 BEST (${bestResult.method}): ${bestResult.text}\\n\\n`;\n        results.forEach(result => {\n          var _result$confidence;\n          displayText += `${result.method} (${(_result$confidence = result.confidence) === null || _result$confidence === void 0 ? void 0 : _result$confidence.toFixed(1)}%): ${result.text}\\n\\n`;\n        });\n        setDetectedText(displayText);\n        console.log('Enhanced OCR Results:', results);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n    } catch (error) {\n      console.error('Enhanced text detection failed:', error);\n      setDetectedText('Enhanced detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // ChatGPT integration for better text interpretation\n  const enhanceWithChatGPT = async (imageDataURL, ocrText) => {\n    if (!apiKey) {\n      setChatGPTResult('Please enter your Gemini API key first');\n      return;\n    }\n    setIsUsingChatGPT(true);\n    setChatGPTResult('Sending to Gemini for analysis...');\n    try {\n      // Initialize Gemini\n      const genAI = new GoogleGenerativeAI(apiKey);\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n\n      // Convert the image data URL to the format Gemini expects\n      const base64Data = imageDataURL.split(',')[1];\n      const imagePart = {\n        inlineData: {\n          data: base64Data,\n          mimeType: \"image/jpeg\"\n        }\n      };\n      const prompt = `I have handwritten text on a whiteboard that OCR is struggling to read accurately. The OCR detected this text: \"${ocrText}\". Please look at the image and provide a clean, corrected version of what is actually written. Focus on:\n1. Correcting OCR errors and misread characters\n2. Fixing spacing and formatting\n3. Interpreting unclear handwriting\n4. Organizing the text logically\n5. Only return the corrected text content, nothing else.`;\n\n      // Send request to Gemini\n      const result = await model.generateContent([prompt, imagePart]);\n      const response = await result.response;\n      const correctedText = response.text();\n      setChatGPTResult(correctedText);\n\n      // Update the main detected text with Gemini result\n      setDetectedText(`🤖 Gemini Enhanced:\\n${correctedText}\\n\\n📝 Original OCR:\\n${ocrText}`);\n    } catch (error) {\n      console.error('Gemini API error:', error);\n      let errorMessage = `Error: ${error.message}`;\n      if (error.message.includes('API_KEY_INVALID')) {\n        errorMessage = `🔑 Authentication Error: Your Gemini API key appears to be invalid. Please check your configuration.`;\n      } else if (error.message.includes('RATE_LIMIT_EXCEEDED')) {\n        errorMessage = `⚠️ Rate Limit Exceeded: You've made too many requests to the Gemini API. Please wait a few minutes and try again.`;\n      }\n      setChatGPTResult(errorMessage);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Gemini Scene Analysis Function\n  const analyzeSceneWithAI = async imageDataURL => {\n    const geminiApiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!geminiApiKey) {\n      setChatGPTResult('Gemini API key missing. Please check environment variables.');\n      setAiAnalysisResult('Gemini API key missing. Please check environment variables.');\n      setShowAnalysisPanel(true);\n      return;\n    }\n\n    // Rate limiting check\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall;\n    const minDelay = 2000; // 2 seconds between calls for Gemini\n\n    if (timeSinceLastCall < minDelay) {\n      const waitTime = Math.ceil((minDelay - timeSinceLastCall) / 1000);\n      const waitMessage = `⏱️ Please wait ${waitTime} seconds before making another request.`;\n      setAiAnalysisResult(waitMessage);\n      setShowAnalysisPanel(true);\n      return;\n    }\n    setLastApiCall(now);\n    setIsUsingChatGPT(true);\n    setShowAnalysisPanel(true);\n    try {\n      // Show immediate feedback\n      const loadingMessage = `🤖 **Gemini AI Analysis Starting!**\n\n📸 **Image Received**: Processing your image now...\n🚀 **AI Status**: Connecting to Google Gemini Vision AI...\n⚡ **Processing**: This typically takes 5-15 seconds\n\n**What I'm analyzing:**\n• All visible text (handwritten, printed, signs)\n• People and their activities\n• Objects and equipment in the scene\n• Educational content and concepts\n• Overall scene description and context\n\nPlease wait while I provide a comprehensive analysis...`;\n      setChatGPTResult(loadingMessage);\n      setAiAnalysisResult(loadingMessage);\n\n      // Initialize Gemini\n      const genAI = new GoogleGenerativeAI(geminiApiKey);\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n\n      // Prepare the prompt\n      const prompt = `Please provide a comprehensive analysis of this image. I want to understand everything that's happening in this scene. Please include:\n\n📋 **SCENE OVERVIEW:**\n- What type of environment is this? (classroom, office, meeting room, etc.)\n- What is the main focus or subject?\n\n🔍 **DETAILED OBSERVATIONS:**\n- All text visible (handwritten, printed, on boards, signs, etc.)\n- People present (count, what they're doing, clothing, gestures)\n- Objects and equipment (whiteboards, computers, furniture, tools)\n- Colors, lighting, and atmosphere\n\n📝 **TEXT CONTENT:**\n- Transcribe ALL visible text accurately\n- Note the context of each text element\n- Identify any diagrams, equations, or drawings\n\n🎯 **EDUCATIONAL CONTENT:**\n- If this appears to be educational, what subject/topic?\n- Key concepts being taught or discussed\n- Any visual aids or teaching materials\n\n📊 **SUMMARY:**\n- Main purpose/activity in this scene\n- Most important information conveyed\n- Overall assessment of what's happening\n\nBe thorough and detailed - I want to understand everything about this scene!`;\n\n      // Convert the image data URL to the format Gemini expects\n      const base64Data = imageDataURL.split(',')[1];\n      const imagePart = {\n        inlineData: {\n          data: base64Data,\n          mimeType: \"image/jpeg\"\n        }\n      };\n\n      // Send request to Gemini\n      const result = await model.generateContent([prompt, imagePart]);\n      const response = await result.response;\n      const analysis = response.text();\n      const finalMessage = `🎉 **Gemini Analysis Complete!**\n\n${analysis}\n\n---\n*Analysis completed by Google Gemini Vision AI*`;\n      setChatGPTResult(finalMessage);\n      setAiAnalysisResult(finalMessage);\n      setDetectedText(`🤖 AI Analysis Complete! Full results available in analysis panel.`);\n    } catch (error) {\n      console.error('Gemini API error:', error);\n      let errorMsg = `❌ **Error**: ${error.message}`;\n      if (error.message.includes('API_KEY_INVALID')) {\n        errorMsg = `🔑 **API Key Error**: Your Gemini API key is invalid. Please check your configuration.`;\n      } else if (error.message.includes('RATE_LIMIT_EXCEEDED')) {\n        errorMsg = `⚠️ **Rate Limit**: You've made too many requests. Please wait a moment and try again.`;\n      } else if (error.message.includes('SAFETY')) {\n        errorMsg = `🛡️ **Safety Filter**: The image was blocked by safety filters. Please try a different image.`;\n      } else {\n        errorMsg += `\n\n**Troubleshooting Tips:**\n• Check your internet connection\n• Verify your Gemini API key is correct\n• Try again in a few moments\n• Contact support if the issue persists`;\n      }\n      setChatGPTResult(errorMsg);\n      setAiAnalysisResult(errorMsg);\n      setShowAnalysisPanel(true);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Gemini Q&A about analyzed content\n  const askQuestionAboutContent = async () => {\n    const geminiApiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!geminiApiKey) {\n      alert('Gemini API key missing. Please check environment variables.');\n      return;\n    }\n    if (!userQuestion.trim()) {\n      alert('Please enter a question');\n      return;\n    }\n    if (!aiAnalysisResult) {\n      alert('Please analyze some content first before asking questions');\n      return;\n    }\n\n    // Rate limiting check\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall;\n    const minDelay = 2000; // 2 seconds for Q&A with Gemini\n\n    if (timeSinceLastCall < minDelay) {\n      const waitTime = Math.ceil((minDelay - timeSinceLastCall) / 1000);\n      alert(`Please wait ${waitTime} seconds before asking another question.`);\n      return;\n    }\n    setLastApiCall(now);\n    setIsUsingChatGPT(true);\n    try {\n      // Create context-aware message for Gemini\n      const contextualQuestion = `Based on my previous image analysis, please answer this question:\n\nPREVIOUS ANALYSIS CONTEXT:\n${aiAnalysisResult}\n\nCONVERSATION HISTORY:\n${conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nCURRENT QUESTION: ${userQuestion}\n\nPlease provide a helpful, detailed answer based on the analysis and conversation context above. Be specific and reference the visual content when relevant.`;\n\n      // Initialize Gemini\n      const genAI = new GoogleGenerativeAI(geminiApiKey);\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n\n      // Send request to Gemini\n      const result = await model.generateContent(contextualQuestion);\n      const response = await result.response;\n      const answer = response.text();\n\n      // Add to conversation history\n      const newConversation = [...conversationHistory, {\n        role: \"user\",\n        content: userQuestion\n      }, {\n        role: \"assistant\",\n        content: answer\n      }];\n\n      // Keep only last 8 messages (4 Q&A pairs) to manage context length\n      const trimmedHistory = newConversation.slice(-8);\n      setConversationHistory(trimmedHistory);\n\n      // Clear the input\n      setUserQuestion('');\n    } catch (error) {\n      console.error('Gemini API error:', error);\n      let errorMessage = `Error: ${error.message}`;\n      if (error.message.includes('API_KEY_INVALID')) {\n        errorMessage = `🔑 **API Key Error**: Your Gemini API key is invalid. Please check your configuration.`;\n      } else if (error.message.includes('RATE_LIMIT_EXCEEDED')) {\n        errorMessage = `⚠️ **Rate Limit**: You've made too many requests. Please wait a moment and try again.`;\n      } else if (error.message.includes('SAFETY')) {\n        errorMessage = `🛡️ **Safety Filter**: Your question was blocked by safety filters. Please rephrase your question.`;\n      }\n      alert(errorMessage);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Full Scene Analysis - capture frame and analyze everything with AI Vision\n  const analyzeCurrentScene = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n    setIsDetecting(true);\n    setDetectedText('📸 Capturing frame for AI analysis...');\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw current video frame without any preprocessing for AI Vision\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // Convert to data URL for AI Vision API\n      const dataURL = canvas.toDataURL('image/jpeg', 0.8); // Use JPEG for smaller size\n\n      // Run AI Vision analysis\n      await analyzeSceneWithAI(dataURL);\n    } catch (error) {\n      console.error('Scene analysis failed:', error);\n      setDetectedText('Scene analysis failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Enhanced OCR with ChatGPT integration\n  const detectTextWithChatGPT = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n    setIsDetecting(true);\n    setDetectedText('Running OCR + ChatGPT analysis...');\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      setDetectedText('Preprocessing image...');\n\n      // Apply image preprocessing for better OCR\n      preprocessImage(canvas, ctx);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n      if (worker) {\n        setDetectedText('Running OCR...');\n\n        // Convert processed canvas to data URL\n        const dataURL = canvas.toDataURL('image/png');\n        const {\n          data: {\n            text,\n            confidence\n          }\n        } = await worker.recognize(dataURL);\n        const ocrText = text.trim() || 'No text detected';\n        setDetectedText(`OCR Result: ${ocrText}\\n\\nSending to ChatGPT for enhancement...`);\n\n        // Send to ChatGPT for enhancement\n        await enhanceWithChatGPT(dataURL, ocrText);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n    } catch (error) {\n      console.error('OCR + ChatGPT detection failed:', error);\n      setDetectedText('Detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Auto-detect text and take screenshot\n  const detectAndCapture = async () => {\n    await detectText();\n    setTimeout(() => {\n      takeScreenshot();\n    }, 500); // Small delay to ensure text is updated\n  };\n\n  // Clear all screenshots\n  const clearScreenshots = () => {\n    screenshots.forEach(screenshot => {\n      if (screenshot.url) {\n        URL.revokeObjectURL(screenshot.url);\n      }\n    });\n    setScreenshots([]);\n  };\n\n  // Backend API Integration Functions\n  const API_BASE_URL = 'http://localhost:3000';\n\n  // Upload video to backend\n  const uploadVideoToBackend = async videoFile => {\n    const formData = new FormData();\n    formData.append('video', videoFile);\n    try {\n      const response = await fetch(`${API_BASE_URL}/upload`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend upload error:', error);\n      throw error;\n    }\n  };\n\n  // Process video with backend\n  const processVideoWithBackend = async (videoPath, title = 'Untitled Lecture') => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ingest`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          videoPath,\n          title\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Processing failed: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend processing error:', error);\n      throw error;\n    }\n  };\n\n  // Query processed lecture\n  const queryLecture = async (lectureId, query) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          lectureId,\n          query\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Query failed: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend query error:', error);\n      throw error;\n    }\n  };\n\n  // Handle querying the backend\n  const handleBackendQuery = async () => {\n    if (!lectureId || !queryText.trim()) {\n      setQueryResult('Please ensure video is processed and enter a query');\n      return;\n    }\n    setIsQuerying(true);\n    setQueryResult('Analyzing lecture content...');\n    try {\n      const result = await queryLecture(lectureId, queryText.trim());\n      console.log('Query result:', result);\n      let formattedResult = `Answer: ${result.answer}\\n\\n`;\n      if (result.links && result.links.length > 0) {\n        formattedResult += 'Relevant timestamps:\\n';\n        result.links.forEach(link => {\n          formattedResult += `• ${link.timecode}: ${link.text}\\n`;\n        });\n        formattedResult += '\\n';\n      }\n      if (result.flashcards && result.flashcards.length > 0) {\n        formattedResult += 'Generated flashcard:\\n';\n        result.flashcards.forEach(card => {\n          formattedResult += `Q: ${card.question}\\nA: ${card.answer}\\n`;\n        });\n      }\n      setQueryResult(formattedResult);\n    } catch (error) {\n      console.error('Query failed:', error);\n      setQueryResult(`Query failed: ${error.message}`);\n    } finally {\n      setIsQuerying(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDFAF AI Scene Analyzer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2026,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Upload videos and analyze everything with AI Vision + OCR text detection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2027,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"live-mode-toggle\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: isLiveMode ? stopLiveMode : initializeLiveMode,\n          className: `btn ${isLiveMode ? 'danger' : 'primary'} live-toggle`,\n          children: isLiveMode ? '🛑 Exit Live Mode' : '🎥 Start Live Interactive Whiteboard'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2031,\n          columnNumber: 11\n        }, this), isListening && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"listening-indicator\",\n          children: \"\\uD83C\\uDFA4 Listening for \\\"EDITH\\\"...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2038,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2030,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2025,\n      columnNumber: 7\n    }, this), isLiveMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"live-whiteboard-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"live-main-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"live-video-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: liveVideoRef,\n            autoPlay: true,\n            muted: true,\n            playsInline: true,\n            className: \"live-video\",\n            width: 1280,\n            height: 720,\n            style: {\n              width: '100%',\n              height: '100%',\n              objectFit: 'cover'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2050,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: liveCanvasRef,\n            className: \"live-overlay-canvas\",\n            width: 1280,\n            height: 720\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2060,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: drawingCanvasRef,\n            className: \"drawing-canvas\",\n            width: 1280,\n            height: 720\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2066,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2049,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"live-controls\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gesture-status\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `status-item ${isDrawing ? 'active' : ''}`,\n              children: \"\\u270A Pinch to Draw\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2076,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `status-item ${isErasing ? 'active' : ''}`,\n              children: \"\\u270B Open Palm to Erase\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2079,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: clearDrawings,\n              className: \"btn secondary small\",\n              children: \"\\uD83D\\uDDD1\\uFE0F Clear All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2082,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2075,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2074,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2048,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"live-sidebar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"live-ai-assistant\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83E\\uDD16 EDITH - AI Teaching Assistant\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2091,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"voice-status\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `voice-indicator ${isListening ? 'listening' : ''}`,\n              children: isListening ? '🎤 Say \"EDITH\" + your question' : '🔇 Voice recognition inactive'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2093,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2092,\n            columnNumber: 15\n          }, this), lastVoiceCommand && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"last-command\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Last Command:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2100,\n              columnNumber: 19\n            }, this), \" \\\"\", lastVoiceCommand, \"\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2099,\n            columnNumber: 17\n          }, this), liveAIResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"live-ai-response\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\uD83C\\uDF93 EDITH's Response:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2106,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"response-text\",\n              children: liveAIResponse\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2107,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2105,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"live-summary-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\uD83D\\uDCDA Live Session Notes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2114,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"live-notes\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u2022 Draw with pinch gesture (blue)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2116,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u2022 Erase with open palm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2117,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u2022 Ask EDITH questions by voice\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2118,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u2022 Get real-time AI assistance\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2119,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2115,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2113,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2090,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2089,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2047,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: !isLiveMode && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"video-upload\",\n            className: \"upload-label\",\n            children: \"Choose Video File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2133,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"video-upload\",\n            type: \"file\",\n            accept: \"video/*\",\n            onChange: handleFileUpload,\n            className: \"file-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2136,\n            columnNumber: 11\n          }, this), !videoFile && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload-prompt\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\uD83D\\uDCF9 Select a video file to get started\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2145,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"small\", {\n                children: \"Supported formats: MP4, WebM, AVI\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2146,\n                columnNumber: 18\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2146,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2144,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2132,\n          columnNumber: 9\n        }, this), videoURL && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"api-config\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"\\uD83E\\uDD16 Gemini AI-Powered Analysis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2156,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"api-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                placeholder: \"Enter your Google Gemini API key...\",\n                value: apiKey,\n                onChange: e => setApiKey(e.target.value),\n                className: \"api-input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2158,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                className: \"api-help\",\n                children: [\"Get your API key from \", /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: \"https://aistudio.google.com/app/apikey\",\n                  target: \"_blank\",\n                  rel: \"noopener noreferrer\",\n                  children: \"Google AI Studio\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2166,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2167,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Features:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2168,\n                  columnNumber: 19\n                }, this), \" Vision AI Analysis + Video Analysis + Q&A Chat\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2165,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2157,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2155,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"backend-config\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"\\uD83D\\uDE80 Backend Analysis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2175,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"backend-toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"toggle-label\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  checked: isUsingBackend,\n                  onChange: e => setIsUsingBackend(e.target.checked)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2178,\n                  columnNumber: 19\n                }, this), \"Use backend API for full lecture analysis\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2177,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                className: \"backend-help\",\n                children: \"Enable this to upload videos to the backend for comprehensive analysis including board change detection and Q&A capabilities\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2185,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2176,\n              columnNumber: 15\n            }, this), uploadProgress && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"status-message upload-status\",\n              children: uploadProgress\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2192,\n              columnNumber: 17\n            }, this), processingStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"status-message processing-status\",\n              children: processingStatus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2198,\n              columnNumber: 17\n            }, this), lectureId && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"query-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"\\uD83D\\uDD0D Ask Questions About This Lecture\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2206,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"query-input-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  placeholder: \"Ask a question about the lecture content...\",\n                  value: queryText,\n                  onChange: e => setQueryText(e.target.value),\n                  className: \"query-input\",\n                  onKeyPress: e => e.key === 'Enter' && handleBackendQuery()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2208,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: handleBackendQuery,\n                  disabled: isQuerying || !queryText.trim(),\n                  className: \"query-button\",\n                  children: isQuerying ? 'Analyzing...' : 'Ask Question'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2216,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2207,\n                columnNumber: 19\n              }, this), queryResult && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"query-result\",\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"\\uD83D\\uDCCB Analysis Result:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2227,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n                  className: \"result-text\",\n                  children: queryResult\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2228,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2226,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2205,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"video\", {\n              ref: videoRef,\n              src: videoURL,\n              controls: true,\n              className: \"video-player\",\n              children: \"Your browser does not support the video tag.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2236,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n              ref: canvasRef,\n              style: {\n                display: 'none'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2244,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2235,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: takeScreenshot,\n              className: \"btn primary\",\n              children: \"\\uD83D\\uDCF8 Screenshot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2249,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: analyzeCurrentScene,\n              disabled: isDetecting || !apiKey,\n              className: \"btn ai-vision primary-action\",\n              children: isDetecting ? '🔄 Analyzing with AI...' : '🔍 Analyze Full Scene with AI'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2252,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: analyzeEntireVideo,\n              disabled: isAnalyzingVideo || !apiKey || !videoRef.current,\n              className: \"btn ai-video comprehensive-analysis\",\n              children: isAnalyzingVideo ? '🎬 Analyzing Video...' : '🎯 Comprehensive Video Analysis'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2259,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: initializeOCR,\n              disabled: isDetecting,\n              className: \"btn info\",\n              children: \"\\uD83D\\uDD27 Initialize OCR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2266,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: detectAndCapture,\n              disabled: isDetecting,\n              className: \"btn highlight\",\n              children: isDetecting ? '⚡ Processing...' : '⚡ Detect & Capture'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2273,\n              columnNumber: 15\n            }, this), screenshots.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: clearScreenshots,\n              className: \"btn danger\",\n              children: [\"\\uD83D\\uDDD1\\uFE0F Clear All (\", screenshots.length, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2281,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                alert(`API Status:\\n- API Key: ${apiKey ? 'Present' : 'Missing'}\\n- Connection: Testing...\\n\\nCheck console for details.`);\n                console.log('API Key Check:', {\n                  hasKey: !!apiKey,\n                  keyLength: apiKey === null || apiKey === void 0 ? void 0 : apiKey.length,\n                  keyStart: (apiKey === null || apiKey === void 0 ? void 0 : apiKey.substring(0, 15)) + '...',\n                  timestamp: new Date().toISOString()\n                });\n              },\n              className: \"btn info\",\n              title: \"Test API connection and debug\",\n              children: \"\\uD83D\\uDD27 Test API\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2285,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2248,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"monitoring-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"\\uD83D\\uDD04 Continuous Whiteboard Monitoring\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2304,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"monitoring-description\",\n              children: \"Perfect for classrooms! Automatically captures whiteboard changes so students never miss content.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2305,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"monitoring-controls\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: isMonitoring ? stopMonitoring : startMonitoring,\n                className: `btn ${isMonitoring ? 'danger' : 'success'} monitoring-toggle`,\n                disabled: !videoRef.current,\n                children: isMonitoring ? '⏹️ Stop Monitoring' : '▶️ Start Monitoring'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2310,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"monitoring-settings\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Check Frequency:\", /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: monitoringFrequency,\n                    onChange: e => setMonitoringFrequency(Number(e.target.value)),\n                    disabled: isMonitoring,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: 3000,\n                      children: \"Every 3 seconds\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2326,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: 5000,\n                      children: \"Every 5 seconds\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2327,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: 10000,\n                      children: \"Every 10 seconds\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2328,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: 30000,\n                      children: \"Every 30 seconds\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2329,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2321,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2319,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Change Sensitivity:\", /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: changeThreshold,\n                    onChange: e => setChangeThreshold(Number(e.target.value)),\n                    disabled: isMonitoring,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: 0.05,\n                      children: \"Very High (5%)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2340,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: 0.10,\n                      children: \"High (10%)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2341,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: 0.15,\n                      children: \"Medium (15%)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2342,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: 0.25,\n                      children: \"Low (25%)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2343,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2335,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2333,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2318,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2309,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"monitoring-status\",\n              children: [isMonitoring && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"status-active\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"status-indicator\",\n                  children: \"\\uD83D\\uDFE2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2352,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Monitoring Active - \", boardHistory.length, \" captures\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2353,\n                  columnNumber: 21\n                }, this), lastChangeDetected && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"last-change\",\n                  children: [\"Last change: \", lastChangeDetected.toLocaleTimeString()]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2355,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2351,\n                columnNumber: 19\n              }, this), !isMonitoring && boardHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"status-inactive\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"status-indicator\",\n                  children: \"\\u26AA\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2363,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Monitoring Stopped - \", boardHistory.length, \" captures saved\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2364,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2362,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2349,\n              columnNumber: 15\n            }, this), boardHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"monitoring-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setShowMonitoringPanel(!showMonitoringPanel),\n                className: \"btn info\",\n                children: [showMonitoringPanel ? '📁 Hide History' : '📋 View History', \" (\", boardHistory.length, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2371,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: generateBoardSummary,\n                className: \"btn primary\",\n                disabled: isGeneratingSummary,\n                children: isGeneratingSummary ? '🔄 Generating...' : '📚 Generate Summary'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2377,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: exportBoardHistory,\n                className: \"btn secondary\",\n                children: \"\\uD83D\\uDCE4 Export History\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2384,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: clearBoardHistory,\n                className: \"btn danger\",\n                children: \"\\uD83D\\uDDD1\\uFE0F Clear History\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2390,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2370,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2303,\n            columnNumber: 13\n          }, this), boardHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"\\uD83D\\uDCDA Whiteboard Session Summary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2403,\n              columnNumber: 17\n            }, this), boardSummary ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-result\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"summary-content\",\n                children: boardSummary.split('\\n').map((line, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: line\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2408,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2406,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"summary-actions\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => {\n                    navigator.clipboard.writeText(boardSummary);\n                    alert('📋 Summary copied to clipboard!');\n                  },\n                  className: \"btn secondary small\",\n                  children: \"\\uD83D\\uDCCB Copy Summary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2412,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: generatePDFStudyGuide,\n                  className: \"btn primary small\",\n                  children: \"\\uD83D\\uDCC4 Download PDF Study Guide\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2421,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setBoardSummary(''),\n                  className: \"btn danger small\",\n                  children: \"\\uD83D\\uDDD1\\uFE0F Clear\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2427,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2411,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2405,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-placeholder\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\uD83D\\uDCDD Click \\\"Generate Summary\\\" to get an AI-powered overview of all whiteboard content captured during this session.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2437,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Perfect for reviewing key concepts, formulas, and lesson progression!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2438,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2436,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2402,\n            columnNumber: 15\n          }, this), boardHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"qa-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"\\uD83D\\uDCAC Ask Questions About Whiteboard Content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2447,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"question-input\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: currentQuestion,\n                onChange: e => setCurrentQuestion(e.target.value),\n                placeholder: \"Ask a question about what was written on the board...\",\n                onKeyPress: e => e.key === 'Enter' && askQuestionAboutBoard(),\n                disabled: isAnswering\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2449,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: askQuestionAboutBoard,\n                className: \"btn primary\",\n                disabled: isAnswering || !currentQuestion.trim(),\n                children: isAnswering ? '🤔 Thinking...' : '❓ Ask'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2457,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2448,\n              columnNumber: 17\n            }, this), questionResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"qa-response\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"\\uD83C\\uDF93 Answer:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2468,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"response-content\",\n                children: questionResponse.split('\\n').map((line, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: line\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2471,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2469,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"response-actions\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => {\n                    navigator.clipboard.writeText(`Q: ${currentQuestion}\\nA: ${questionResponse}`);\n                    alert('📋 Q&A copied to clipboard!');\n                  },\n                  className: \"btn secondary small\",\n                  children: \"\\uD83D\\uDCCB Copy Q&A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2475,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => {\n                    setQuestionResponse('');\n                    setCurrentQuestion('');\n                  },\n                  className: \"btn danger small\",\n                  children: \"\\uD83D\\uDDD1\\uFE0F Clear\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2484,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2474,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2467,\n              columnNumber: 19\n            }, this), !questionResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"qa-placeholder\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\uD83D\\uDCA1 Examples of questions you can ask:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2499,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"\\\"What formulas were written on the board?\\\"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2501,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"\\\"Can you explain the diagram that was drawn?\\\"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2502,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"\\\"What were the main points from today's lesson?\\\"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2503,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"\\\"What examples were given for this concept?\\\"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2504,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2500,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2498,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2446,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"capture-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"\\uD83D\\uDCCB Before/After Whiteboard Capture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2513,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"capture-status\",\n              children: [captureMode === 'waiting' && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\uD83C\\uDFAF Ready to capture whiteboard states. Start by capturing the BEFORE state.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2516,\n                columnNumber: 19\n              }, this), captureMode === 'before-captured' && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u2705 Before state captured! Make your changes to the whiteboard, then capture the AFTER state.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2519,\n                columnNumber: 19\n              }, this), captureMode === 'ready-for-after' && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\uD83C\\uDF8A Both states captured! Scroll down to view the comparison analysis.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2522,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2514,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"capture-buttons\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: captureBeforeState,\n                disabled: isDetecting,\n                className: \"btn secondary\",\n                title: \"Capture the current state before making changes\",\n                children: \"\\uD83D\\uDCF8 Capture BEFORE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2527,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: captureAfterState,\n                disabled: isDetecting || !beforeCapture,\n                className: \"btn secondary\",\n                title: \"Capture the state after making changes\",\n                children: \"\\uD83D\\uDCF8 Capture AFTER\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2535,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: resetCaptures,\n                disabled: !beforeCapture && !afterCapture,\n                className: \"btn danger\",\n                title: \"Reset and start over with new captures\",\n                children: \"\\uD83D\\uDD04 Reset Captures\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2543,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2526,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2512,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-detection\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"\\uD83D\\uDD0D Detected Text:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2556,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"detected-text-box\",\n              children: detectedText || 'Click \"Detect Text\" to analyze the current frame'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2557,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2555,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2153,\n          columnNumber: 11\n        }, this), showAnalysisPanel && aiAnalysisResult && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-analysis-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"panel-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"\\uD83E\\uDD16 Gemini Vision Analysis Results\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2569,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowAnalysisPanel(false),\n              className: \"close-panel-btn\",\n              children: \"\\u2715\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2570,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2568,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"analysis-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"analysis-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"\\uD83D\\uDCCA Scene Analysis\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2579,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n                className: \"analysis-text\",\n                children: aiAnalysisResult\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2580,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2578,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"qa-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"\\uD83E\\uDD16 Ask Questions About This Content\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2585,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"qa-input-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  placeholder: \"Ask a question about what you see in the image...\",\n                  value: userQuestion,\n                  onChange: e => setUserQuestion(e.target.value),\n                  className: \"qa-input\",\n                  onKeyPress: e => e.key === 'Enter' && askQuestionAboutContent(),\n                  disabled: isUsingChatGPT\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2587,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: askQuestionAboutContent,\n                  disabled: isUsingChatGPT || !userQuestion.trim(),\n                  className: \"qa-button\",\n                  children: isUsingChatGPT ? '🤔 Thinking...' : '💬 Ask'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2596,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2586,\n                columnNumber: 17\n              }, this), conversationHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"conversation-history\",\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"\\uD83D\\uDCAD Conversation\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2608,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"conversation-messages\",\n                  children: conversationHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `message ${message.role === 'user' ? 'user-message' : 'ai-message'}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"message-role\",\n                      children: message.role === 'user' ? '👤 You:' : '🤖 AI:'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2615,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"message-content\",\n                      children: message.content\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2618,\n                      columnNumber: 27\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2611,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2609,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => setConversationHistory([]),\n                  className: \"clear-conversation-btn\",\n                  children: \"\\uD83D\\uDDD1\\uFE0F Clear Conversation\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2622,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2607,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2584,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2577,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2567,\n          columnNumber: 11\n        }, this), showVideoAnalysis && videoAnalysisResult && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-analysis-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"panel-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"\\uD83C\\uDFAC Comprehensive Video Analysis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2639,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowVideoAnalysis(false),\n              className: \"close-panel-btn\",\n              children: \"\\u2715\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2640,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2638,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"analysis-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"analysis-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"\\uD83D\\uDCCA Complete Video Analysis\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2649,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n                className: \"video-analysis-text\",\n                children: videoAnalysisResult\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2650,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2648,\n              columnNumber: 15\n            }, this), videoFramesSampled.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sampled-frames-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: [\"\\uD83D\\uDCF8 Analyzed Video Frames (\", videoFramesSampled.length, \" samples)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2656,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"frames-grid\",\n                children: videoFramesSampled.map((frame, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"frame-sample\",\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: frame.image,\n                    alt: `Frame ${frame.frameNumber}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2660,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"frame-info\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [\"Frame \", frame.frameNumber]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2662,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [frame.timestamp.toFixed(1), \"s\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2663,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2661,\n                    columnNumber: 25\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2659,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2657,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2655,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2647,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2637,\n          columnNumber: 11\n        }, this), showMonitoringPanel && boardHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"monitoring-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"panel-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"\\uD83D\\uDCCB Whiteboard History - \", boardHistory.length, \" Captures\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2678,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowMonitoringPanel(false),\n              className: \"close-panel-btn\",\n              children: \"\\u2715\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2679,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2677,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"monitoring-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"monitoring-stats\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"\\uD83D\\uDCCA Session Stats:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2688,\n                  columnNumber: 20\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2688,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [\"Total Captures: \", boardHistory.length]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2690,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [\"Monitoring Status: \", isMonitoring ? '🟢 Active' : '⚪ Stopped']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2691,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [\"Check Frequency: Every \", monitoringFrequency / 1000, \"s\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2692,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [\"Change Threshold: \", (changeThreshold * 100).toFixed(0), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2693,\n                  columnNumber: 19\n                }, this), lastChangeDetected && /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [\"Last Change: \", lastChangeDetected.toLocaleString()]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2694,\n                  columnNumber: 42\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2689,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2687,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"board-history-grid\",\n              children: boardHistory.slice().reverse().map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"history-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"history-header\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"history-time\",\n                    children: item.timestamp.toLocaleTimeString()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2702,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"history-change\",\n                    children: item.changes\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2705,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2701,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"history-image\",\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: item.image,\n                    alt: `Board state at ${item.timestamp.toLocaleTimeString()}`,\n                    className: \"board-thumbnail\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2710,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2709,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"history-description\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                    children: \"\\uD83D\\uDCDD Content Analysis:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2717,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: item.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2718,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2716,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"history-actions\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => {\n                      const link = document.createElement('a');\n                      link.href = item.image;\n                      link.download = `whiteboard-${item.timestamp.toISOString()}.jpg`;\n                      link.click();\n                    },\n                    className: \"btn small secondary\",\n                    children: \"\\uD83D\\uDCBE Download\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2721,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => {\n                      navigator.clipboard.writeText(item.description);\n                      alert('Description copied to clipboard!');\n                    },\n                    className: \"btn small info\",\n                    children: \"\\uD83D\\uDCCB Copy Text\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2732,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2720,\n                  columnNumber: 21\n                }, this)]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2700,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2698,\n              columnNumber: 15\n            }, this), boardHistory.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"no-history\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\uD83D\\uDCDD No whiteboard changes captured yet.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2748,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Start monitoring to automatically capture board content changes!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2749,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2747,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2686,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2676,\n          columnNumber: 11\n        }, this), screenshots.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gallery-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"\\uD83D\\uDCF1 Screenshots (\", screenshots.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2759,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gallery\",\n            children: screenshots.map(screenshot => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"screenshot-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: screenshot.url,\n                alt: `Screenshot at ${screenshot.timestamp.toFixed(1)}s`,\n                className: \"screenshot-image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2763,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"screenshot-info\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"\\u23F1\\uFE0F Time:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2769,\n                    columnNumber: 24\n                  }, this), \" \", screenshot.timestamp.toFixed(1), \"s\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2769,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"\\uD83D\\uDCDD Text:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2770,\n                    columnNumber: 24\n                  }, this), \" \", screenshot.detectedText]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2770,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2768,\n                columnNumber: 19\n              }, this)]\n            }, screenshot.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2762,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2760,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2758,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2024,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mv8oLF7RnuJRiBLPnv81q75LYWw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useRef","useState","useEffect","useCallback","Tesseract","GoogleGenerativeAI","jsPDF","html2canvas","Hands","Camera","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","videoFile","setVideoFile","videoURL","setVideoURL","screenshots","setScreenshots","isDetecting","setIsDetecting","detectedText","setDetectedText","ocrWorker","setOcrWorker","apiKey","setApiKey","process","env","REACT_APP_GEMINI_API_KEY","isUsingChatGPT","setIsUsingChatGPT","chatGPTResult","setChatGPTResult","aiAnalysisResult","setAiAnalysisResult","showAnalysisPanel","setShowAnalysisPanel","lastApiCall","setLastApiCall","rateLimitCooldown","setRateLimitCooldown","conversationHistory","setConversationHistory","userQuestion","setUserQuestion","apiKeyStatus","setApiKeyStatus","beforeCapture","setBeforeCapture","afterCapture","setAfterCapture","captureMode","setCaptureMode","comparisonResult","setComparisonResult","showComparison","setShowComparison","videoAnalysisResult","setVideoAnalysisResult","isAnalyzingVideo","setIsAnalyzingVideo","showVideoAnalysis","setShowVideoAnalysis","videoFramesSampled","setVideoFramesSampled","isMonitoring","setIsMonitoring","currentBoardState","setCurrentBoardState","boardHistory","setBoardHistory","lastChangeDetected","setLastChangeDetected","monitoringInterval","setMonitoringInterval","changeThreshold","setChangeThreshold","monitoringFrequency","setMonitoringFrequency","showMonitoringPanel","setShowMonitoringPanel","boardSummary","setBoardSummary","isGeneratingSummary","setIsGeneratingSummary","currentQuestion","setCurrentQuestion","questionResponse","setQuestionResponse","isAnswering","setIsAnswering","isLiveMode","setIsLiveMode","cameraStream","setCameraStream","isDrawing","setIsDrawing","isErasing","setIsErasing","drawingPath","setDrawingPath","allPaths","setAllPaths","voiceRecognition","setVoiceRecognition","isListening","setIsListening","lastVoiceCommand","setLastVoiceCommand","liveAIResponse","setLiveAIResponse","hands","setHands","camera","setCamera","liveVideoRef","liveCanvasRef","drawingCanvasRef","handsRef","current","srcObject","play","catch","console","error","testApiKey","genAI","model","getGenerativeModel","result","generateContent","response","text","log","isUsingBackend","setIsUsingBackend","lectureId","setLectureId","uploadProgress","setUploadProgress","processingStatus","setProcessingStatus","queryText","setQueryText","queryResult","setQueryResult","isQuerying","setIsQuerying","videoRef","canvasRef","initializeOCR","worker","createWorker","logger","m","setParameters","tessedit_char_whitelist","tessedit_pageseg_mode","preserve_interword_spaces","tessedit_do_invert","message","captureBeforeState","alert","video","canvas","ctx","getContext","width","videoWidth","height","videoHeight","drawImage","dataURL","toDataURL","image","timestamp","Date","toLocaleString","frameTime","currentTime","captureAfterState","analyzeChanges","timeDiff","timeFormatted","Math","abs","toFixed","basicAnalysis","resetCaptures","analyzeEntireVideo","duration","isNaN","geminiApiKey","initialMessage","round","framesToSample","min","max","floor","frameInterval","sampledFrames","i","Promise","resolve","seekHandler","removeEventListener","push","frameNumber","addEventListener","prev","analysisPrompt","length","imageParts","frame","base64Data","split","inlineData","data","mimeType","analysis","finalMessage","errorMsg","handleFileUpload","event","file","target","files","type","startsWith","url","URL","createObjectURL","uploadResult","uploadVideoToBackend","processResult","processVideoWithBackend","path","name","setTimeout","compareImages","img1DataURL","img2DataURL","canvas1","document","createElement","canvas2","ctx1","ctx2","image1","Image","image2","loadedImages","processComparison","data1","getImageData","data2","differentPixels","totalPixels","r1","g1","b1","r2","g2","b2","diff","changePercentage","onload","src","captureCurrentBoardState","startMonitoring","initialState","id","now","description","changes","interval","setInterval","newState","imagePart","prompt","newHistoryItem","stopMonitoring","clearInterval","clearBoardHistory","generateBoardSummary","allContent","map","item","index","join","summary","generatePDFStudyGuide","tempDiv","style","position","left","padding","fontFamily","fontSize","lineHeight","color","backgroundColor","currentDate","toLocaleDateString","year","month","day","formattedSummary","replace","line","trim","substring","innerHTML","body","appendChild","scale","useCORS","scrollHeight","removeChild","pdf","imgData","pdfWidth","internal","pageSize","getWidth","pdfHeight","getHeight","imgWidth","imgHeight","ratio","imgX","imgY","addImage","toISOString","slice","filename","save","askQuestionAboutBoard","answer","initializeLiveMode","stream","navigator","mediaDevices","getUserMedia","facingMode","handsInstance","locateFile","setOptions","maxNumHands","modelComplexity","minDetectionConfidence","minTrackingConfidence","onResults","onHandsResults","cameraInstance","onFrame","send","start","initializeVoiceRecognition","results","drawingCanvas","drawingCtx","clearRect","multiHandLandmarks","landmarks","thumb","indexFinger","distance","sqrt","pow","x","y","fingerTips","fingerBases","fingersExtended","every","tip","fillStyle","beginPath","arc","PI","fill","palmX","palmY","globalCompositeOperation","landmark","window","SpeechRecognition","webkitSpeechRecognition","recognition","continuous","interimResults","lang","onstart","onresult","transcript","Array","from","toLowerCase","includes","command","processVoiceCommand","onerror","onend","warn","_drawingCanvasRef$cur","currentDrawing","aiResponse","utterance","SpeechSynthesisUtterance","rate","pitch","speechSynthesis","speak","stopLiveMode","getTracks","forEach","track","stop","clearDrawings","exportBoardHistory","historyData","blob","Blob","JSON","stringify","a","href","download","click","revokeObjectURL","takeScreenshot","toBlob","screenshot","preprocessImage","imageData","gray","enhanced","threshold","putImageData","detectText","confidence","recognize","rectangle","top","cleanText","confidenceText","detectTextEnhanced","dataURL1","result1","method","dataURL2","result2","dataURL3","result3","bestResult","reduce","best","displayText","_result$confidence","enhanceWithChatGPT","imageDataURL","ocrText","correctedText","errorMessage","analyzeSceneWithAI","timeSinceLastCall","minDelay","waitTime","ceil","waitMessage","loadingMessage","askQuestionAboutContent","contextualQuestion","msg","role","content","newConversation","trimmedHistory","analyzeCurrentScene","detectTextWithChatGPT","detectAndCapture","clearScreenshots","API_BASE_URL","formData","FormData","append","fetch","ok","Error","status","statusText","json","videoPath","title","headers","queryLecture","query","handleBackendQuery","formattedResult","links","link","timecode","flashcards","card","question","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","autoPlay","muted","playsInline","objectFit","htmlFor","accept","onChange","placeholder","value","e","rel","checked","onKeyPress","key","disabled","controls","display","hasKey","keyLength","keyStart","Number","toLocaleTimeString","clipboard","writeText","alt","reverse","_c","$RefreshReg$"],"sources":["/Users/kyleprice/south_florida_hackstreet/whiteboard-detector/src/App.js"],"sourcesContent":["import { useRef, useState, useEffect, useCallback } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\nimport jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\nimport { Hands } from '@mediapipe/hands';\nimport { Camera } from '@mediapipe/camera_utils';\nimport './App.css';\n\nfunction App() {\n  const [videoFile, setVideoFile] = useState(null);\n  const [videoURL, setVideoURL] = useState(null);\n  const [screenshots, setScreenshots] = useState([]);\n  const [isDetecting, setIsDetecting] = useState(false);\n  const [detectedText, setDetectedText] = useState('');\n  const [ocrWorker, setOcrWorker] = useState(null);\n  const [apiKey, setApiKey] = useState(process.env.REACT_APP_GEMINI_API_KEY || '');\n  const [isUsingChatGPT, setIsUsingChatGPT] = useState(false);\n  const [chatGPTResult, setChatGPTResult] = useState('');\n  \n  // AI Vision Analysis Results\n  const [aiAnalysisResult, setAiAnalysisResult] = useState('');\n  const [showAnalysisPanel, setShowAnalysisPanel] = useState(false);\n  \n  // Rate limiting and conversation state\n  const [lastApiCall, setLastApiCall] = useState(0);\n  const [rateLimitCooldown, setRateLimitCooldown] = useState(0);\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const [userQuestion, setUserQuestion] = useState('');\n  const [apiKeyStatus, setApiKeyStatus] = useState('unchecked'); // unchecked, valid, invalid\n  \n  // Before/After Whiteboard Capture System\n  const [beforeCapture, setBeforeCapture] = useState(null);\n  const [afterCapture, setAfterCapture] = useState(null);\n  const [captureMode, setCaptureMode] = useState('waiting'); // waiting, before-captured, ready-for-after\n  const [comparisonResult, setComparisonResult] = useState('');\n  const [showComparison, setShowComparison] = useState(false);\n  \n  // Video Analysis System\n  const [videoAnalysisResult, setVideoAnalysisResult] = useState('');\n  const [isAnalyzingVideo, setIsAnalyzingVideo] = useState(false);\n  const [showVideoAnalysis, setShowVideoAnalysis] = useState(false);\n  const [videoFramesSampled, setVideoFramesSampled] = useState([]);\n  \n  // Continuous Whiteboard Monitoring System\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const [currentBoardState, setCurrentBoardState] = useState(null);\n  const [boardHistory, setBoardHistory] = useState([]);\n  const [lastChangeDetected, setLastChangeDetected] = useState(null);\n  const [monitoringInterval, setMonitoringInterval] = useState(null);\n  const [changeThreshold, setChangeThreshold] = useState(0.15); // 15% change threshold\n  const [monitoringFrequency, setMonitoringFrequency] = useState(5000); // Check every 5 seconds\n  const [showMonitoringPanel, setShowMonitoringPanel] = useState(false);\n  \n  // Summary and Q&A States for Whiteboard Content\n  const [boardSummary, setBoardSummary] = useState('');\n  const [isGeneratingSummary, setIsGeneratingSummary] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState('');\n  const [questionResponse, setQuestionResponse] = useState('');\n  const [isAnswering, setIsAnswering] = useState(false);\n\n  // Live Interactive Whiteboard System\n  const [isLiveMode, setIsLiveMode] = useState(false);\n  const [cameraStream, setCameraStream] = useState(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isErasing, setIsErasing] = useState(false);\n  const [drawingPath, setDrawingPath] = useState([]);\n  const [allPaths, setAllPaths] = useState([]);\n  const [voiceRecognition, setVoiceRecognition] = useState(null);\n  const [isListening, setIsListening] = useState(false);\n  const [lastVoiceCommand, setLastVoiceCommand] = useState('');\n  const [liveAIResponse, setLiveAIResponse] = useState('');\n  const [hands, setHands] = useState(null);\n  const [camera, setCamera] = useState(null);\n\n  // Refs for live whiteboard\n  const liveVideoRef = useRef(null);\n  const liveCanvasRef = useRef(null);\n  const drawingCanvasRef = useRef(null);\n  const handsRef = useRef(null);\n\n  // Handle video stream playback\n  useEffect(() => {\n    if (cameraStream && liveVideoRef.current) {\n      liveVideoRef.current.srcObject = cameraStream;\n      liveVideoRef.current.play().catch(console.error);\n    }\n  }, [cameraStream]);\n  \n  // Test Gemini API key validity\n  const testApiKey = async () => {\n    if (!apiKey) {\n      setApiKeyStatus('invalid');\n      return;\n    }\n    \n    try {\n      // Test Gemini API key with a simple request\n      const genAI = new GoogleGenerativeAI(apiKey);\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      \n      // Simple test request\n      const result = await model.generateContent(\"Test\");\n      const response = await result.response;\n      \n      if (response.text()) {\n        setApiKeyStatus('valid');\n        console.log('✅ Gemini API key is valid');\n      } else {\n        setApiKeyStatus('invalid');\n        console.log('❌ Gemini API key is invalid');\n      }\n    } catch (error) {\n      setApiKeyStatus('invalid');\n      console.log('❌ Gemini API key test failed:', error);\n    }\n  };  // Backend integration state\n  const [isUsingBackend, setIsUsingBackend] = useState(false);\n  const [lectureId, setLectureId] = useState('');\n  const [uploadProgress, setUploadProgress] = useState('');\n  const [processingStatus, setProcessingStatus] = useState('');\n  const [queryText, setQueryText] = useState('');\n  const [queryResult, setQueryResult] = useState('');\n  const [isQuerying, setIsQuerying] = useState(false);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Initialize OCR worker with handwriting optimizations\n  const initializeOCR = async () => {\n    if (ocrWorker) return ocrWorker;\n    \n    try {\n      console.log('Starting OCR initialization...');\n      const worker = await Tesseract.createWorker('eng', 1, {\n        logger: m => console.log('OCR Logger:', m)\n      });\n      \n      // Configure for better handwriting recognition\n      await worker.setParameters({\n        tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?()[]{}=-+*/\\'\"@#$%^&_|\\\\~ ',\n        tessedit_pageseg_mode: '6', // Uniform block of text\n        preserve_interword_spaces: '1',\n        tessedit_do_invert: '0'\n      });\n      \n      console.log('OCR worker created successfully');\n      setOcrWorker(worker);\n      return worker;\n    } catch (error) {\n      console.error('OCR initialization failed:', error);\n      setDetectedText('OCR initialization failed: ' + error.message);\n      return null;\n    }\n  };\n\n  // Before/After Whiteboard Capture Functions\n  const captureBeforeState = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n    \n    if (video.videoWidth === 0 || video.videoHeight === 0) {\n      alert('Video not loaded properly');\n      return;\n    }\n\n    // Capture the current frame\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataURL = canvas.toDataURL('image/png');\n    \n    setBeforeCapture({\n      image: dataURL,\n      timestamp: new Date().toLocaleString(),\n      frameTime: video.currentTime\n    });\n    \n    setCaptureMode('before-captured');\n    setDetectedText('📸 Before state captured! Make your edits to the whiteboard, then capture the after state.');\n  };\n\n  const captureAfterState = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n\n    if (!beforeCapture) {\n      alert('Please capture the before state first.');\n      return;\n    }\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n\n    // Capture the current frame\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataURL = canvas.toDataURL('image/png');\n    \n    setAfterCapture({\n      image: dataURL,\n      timestamp: new Date().toLocaleString(),\n      frameTime: video.currentTime\n    });\n    \n    setCaptureMode('ready-for-after');\n    setShowComparison(true);\n    setDetectedText('📸 After state captured! Scroll down to see before/after comparison.');\n    \n    // Auto-generate comparison analysis\n    await analyzeChanges();\n  };\n\n  const analyzeChanges = async () => {\n    if (!beforeCapture || !afterCapture) return;\n    \n    setComparisonResult('🔍 Analyzing changes between before and after states...');\n    \n    try {\n      // For now, provide a basic comparison message\n      // In the future, this could use AI to detect actual differences\n      const timeDiff = afterCapture.frameTime - beforeCapture.frameTime;\n      const timeFormatted = Math.abs(timeDiff).toFixed(1);\n      \n      const basicAnalysis = `📊 **Before/After Analysis Complete**\n\n⏱️ **Time Difference**: ${timeFormatted} seconds between captures\n📅 **Before**: ${beforeCapture.timestamp}\n📅 **After**: ${afterCapture.timestamp}\n\n🔍 **Visual Comparison**: \n- Both states have been captured for manual comparison\n- Review the images below to identify changes\n- Look for added text, erased content, or modified diagrams\n\n💡 **Tip**: Use the AI analysis feature on each image individually to get detailed descriptions of what changed.`;\n\n      setComparisonResult(basicAnalysis);\n      \n    } catch (error) {\n      setComparisonResult(`❌ Error analyzing changes: ${error.message}`);\n    }\n  };\n\n  const resetCaptures = () => {\n    setBeforeCapture(null);\n    setAfterCapture(null);\n    setCaptureMode('waiting');\n    setComparisonResult('');\n    setShowComparison(false);\n    setDetectedText('🔄 Capture system reset. Ready to capture new before/after states.');\n  };\n\n  // Comprehensive Video Analysis Function with Gemini\n  const analyzeEntireVideo = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    if (video.duration === 0 || isNaN(video.duration)) {\n      alert('Video not fully loaded. Please wait for the video to load completely.');\n      return;\n    }\n\n    // Check for Gemini API key\n    const geminiApiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!geminiApiKey) {\n      alert('Gemini API key not configured. Please check your environment variables.');\n      return;\n    }\n\n    setIsAnalyzingVideo(true);\n    setShowVideoAnalysis(true);\n    setVideoFramesSampled([]);\n    \n    const initialMessage = `🤖 **Starting Comprehensive Video Analysis with Gemini**\n\n📹 **Video Details:**\n- Duration: ${Math.round(video.duration)} seconds\n- Dimensions: ${video.videoWidth}x${video.videoHeight}\n\n🔍 **Analysis Process:**\n1. Sampling key frames throughout the video\n2. Processing images with Gemini Vision AI\n3. Identifying patterns and changes over time\n4. Generating comprehensive summary and insights\n\n⚡ **Processing Status:** Sampling frames...`;\n\n    setVideoAnalysisResult(initialMessage);\n\n    try {\n      // Sample frames at strategic intervals throughout the video\n      const framesToSample = Math.min(8, Math.max(3, Math.floor(video.duration / 10))); // 3-8 frames depending on video length\n      const frameInterval = video.duration / framesToSample;\n      const sampledFrames = [];\n\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n\n      // Sample frames at different timestamps\n      for (let i = 0; i < framesToSample; i++) {\n        const timestamp = i * frameInterval;\n        \n        // Seek to timestamp and capture frame\n        await new Promise((resolve) => {\n          const seekHandler = () => {\n            video.removeEventListener('seeked', seekHandler);\n            \n            // Capture the frame\n            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n            const dataURL = canvas.toDataURL('image/jpeg', 0.8);\n            \n            sampledFrames.push({\n              timestamp: timestamp,\n              image: dataURL,\n              frameNumber: i + 1\n            });\n            \n            resolve();\n          };\n          \n          video.addEventListener('seeked', seekHandler);\n          video.currentTime = timestamp;\n        });\n\n        // Update progress\n        setVideoAnalysisResult(prev => prev + `\\n📸 Frame ${i + 1}/${framesToSample} captured at ${timestamp.toFixed(1)}s`);\n      }\n\n      setVideoFramesSampled(sampledFrames);\n\n      // Update status\n      setVideoAnalysisResult(prev => prev + '\\n\\n🚀 Sending frames to Gemini Vision AI for analysis...');\n\n      // Initialize Gemini\n      const genAI = new GoogleGenerativeAI(geminiApiKey);\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n      // Create comprehensive analysis prompt\n      const analysisPrompt = `Please provide a comprehensive analysis of this video based on the ${sampledFrames.length} key frames I've sampled throughout its ${Math.round(video.duration)}-second duration.\n\n🎯 **COMPREHENSIVE VIDEO ANALYSIS REQUEST:**\n\n📊 **OVERALL SUMMARY:**\n- What is the main purpose/topic of this video?\n- What type of content is being presented? (lecture, tutorial, meeting, etc.)\n- Who is the target audience?\n\n🔍 **DETAILED CONTENT ANALYSIS:**\n- What are the key concepts, topics, or subjects discussed?\n- Are there any educational elements, teaching materials, or learning objectives?\n- What visual aids are used? (whiteboards, slides, demonstrations, etc.)\n\n📝 **TEXT AND WRITING ANALYSIS:**\n- Extract and transcribe ALL visible text throughout the video\n- Identify any equations, formulas, diagrams, or technical content\n- Note any handwritten vs. printed text\n- Track how text content changes over time\n\n👥 **PEOPLE AND ACTIVITIES:**\n- How many people are visible and what are their roles?\n- What activities are taking place? (teaching, presenting, discussing, etc.)\n- How do people interact with materials or each other?\n- What gestures, movements, or behaviors are significant?\n\n🎓 **EDUCATIONAL VALUE:**\n- What skills or knowledge does this video teach?\n- What are the main learning outcomes?\n- How is information structured and presented?\n- What teaching methods or techniques are used?\n\n⏱️ **TEMPORAL ANALYSIS:**\n- How does the content progress over time?\n- Are there distinct sections or phases in the video?\n- What changes occur between the beginning and end?\n- Identify any pivotal moments or transitions\n\n🏛️ **ENVIRONMENT & CONTEXT:**\n- Describe the setting/location (classroom, office, lab, etc.)\n- What equipment, tools, or materials are present?\n- How does the environment support the content?\n\n💡 **KEY INSIGHTS & TAKEAWAYS:**\n- What are the most important points or messages?\n- What would someone learn from watching this video?\n- How could this content be applied or used?\n\n📋 **STRUCTURED SUMMARY:**\nProvide a clear, organized summary that someone could use to understand the video's content without watching it.\n\nPlease be thorough and detailed - I want to understand everything that happens in this video and its educational/informational value.`;\n\n      // Convert image data URLs to parts for Gemini\n      const imageParts = [];\n      for (const frame of sampledFrames) {\n        // Convert data URL to base64\n        const base64Data = frame.image.split(',')[1];\n        imageParts.push({\n          inlineData: {\n            data: base64Data,\n            mimeType: \"image/jpeg\"\n          }\n        });\n      }\n\n      // Send to Gemini\n      const result = await model.generateContent([\n        analysisPrompt,\n        ...imageParts\n      ]);\n\n      const response = await result.response;\n      const analysis = response.text();\n\n      const finalMessage = `✅ **Comprehensive Video Analysis Complete!**\n\n🎯 **Analysis Summary:**\n- Analyzed ${sampledFrames.length} key frames from ${Math.round(video.duration)}-second video\n- Processed with Gemini Vision AI\n- Comprehensive content analysis complete\n\n� **Detailed Analysis Results:**\n\n${analysis}\n\n---\n*Analysis completed by Google Gemini Vision AI*\n*${sampledFrames.length} frames analyzed from ${Math.round(video.duration)}-second video*`;\n\n      setVideoAnalysisResult(finalMessage);\n      setDetectedText(`🤖 Comprehensive video analysis complete! View detailed results in the Video Analysis panel.`);\n\n    } catch (error) {\n      console.error('Video analysis error:', error);\n      const errorMsg = `❌ **Video Analysis Error**\n\n**Error**: ${error.message}\n\n**Troubleshooting:**\n• Ensure video is fully loaded\n• Check internet connection\n• Verify Gemini API key is correct\n• Try analyzing a shorter video segment\n\n**Alternative**: Use the single frame analysis for specific moments in the video.`;\n      \n      setVideoAnalysisResult(errorMsg);\n    } finally {\n      setIsAnalyzingVideo(false);\n    }\n  };\n\n  // Handle video file upload\n  const handleFileUpload = async (event) => {\n    const file = event.target.files[0];\n    if (file && file.type.startsWith('video/')) {\n      setVideoFile(file);\n      const url = URL.createObjectURL(file);\n      setVideoURL(url);\n      setScreenshots([]);\n      setDetectedText('');\n      setOcrWorker(null); // Reset worker for new video\n      setLectureId('');\n      setProcessingStatus('');\n      setQueryResult('');\n      \n      // If using backend, upload and process the video\n      if (isUsingBackend) {\n        try {\n          setUploadProgress('Uploading video to backend...');\n          const uploadResult = await uploadVideoToBackend(file);\n          console.log('Upload result:', uploadResult);\n          \n          setUploadProgress('Upload complete! Processing video...');\n          const processResult = await processVideoWithBackend(\n            uploadResult.video.path, \n            file.name\n          );\n          console.log('Process result:', processResult);\n          \n          setLectureId(processResult.lectureId);\n          setProcessingStatus(`Processing started. Lecture ID: ${processResult.lectureId}`);\n          setUploadProgress('');\n        } catch (error) {\n          console.error('Backend upload/processing failed:', error);\n          setUploadProgress(`Error: ${error.message}`);\n        }\n      } else {\n        // Initialize OCR for local processing\n        setTimeout(() => {\n          initializeOCR();\n        }, 1000);\n      }\n    } else {\n      alert('Please select a valid video file');\n    }\n  };\n\n  // Continuous Whiteboard Monitoring System\n  \n  // Compare two images to detect changes\n  const compareImages = (img1DataURL, img2DataURL) => {\n    return new Promise((resolve) => {\n      const canvas1 = document.createElement('canvas');\n      const canvas2 = document.createElement('canvas');\n      const ctx1 = canvas1.getContext('2d');\n      const ctx2 = canvas2.getContext('2d');\n      \n      const image1 = new Image();\n      const image2 = new Image();\n      \n      let loadedImages = 0;\n      \n      const processComparison = () => {\n        loadedImages++;\n        if (loadedImages === 2) {\n          // Set canvas dimensions\n          const width = Math.min(image1.width, image2.width, 640);\n          const height = Math.min(image1.height, image2.height, 480);\n          \n          canvas1.width = canvas2.width = width;\n          canvas1.height = canvas2.height = height;\n          \n          // Draw images\n          ctx1.drawImage(image1, 0, 0, width, height);\n          ctx2.drawImage(image2, 0, 0, width, height);\n          \n          // Get image data\n          const data1 = ctx1.getImageData(0, 0, width, height);\n          const data2 = ctx2.getImageData(0, 0, width, height);\n          \n          // Calculate difference\n          let differentPixels = 0;\n          const totalPixels = width * height;\n          \n          for (let i = 0; i < data1.data.length; i += 4) {\n            const r1 = data1.data[i];\n            const g1 = data1.data[i + 1];\n            const b1 = data1.data[i + 2];\n            \n            const r2 = data2.data[i];\n            const g2 = data2.data[i + 1];\n            const b2 = data2.data[i + 2];\n            \n            // Calculate color difference (simple threshold)\n            const diff = Math.abs(r1 - r2) + Math.abs(g1 - g2) + Math.abs(b1 - b2);\n            if (diff > 30) { // Threshold for considering a pixel \"different\"\n              differentPixels++;\n            }\n          }\n          \n          const changePercentage = (differentPixels / totalPixels) * 100;\n          resolve(changePercentage);\n        }\n      };\n      \n      image1.onload = processComparison;\n      image2.onload = processComparison;\n      \n      image1.src = img1DataURL;\n      image2.src = img2DataURL;\n    });\n  };\n\n  // Capture current whiteboard state\n  const captureCurrentBoardState = () => {\n    if (!videoRef.current || !canvasRef.current) return null;\n    \n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n    \n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    return canvas.toDataURL('image/jpeg', 0.8);\n  };\n\n  // Start continuous monitoring\n  const startMonitoring = () => {\n    if (isMonitoring) return;\n    \n    setIsMonitoring(true);\n    setShowMonitoringPanel(true);\n    \n    // Capture initial state\n    const initialState = captureCurrentBoardState();\n    if (initialState) {\n      setCurrentBoardState(initialState);\n      const timestamp = new Date();\n      setBoardHistory([{\n        id: Date.now(),\n        image: initialState,\n        timestamp: timestamp,\n        description: \"Initial whiteboard state\",\n        changes: \"Monitoring started\"\n      }]);\n    }\n    \n    // Set up monitoring interval\n    const interval = setInterval(async () => {\n      const newState = captureCurrentBoardState();\n      if (!newState || !currentBoardState) return;\n      \n      try {\n        const changePercentage = await compareImages(currentBoardState, newState);\n        \n        if (changePercentage > changeThreshold) {\n          // Significant change detected!\n          const timestamp = new Date();\n          \n          // Analyze the change with Gemini\n          const geminiApiKey = process.env.REACT_APP_GEMINI_API_KEY;\n          if (geminiApiKey) {\n            try {\n              const genAI = new GoogleGenerativeAI(geminiApiKey);\n              const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n              const base64Data = newState.split(',')[1];\n              const imagePart = {\n                inlineData: {\n                  data: base64Data,\n                  mimeType: \"image/jpeg\"\n                }\n              };\n\n              const prompt = `Please briefly describe what's visible on this whiteboard/board. Focus on:\n- Any text or writing\n- Diagrams, equations, or drawings\n- Key concepts being taught\n- Overall topic or subject\nKeep it concise but informative for students reviewing the content.`;\n\n              const result = await model.generateContent([prompt, imagePart]);\n              const response = await result.response;\n              const description = response.text();\n\n              // Add to history with AI description\n              const newHistoryItem = {\n                id: Date.now(),\n                image: newState,\n                timestamp: timestamp,\n                description: description,\n                changes: `${changePercentage.toFixed(1)}% change detected`\n              };\n\n              setBoardHistory(prev => [...prev, newHistoryItem]);\n              setCurrentBoardState(newState);\n              setLastChangeDetected(timestamp);\n\n            } catch (error) {\n              console.error('Gemini analysis failed:', error);\n              // Fallback without AI description\n              const newHistoryItem = {\n                id: Date.now(),\n                image: newState,\n                timestamp: timestamp,\n                description: \"Whiteboard content updated\",\n                changes: `${changePercentage.toFixed(1)}% change detected`\n              };\n\n              setBoardHistory(prev => [...prev, newHistoryItem]);\n              setCurrentBoardState(newState);\n              setLastChangeDetected(timestamp);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Image comparison failed:', error);\n      }\n    }, monitoringFrequency);\n    \n    setMonitoringInterval(interval);\n    setDetectedText(`📊 Whiteboard monitoring started! Checking for changes every ${monitoringFrequency/1000} seconds.`);\n  };\n\n  // Stop monitoring\n  const stopMonitoring = () => {\n    if (monitoringInterval) {\n      clearInterval(monitoringInterval);\n      setMonitoringInterval(null);\n    }\n    setIsMonitoring(false);\n    setDetectedText('📊 Whiteboard monitoring stopped.');\n  };\n\n  // Clear monitoring history\n  const clearBoardHistory = () => {\n    setBoardHistory([]);\n    setDetectedText('📊 Whiteboard history cleared.');\n  };\n\n  // Generate summary of all captured whiteboard content\n  const generateBoardSummary = async () => {\n    if (boardHistory.length === 0) {\n      alert('📝 No whiteboard content captured yet. Start monitoring to capture board changes first!');\n      return;\n    }\n\n    setIsGeneratingSummary(true);\n    setBoardSummary('');\n\n    try {\n      const genAI = new GoogleGenerativeAI(apiKey);\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      \n      // Create a comprehensive content string from all captures\n      const allContent = boardHistory.map((item, index) => \n        `**Capture ${index + 1}** (${item.timestamp.toLocaleString()}):\\n${item.description}`\n      ).join('\\n\\n');\n\n      const prompt = `Please provide a comprehensive analysis of this classroom whiteboard session based on the ${boardHistory.length} captures I've taken throughout the class.\n\n🎯 **COMPREHENSIVE WHITEBOARD SESSION ANALYSIS:**\n\n📊 **OVERALL SESSION SUMMARY:**\n- What is the main subject/topic being taught in this class?\n- What type of lesson is this? (lecture, problem-solving, review, etc.)\n- What grade level or course does this appear to be for?\n\n🔍 **DETAILED CONTENT ANALYSIS:**\n- What are the key concepts, topics, or subjects covered?\n- What educational elements and learning objectives are present?\n- What types of visual aids are used? (diagrams, formulas, examples, etc.)\n\n📝 **TEXT AND MATHEMATICAL CONTENT:**\n- Extract and organize ALL formulas, equations, and mathematical expressions\n- Identify any diagrams, charts, graphs, or technical drawings\n- Note the progression of problem-solving or concept development\n- Track how content builds upon previous material\n\n🎓 **EDUCATIONAL STRUCTURE:**\n- What skills or knowledge does this lesson teach?\n- What are the main learning outcomes and objectives?\n- How is information structured and presented throughout the class?\n- What teaching methods or techniques are demonstrated?\n\n⏱️ **LESSON PROGRESSION:**\n- How does the content develop over the course of the class?\n- Are there distinct sections, topics, or phases in the lesson?\n- What changes occur from the beginning to end of class?\n- Identify any pivotal moments, key explanations, or important transitions\n\n🏛️ **CLASSROOM CONTEXT:**\n- What subject area is being taught? (Math, Science, History, etc.)\n- What level of complexity is the material?\n- How does the content relate to broader curriculum goals?\n\n💡 **KEY INSIGHTS & LEARNING POINTS:**\n- What are the most important concepts students should remember?\n- What would a student learn from this complete lesson?\n- Which topics require the most attention or practice?\n- What connections are made between different concepts?\n\n📋 **STUDENT-READY SUMMARY:**\nProvide a clear, organized study guide that students could use to review the entire lesson, including:\n- Main topics covered\n- Important formulas or key facts\n- Examples worked through\n- Concepts to remember for exams\n\n**Captured Whiteboard Content:**\n${allContent}\n\nPlease be thorough and educational - create a summary that helps students understand and review everything taught in this class session.`;\n\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const summary = response.text();\n\n      setBoardSummary(summary);\n      setDetectedText('📋 Whiteboard session summary generated successfully!');\n    } catch (error) {\n      console.error('Error generating summary:', error);\n      setDetectedText('❌ Error generating summary. Please try again.');\n    } finally {\n      setIsGeneratingSummary(false);\n    }\n  };\n\n  // Generate PDF study guide from whiteboard summary\n  const generatePDFStudyGuide = async () => {\n    if (!boardSummary) {\n      alert('📚 Please generate a summary first before creating a PDF study guide!');\n      return;\n    }\n\n    try {\n      setDetectedText('📄 Generating PDF study guide...');\n\n      // Create a temporary div for PDF content\n      const tempDiv = document.createElement('div');\n      tempDiv.style.position = 'absolute';\n      tempDiv.style.left = '-9999px';\n      tempDiv.style.width = '800px';\n      tempDiv.style.padding = '40px';\n      tempDiv.style.fontFamily = 'Arial, sans-serif';\n      tempDiv.style.fontSize = '14px';\n      tempDiv.style.lineHeight = '1.6';\n      tempDiv.style.color = '#333';\n      tempDiv.style.backgroundColor = '#ffffff';\n\n      // Get current date for the study guide\n      const currentDate = new Date().toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n\n      // Format the summary content for PDF\n      const formattedSummary = boardSummary\n        .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n        .replace(/🎯|📊|🔍|📝|🎓|⏱️|🏛️|💡|📋/g, '')\n        .split('\\n')\n        .map(line => {\n          if (line.trim().startsWith('-')) {\n            return `<div style=\"margin-left: 20px; margin-bottom: 5px;\">• ${line.trim().substring(1)}</div>`;\n          }\n          return `<div style=\"margin-bottom: 10px;\">${line}</div>`;\n        })\n        .join('');\n\n      tempDiv.innerHTML = `\n        <div style=\"text-align: center; margin-bottom: 30px; padding-bottom: 20px; border-bottom: 2px solid #667eea;\">\n          <h1 style=\"color: #667eea; margin: 0; font-size: 28px;\">📚 Whiteboard Study Guide</h1>\n          <h2 style=\"color: #666; margin: 10px 0 0 0; font-size: 16px; font-weight: normal;\">Generated on ${currentDate}</h2>\n          <div style=\"color: #888; margin-top: 10px; font-size: 12px;\">\n            Based on ${boardHistory.length} whiteboard captures from classroom session\n          </div>\n        </div>\n\n        <div style=\"margin-bottom: 20px;\">\n          ${formattedSummary}\n        </div>\n\n        <div style=\"margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd;\">\n          <h3 style=\"color: #667eea; margin-bottom: 15px;\">📸 Captured Whiteboard Content Timeline:</h3>\n          ${boardHistory.map((item, index) => `\n            <div style=\"margin-bottom: 15px; padding: 10px; background-color: #f8f9fa; border-left: 4px solid #667eea; border-radius: 4px;\">\n              <div style=\"font-weight: bold; color: #667eea; margin-bottom: 5px;\">\n                Capture ${index + 1} - ${item.timestamp.toLocaleString()}\n              </div>\n              <div style=\"font-size: 12px; color: #666;\">\n                ${item.description}\n              </div>\n            </div>\n          `).join('')}\n        </div>\n\n        <div style=\"margin-top: 30px; text-align: center; font-size: 10px; color: #888; border-top: 1px solid #ddd; padding-top: 15px;\">\n          Generated by Whiteboard Monitoring System | AI-Powered Educational Analysis\n        </div>\n      `;\n\n      document.body.appendChild(tempDiv);\n\n      // Convert to canvas and then PDF\n      const canvas = await html2canvas(tempDiv, {\n        scale: 2,\n        useCORS: true,\n        backgroundColor: '#ffffff',\n        width: 800,\n        height: tempDiv.scrollHeight\n      });\n\n      // Remove temporary div\n      document.body.removeChild(tempDiv);\n\n      // Create PDF\n      const pdf = new jsPDF('p', 'mm', 'a4');\n      const imgData = canvas.toDataURL('image/png');\n      \n      const pdfWidth = pdf.internal.pageSize.getWidth();\n      const pdfHeight = pdf.internal.pageSize.getHeight();\n      const imgWidth = canvas.width;\n      const imgHeight = canvas.height;\n      const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);\n      const imgX = (pdfWidth - imgWidth * ratio) / 2;\n      const imgY = 0;\n\n      pdf.addImage(imgData, 'PNG', imgX, imgY, imgWidth * ratio, imgHeight * ratio);\n\n      // Generate filename with current date and time\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);\n      const filename = `Whiteboard-Study-Guide-${timestamp}.pdf`;\n\n      // Save the PDF\n      pdf.save(filename);\n\n      setDetectedText(`📄 PDF study guide saved as: ${filename}`);\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      setDetectedText('❌ Error generating PDF. Please try again.');\n    }\n  };\n\n  // Ask questions about whiteboard content\n  const askQuestionAboutBoard = async () => {\n    if (!currentQuestion.trim()) {\n      alert('📝 Please enter a question first!');\n      return;\n    }\n\n    if (boardHistory.length === 0) {\n      alert('📝 No whiteboard content available. Start monitoring to capture board changes first!');\n      return;\n    }\n\n    setIsAnswering(true);\n    setQuestionResponse('');\n\n    try {\n      const genAI = new GoogleGenerativeAI(apiKey);\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      \n      // Create context from all captured content\n      const allContent = boardHistory.map((item, index) => \n        `**Board State ${index + 1}** (${item.timestamp.toLocaleString()}):\\n${item.description}`\n      ).join('\\n\\n');\n\n      const prompt = `\n        🎓 **CLASSROOM WHITEBOARD Q&A ASSISTANT**\n        \n        You are helping a student understand content from a classroom whiteboard session. \n        The student has a question about what was written on the board during class.\n\n        **Complete Whiteboard Content from the Session:**\n        ${allContent}\n\n        **Student's Question:**\n        \"${currentQuestion}\"\n\n        **Please provide:**\n        - A clear, educational answer based on the whiteboard content\n        - Reference specific parts of the board content when relevant\n        - If the question can't be answered from the available content, explain what information would be needed\n        - Use a helpful, teaching tone appropriate for a student\n\n        Answer the question as if you're a helpful teaching assistant who has access to everything that was written on the board during class.\n      `;\n\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const answer = response.text();\n\n      setQuestionResponse(answer);\n      setDetectedText('💬 Question answered based on whiteboard content!');\n    } catch (error) {\n      console.error('Error answering question:', error);\n      setQuestionResponse('❌ Sorry, I encountered an error while processing your question. Please try again.');\n      setDetectedText('❌ Error processing question. Please try again.');\n    } finally {\n      setIsAnswering(false);\n    }\n  };\n\n  // ==================== LIVE INTERACTIVE WHITEBOARD SYSTEM ====================\n\n  // Initialize live camera and hand tracking\n  const initializeLiveMode = async () => {\n    try {\n      setDetectedText('🚀 Initializing live interactive whiteboard...');\n\n      // Get camera access\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: { width: 1280, height: 720, facingMode: 'user' }\n      });\n      \n      setCameraStream(stream);\n      \n      if (liveVideoRef.current) {\n        liveVideoRef.current.srcObject = stream;\n        // Ensure video starts playing\n        await liveVideoRef.current.play();\n      }\n\n      // Initialize MediaPipe Hands\n      const handsInstance = new Hands({\n        locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`\n      });\n\n      handsInstance.setOptions({\n        maxNumHands: 2,\n        modelComplexity: 1,\n        minDetectionConfidence: 0.5,\n        minTrackingConfidence: 0.5\n      });\n\n      handsInstance.onResults(onHandsResults);\n      handsRef.current = handsInstance;\n\n      // Initialize camera utility\n      if (liveVideoRef.current) {\n        const cameraInstance = new Camera(liveVideoRef.current, {\n          onFrame: async () => {\n            if (handsRef.current && liveVideoRef.current) {\n              await handsRef.current.send({ image: liveVideoRef.current });\n            }\n          },\n          width: 1280,\n          height: 720\n        });\n        cameraInstance.start();\n        setCamera(cameraInstance);\n      }\n\n      // Initialize voice recognition\n      initializeVoiceRecognition();\n\n      setIsLiveMode(true);\n      setDetectedText('✅ Live interactive whiteboard ready! Say \"EDITH\" + your question, or use hand gestures to draw.');\n\n    } catch (error) {\n      console.error('Error initializing live mode:', error);\n      setDetectedText('❌ Error accessing camera. Please allow camera permissions.');\n    }\n  };\n\n  // Handle hand tracking results\n  const onHandsResults = useCallback((results) => {\n    if (!liveCanvasRef.current || !drawingCanvasRef.current) return;\n\n    const canvas = liveCanvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const drawingCanvas = drawingCanvasRef.current;\n    const drawingCtx = drawingCanvas.getContext('2d');\n\n    // Clear the overlay canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    if (results.multiHandLandmarks && results.multiHandLandmarks.length > 0) {\n      for (const landmarks of results.multiHandLandmarks) {\n        // Check for pinch gesture (thumb and index finger close)\n        const thumb = landmarks[4];\n        const indexFinger = landmarks[8];\n        const distance = Math.sqrt(\n          Math.pow(thumb.x - indexFinger.x, 2) + \n          Math.pow(thumb.y - indexFinger.y, 2)\n        );\n\n        // Check for open palm (all fingers extended)\n        const fingerTips = [8, 12, 16, 20]; // Index, middle, ring, pinky tips\n        const fingerBases = [6, 10, 14, 18]; // Finger bases\n        const fingersExtended = fingerTips.every((tip, index) => \n          landmarks[tip].y < landmarks[fingerBases[index]].y\n        );\n\n        if (distance < 0.05) {\n          // Pinch gesture - draw\n          setIsDrawing(true);\n          setIsErasing(false);\n          \n          // Draw blue dot at pinch location\n          const x = indexFinger.x * canvas.width;\n          const y = indexFinger.y * canvas.height;\n          \n          drawingCtx.fillStyle = '#4A90E2';\n          drawingCtx.beginPath();\n          drawingCtx.arc(x, y, 5, 0, 2 * Math.PI);\n          drawingCtx.fill();\n\n          // Add to drawing path\n          setDrawingPath(prev => [...prev, { x, y, type: 'draw' }]);\n\n        } else if (fingersExtended && landmarks[4].y < landmarks[3].y) {\n          // Open palm gesture - erase\n          setIsDrawing(false);\n          setIsErasing(true);\n          \n          // Erase in area around palm\n          const palmX = landmarks[9].x * canvas.width;\n          const palmY = landmarks[9].y * canvas.height;\n          \n          drawingCtx.globalCompositeOperation = 'destination-out';\n          drawingCtx.beginPath();\n          drawingCtx.arc(palmX, palmY, 30, 0, 2 * Math.PI);\n          drawingCtx.fill();\n          drawingCtx.globalCompositeOperation = 'source-over';\n\n        } else {\n          setIsDrawing(false);\n          setIsErasing(false);\n        }\n\n        // Draw hand landmarks for visual feedback\n        ctx.fillStyle = isDrawing ? '#4A90E2' : isErasing ? '#FF6B6B' : '#00FF00';\n        for (const landmark of landmarks) {\n          ctx.beginPath();\n          ctx.arc(landmark.x * canvas.width, landmark.y * canvas.height, 3, 0, 2 * Math.PI);\n          ctx.fill();\n        }\n      }\n    }\n  }, [isDrawing, isErasing]);\n\n  // Initialize voice recognition for \"EDITH\" commands\n  const initializeVoiceRecognition = () => {\n    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      \n      recognition.continuous = true;\n      recognition.interimResults = true;\n      recognition.lang = 'en-US';\n\n      recognition.onstart = () => {\n        setIsListening(true);\n        console.log('🎤 Voice recognition started - listening for \"EDITH\"...');\n      };\n\n      recognition.onresult = async (event) => {\n        const transcript = Array.from(event.results)\n          .map(result => result[0].transcript)\n          .join('');\n\n        console.log('Heard:', transcript);\n\n        // Check if transcript contains \"EDITH\"\n        if (transcript.toLowerCase().includes('edith')) {\n          const command = transcript.toLowerCase().replace('edith', '').trim();\n          if (command) {\n            setLastVoiceCommand(command);\n            await processVoiceCommand(command);\n          }\n        }\n      };\n\n      recognition.onerror = (event) => {\n        console.error('Speech recognition error:', event.error);\n      };\n\n      recognition.onend = () => {\n        setIsListening(false);\n        // Restart recognition to keep listening\n        if (isLiveMode) {\n          setTimeout(() => recognition.start(), 1000);\n        }\n      };\n\n      recognition.start();\n      setVoiceRecognition(recognition);\n    } else {\n      console.warn('Speech recognition not supported in this browser');\n      setDetectedText('⚠️ Voice recognition not supported in this browser');\n    }\n  };\n\n  // Process voice commands directed to EDITH\n  const processVoiceCommand = async (command) => {\n    try {\n      setDetectedText(`🎤 EDITH heard: \"${command}\"`);\n      \n      // Capture current whiteboard state\n      const currentDrawing = drawingCanvasRef.current?.toDataURL('image/jpeg', 0.8);\n      \n      const genAI = new GoogleGenerativeAI(apiKey);\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n      const prompt = `\n        🎓 **EDITH - Educational Digital Intelligence Teaching Helper**\n        \n        You are EDITH, an AI teaching assistant helping with live whiteboard work. \n        A student has asked you a question while working on their whiteboard.\n\n        **Student's Question/Command:** \"${command}\"\n\n        **Context:** This is a live interactive whiteboard session where the student is drawing and working on problems in real-time.\n\n        **Please provide:**\n        - A helpful, concise response (keep it brief for live interaction)\n        - Educational guidance if they're asking about math, science, or academic topics\n        - Encouragement and clear explanations\n        - If they're asking for help with a problem, guide them through the thinking process\n\n        **Tone:** Friendly, encouraging teacher who wants to help students learn and succeed.\n        \n        Respond as EDITH would - like a knowledgeable, patient teaching assistant.\n      `;\n\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const aiResponse = response.text();\n\n      setLiveAIResponse(aiResponse);\n      setDetectedText(`🤖 EDITH: ${aiResponse.substring(0, 100)}...`);\n\n      // Speak the response (optional)\n      if ('speechSynthesis' in window) {\n        const utterance = new SpeechSynthesisUtterance(aiResponse);\n        utterance.rate = 0.9;\n        utterance.pitch = 1.1;\n        window.speechSynthesis.speak(utterance);\n      }\n\n    } catch (error) {\n      console.error('Error processing voice command:', error);\n      setDetectedText('❌ EDITH encountered an error processing your request.');\n    }\n  };\n\n  // Stop live mode and cleanup\n  const stopLiveMode = () => {\n    if (cameraStream) {\n      cameraStream.getTracks().forEach(track => track.stop());\n      setCameraStream(null);\n    }\n    \n    if (camera) {\n      camera.stop();\n      setCamera(null);\n    }\n    \n    if (voiceRecognition) {\n      voiceRecognition.stop();\n      setVoiceRecognition(null);\n    }\n\n    setIsLiveMode(false);\n    setIsListening(false);\n    setDetectedText('📱 Live interactive whiteboard stopped.');\n  };\n\n  // Clear all drawings\n  const clearDrawings = () => {\n    if (drawingCanvasRef.current) {\n      const ctx = drawingCanvasRef.current.getContext('2d');\n      ctx.clearRect(0, 0, drawingCanvasRef.current.width, drawingCanvasRef.current.height);\n    }\n    setAllPaths([]);\n    setDrawingPath([]);\n  };\n\n  // Export board history for students\n  const exportBoardHistory = () => {\n    const historyData = boardHistory.map(item => ({\n      timestamp: item.timestamp.toISOString(),\n      description: item.description,\n      changes: item.changes,\n      // Note: Images would need to be handled separately for full export\n    }));\n    \n    const blob = new Blob([JSON.stringify(historyData, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `whiteboard-history-${new Date().toISOString().split('T')[0]}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  // Take a screenshot of current video frame\n  const takeScreenshot = async () => {\n    if (!videoRef.current || !canvasRef.current) return;\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Draw video frame to canvas\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Convert to blob and create screenshot object\n    canvas.toBlob((blob) => {\n      const screenshot = {\n        id: Date.now(),\n        blob: blob,\n        url: URL.createObjectURL(blob),\n        timestamp: video.currentTime,\n        detectedText: detectedText || 'No text detected'\n      };\n      setScreenshots(prev => [...prev, screenshot]);\n    }, 'image/png');\n  };\n\n  // Image preprocessing for better OCR\n  const preprocessImage = (canvas, ctx) => {\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n    \n    // Convert to grayscale and enhance contrast\n    for (let i = 0; i < data.length; i += 4) {\n      // Convert to grayscale\n      const gray = Math.round(0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]);\n      \n      // Enhance contrast - make text darker and background lighter\n      let enhanced;\n      if (gray < 128) {\n        // Dark pixels (likely text) - make darker\n        enhanced = Math.max(0, gray - 30);\n      } else {\n        // Light pixels (likely background) - make lighter\n        enhanced = Math.min(255, gray + 30);\n      }\n      \n      // Apply threshold for better text separation\n      const threshold = enhanced < 100 ? 0 : 255;\n      \n      data[i] = threshold;     // Red\n      data[i + 1] = threshold; // Green\n      data[i + 2] = threshold; // Blue\n      // Alpha channel (data[i + 3]) remains unchanged\n    }\n    \n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n  };\n\n  // OCR text detection with preprocessing\n  const detectText = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n\n    setIsDetecting(true);\n    setDetectedText('Initializing OCR...');\n\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      \n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      setDetectedText('Preprocessing image for handwriting...');\n\n      // Apply image preprocessing for better OCR\n      preprocessImage(canvas, ctx);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n\n      if (worker) {\n        setDetectedText('Running enhanced OCR...');\n        \n        // Convert processed canvas to data URL and run OCR\n        const dataURL = canvas.toDataURL('image/png');\n        \n        const { data: { text, confidence } } = await worker.recognize(dataURL, {\n          rectangle: { top: 0, left: 0, width: canvas.width, height: canvas.height }\n        });\n        \n        const cleanText = text.trim() || 'No text detected';\n        const confidenceText = confidence ? ` (Confidence: ${confidence.toFixed(1)}%)` : '';\n        setDetectedText(cleanText + confidenceText);\n        console.log('OCR Result:', cleanText, 'Confidence:', confidence);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n\n    } catch (error) {\n      console.error('Text detection failed:', error);\n      setDetectedText('Detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Enhanced OCR for messy handwriting\n  const detectTextEnhanced = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n\n    setIsDetecting(true);\n    setDetectedText('Initializing enhanced handwriting detection...');\n\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      \n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n\n      if (worker) {\n        // Try multiple preprocessing approaches\n        const results = [];\n        \n        // Method 1: High contrast black/white\n        setDetectedText('Method 1: High contrast processing...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        preprocessImage(canvas, ctx);\n        const dataURL1 = canvas.toDataURL('image/png');\n        \n        await worker.setParameters({\n          tessedit_pageseg_mode: '6', // Uniform block of text\n          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?()[]{}=-+*/\\'\"@#$%^&_|\\\\~ \\n'\n        });\n        \n        const result1 = await worker.recognize(dataURL1);\n        results.push({ method: 'High Contrast', text: result1.data.text, confidence: result1.data.confidence });\n\n        // Method 2: Single character mode for individual letters\n        setDetectedText('Method 2: Character-by-character analysis...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        \n        await worker.setParameters({\n          tessedit_pageseg_mode: '8', // Single character\n          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n        });\n        \n        const dataURL2 = canvas.toDataURL('image/png');\n        const result2 = await worker.recognize(dataURL2);\n        results.push({ method: 'Character Mode', text: result2.data.text, confidence: result2.data.confidence });\n\n        // Method 3: Raw text detection with minimal processing\n        setDetectedText('Method 3: Raw text detection...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        \n        await worker.setParameters({\n          tessedit_pageseg_mode: '13', // Raw line. Treat the image as a single text line\n          preserve_interword_spaces: '1'\n        });\n        \n        const dataURL3 = canvas.toDataURL('image/png');\n        const result3 = await worker.recognize(dataURL3);\n        results.push({ method: 'Raw Line', text: result3.data.text, confidence: result3.data.confidence });\n\n        // Find best result\n        const bestResult = results.reduce((best, current) => \n          current.confidence > best.confidence ? current : best\n        );\n\n        // Display all results\n        let displayText = `🏆 BEST (${bestResult.method}): ${bestResult.text}\\n\\n`;\n        results.forEach(result => {\n          displayText += `${result.method} (${result.confidence?.toFixed(1)}%): ${result.text}\\n\\n`;\n        });\n\n        setDetectedText(displayText);\n        console.log('Enhanced OCR Results:', results);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n\n    } catch (error) {\n      console.error('Enhanced text detection failed:', error);\n      setDetectedText('Enhanced detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // ChatGPT integration for better text interpretation\n  const enhanceWithChatGPT = async (imageDataURL, ocrText) => {\n    if (!apiKey) {\n      setChatGPTResult('Please enter your Gemini API key first');\n      return;\n    }\n\n    setIsUsingChatGPT(true);\n    setChatGPTResult('Sending to Gemini for analysis...');\n\n    try {\n      // Initialize Gemini\n      const genAI = new GoogleGenerativeAI(apiKey);\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n      // Convert the image data URL to the format Gemini expects\n      const base64Data = imageDataURL.split(',')[1];\n      \n      const imagePart = {\n        inlineData: {\n          data: base64Data,\n          mimeType: \"image/jpeg\"\n        }\n      };\n\n      const prompt = `I have handwritten text on a whiteboard that OCR is struggling to read accurately. The OCR detected this text: \"${ocrText}\". Please look at the image and provide a clean, corrected version of what is actually written. Focus on:\n1. Correcting OCR errors and misread characters\n2. Fixing spacing and formatting\n3. Interpreting unclear handwriting\n4. Organizing the text logically\n5. Only return the corrected text content, nothing else.`;\n\n      // Send request to Gemini\n      const result = await model.generateContent([prompt, imagePart]);\n      const response = await result.response;\n      const correctedText = response.text();\n\n      setChatGPTResult(correctedText);\n      \n      // Update the main detected text with Gemini result\n      setDetectedText(`🤖 Gemini Enhanced:\\n${correctedText}\\n\\n📝 Original OCR:\\n${ocrText}`);\n      \n    } catch (error) {\n      console.error('Gemini API error:', error);\n      let errorMessage = `Error: ${error.message}`;\n      \n      if (error.message.includes('API_KEY_INVALID')) {\n        errorMessage = `🔑 Authentication Error: Your Gemini API key appears to be invalid. Please check your configuration.`;\n      } else if (error.message.includes('RATE_LIMIT_EXCEEDED')) {\n        errorMessage = `⚠️ Rate Limit Exceeded: You've made too many requests to the Gemini API. Please wait a few minutes and try again.`;\n      }\n      \n      setChatGPTResult(errorMessage);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Gemini Scene Analysis Function\n  const analyzeSceneWithAI = async (imageDataURL) => {\n    const geminiApiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    \n    if (!geminiApiKey) {\n      setChatGPTResult('Gemini API key missing. Please check environment variables.');\n      setAiAnalysisResult('Gemini API key missing. Please check environment variables.');\n      setShowAnalysisPanel(true);\n      return;\n    }\n\n    // Rate limiting check\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall;\n    const minDelay = 2000; // 2 seconds between calls for Gemini\n    \n    if (timeSinceLastCall < minDelay) {\n      const waitTime = Math.ceil((minDelay - timeSinceLastCall) / 1000);\n      const waitMessage = `⏱️ Please wait ${waitTime} seconds before making another request.`;\n      setAiAnalysisResult(waitMessage);\n      setShowAnalysisPanel(true);\n      return;\n    }\n\n    setLastApiCall(now);\n    setIsUsingChatGPT(true);\n    setShowAnalysisPanel(true);\n\n    try {\n      // Show immediate feedback\n      const loadingMessage = `🤖 **Gemini AI Analysis Starting!**\n\n📸 **Image Received**: Processing your image now...\n🚀 **AI Status**: Connecting to Google Gemini Vision AI...\n⚡ **Processing**: This typically takes 5-15 seconds\n\n**What I'm analyzing:**\n• All visible text (handwritten, printed, signs)\n• People and their activities\n• Objects and equipment in the scene\n• Educational content and concepts\n• Overall scene description and context\n\nPlease wait while I provide a comprehensive analysis...`;\n\n      setChatGPTResult(loadingMessage);\n      setAiAnalysisResult(loadingMessage);\n      \n      // Initialize Gemini\n      const genAI = new GoogleGenerativeAI(geminiApiKey);\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n      // Prepare the prompt\n      const prompt = `Please provide a comprehensive analysis of this image. I want to understand everything that's happening in this scene. Please include:\n\n📋 **SCENE OVERVIEW:**\n- What type of environment is this? (classroom, office, meeting room, etc.)\n- What is the main focus or subject?\n\n🔍 **DETAILED OBSERVATIONS:**\n- All text visible (handwritten, printed, on boards, signs, etc.)\n- People present (count, what they're doing, clothing, gestures)\n- Objects and equipment (whiteboards, computers, furniture, tools)\n- Colors, lighting, and atmosphere\n\n📝 **TEXT CONTENT:**\n- Transcribe ALL visible text accurately\n- Note the context of each text element\n- Identify any diagrams, equations, or drawings\n\n🎯 **EDUCATIONAL CONTENT:**\n- If this appears to be educational, what subject/topic?\n- Key concepts being taught or discussed\n- Any visual aids or teaching materials\n\n📊 **SUMMARY:**\n- Main purpose/activity in this scene\n- Most important information conveyed\n- Overall assessment of what's happening\n\nBe thorough and detailed - I want to understand everything about this scene!`;\n\n      // Convert the image data URL to the format Gemini expects\n      const base64Data = imageDataURL.split(',')[1];\n      \n      const imagePart = {\n        inlineData: {\n          data: base64Data,\n          mimeType: \"image/jpeg\"\n        }\n      };\n\n      // Send request to Gemini\n      const result = await model.generateContent([prompt, imagePart]);\n      const response = await result.response;\n      const analysis = response.text();\n\n      const finalMessage = `🎉 **Gemini Analysis Complete!**\n\n${analysis}\n\n---\n*Analysis completed by Google Gemini Vision AI*`;\n\n      setChatGPTResult(finalMessage);\n      setAiAnalysisResult(finalMessage);\n      setDetectedText(`🤖 AI Analysis Complete! Full results available in analysis panel.`);\n      \n    } catch (error) {\n      console.error('Gemini API error:', error);\n      let errorMsg = `❌ **Error**: ${error.message}`;\n      \n      if (error.message.includes('API_KEY_INVALID')) {\n        errorMsg = `🔑 **API Key Error**: Your Gemini API key is invalid. Please check your configuration.`;\n      } else if (error.message.includes('RATE_LIMIT_EXCEEDED')) {\n        errorMsg = `⚠️ **Rate Limit**: You've made too many requests. Please wait a moment and try again.`;\n      } else if (error.message.includes('SAFETY')) {\n        errorMsg = `🛡️ **Safety Filter**: The image was blocked by safety filters. Please try a different image.`;\n      } else {\n        errorMsg += `\n\n**Troubleshooting Tips:**\n• Check your internet connection\n• Verify your Gemini API key is correct\n• Try again in a few moments\n• Contact support if the issue persists`;\n      }\n      \n      setChatGPTResult(errorMsg);\n      setAiAnalysisResult(errorMsg);\n      setShowAnalysisPanel(true);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Gemini Q&A about analyzed content\n  const askQuestionAboutContent = async () => {\n    const geminiApiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    \n    if (!geminiApiKey) {\n      alert('Gemini API key missing. Please check environment variables.');\n      return;\n    }\n    \n    if (!userQuestion.trim()) {\n      alert('Please enter a question');\n      return;\n    }\n    \n    if (!aiAnalysisResult) {\n      alert('Please analyze some content first before asking questions');\n      return;\n    }\n\n    // Rate limiting check\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall;\n    const minDelay = 2000; // 2 seconds for Q&A with Gemini\n    \n    if (timeSinceLastCall < minDelay) {\n      const waitTime = Math.ceil((minDelay - timeSinceLastCall) / 1000);\n      alert(`Please wait ${waitTime} seconds before asking another question.`);\n      return;\n    }\n\n    setLastApiCall(now);\n    setIsUsingChatGPT(true);\n\n    try {\n      // Create context-aware message for Gemini\n      const contextualQuestion = `Based on my previous image analysis, please answer this question:\n\nPREVIOUS ANALYSIS CONTEXT:\n${aiAnalysisResult}\n\nCONVERSATION HISTORY:\n${conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nCURRENT QUESTION: ${userQuestion}\n\nPlease provide a helpful, detailed answer based on the analysis and conversation context above. Be specific and reference the visual content when relevant.`;\n\n      // Initialize Gemini\n      const genAI = new GoogleGenerativeAI(geminiApiKey);\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n      // Send request to Gemini\n      const result = await model.generateContent(contextualQuestion);\n      const response = await result.response;\n      const answer = response.text();\n\n      // Add to conversation history\n      const newConversation = [\n        ...conversationHistory,\n        { role: \"user\", content: userQuestion },\n        { role: \"assistant\", content: answer }\n      ];\n      \n      // Keep only last 8 messages (4 Q&A pairs) to manage context length\n      const trimmedHistory = newConversation.slice(-8);\n      setConversationHistory(trimmedHistory);\n      \n      // Clear the input\n      setUserQuestion('');\n      \n    } catch (error) {\n      console.error('Gemini API error:', error);\n      let errorMessage = `Error: ${error.message}`;\n      \n      if (error.message.includes('API_KEY_INVALID')) {\n        errorMessage = `🔑 **API Key Error**: Your Gemini API key is invalid. Please check your configuration.`;\n      } else if (error.message.includes('RATE_LIMIT_EXCEEDED')) {\n        errorMessage = `⚠️ **Rate Limit**: You've made too many requests. Please wait a moment and try again.`;\n      } else if (error.message.includes('SAFETY')) {\n        errorMessage = `🛡️ **Safety Filter**: Your question was blocked by safety filters. Please rephrase your question.`;\n      }\n      \n      alert(errorMessage);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Full Scene Analysis - capture frame and analyze everything with AI Vision\n  const analyzeCurrentScene = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n\n    setIsDetecting(true);\n    setDetectedText('📸 Capturing frame for AI analysis...');\n\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      \n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw current video frame without any preprocessing for AI Vision\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      \n      // Convert to data URL for AI Vision API\n      const dataURL = canvas.toDataURL('image/jpeg', 0.8); // Use JPEG for smaller size\n      \n      // Run AI Vision analysis\n      await analyzeSceneWithAI(dataURL);\n      \n    } catch (error) {\n      console.error('Scene analysis failed:', error);\n      setDetectedText('Scene analysis failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Enhanced OCR with ChatGPT integration\n  const detectTextWithChatGPT = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n\n    setIsDetecting(true);\n    setDetectedText('Running OCR + ChatGPT analysis...');\n\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      \n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      setDetectedText('Preprocessing image...');\n\n      // Apply image preprocessing for better OCR\n      preprocessImage(canvas, ctx);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n\n      if (worker) {\n        setDetectedText('Running OCR...');\n        \n        // Convert processed canvas to data URL\n        const dataURL = canvas.toDataURL('image/png');\n        \n        const { data: { text, confidence } } = await worker.recognize(dataURL);\n        const ocrText = text.trim() || 'No text detected';\n        \n        setDetectedText(`OCR Result: ${ocrText}\\n\\nSending to ChatGPT for enhancement...`);\n        \n        // Send to ChatGPT for enhancement\n        await enhanceWithChatGPT(dataURL, ocrText);\n        \n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n\n    } catch (error) {\n      console.error('OCR + ChatGPT detection failed:', error);\n      setDetectedText('Detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Auto-detect text and take screenshot\n  const detectAndCapture = async () => {\n    await detectText();\n    setTimeout(() => {\n      takeScreenshot();\n    }, 500); // Small delay to ensure text is updated\n  };\n\n  // Clear all screenshots\n  const clearScreenshots = () => {\n    screenshots.forEach(screenshot => {\n      if (screenshot.url) {\n        URL.revokeObjectURL(screenshot.url);\n      }\n    });\n    setScreenshots([]);\n  };\n\n  // Backend API Integration Functions\n  const API_BASE_URL = 'http://localhost:3000';\n\n  // Upload video to backend\n  const uploadVideoToBackend = async (videoFile) => {\n    const formData = new FormData();\n    formData.append('video', videoFile);\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/upload`, {\n        method: 'POST',\n        body: formData\n      });\n\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend upload error:', error);\n      throw error;\n    }\n  };\n\n  // Process video with backend\n  const processVideoWithBackend = async (videoPath, title = 'Untitled Lecture') => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ingest`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          videoPath,\n          title\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Processing failed: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend processing error:', error);\n      throw error;\n    }\n  };\n\n  // Query processed lecture\n  const queryLecture = async (lectureId, query) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          lectureId,\n          query\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Query failed: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend query error:', error);\n      throw error;\n    }\n  };\n\n  // Handle querying the backend\n  const handleBackendQuery = async () => {\n    if (!lectureId || !queryText.trim()) {\n      setQueryResult('Please ensure video is processed and enter a query');\n      return;\n    }\n\n    setIsQuerying(true);\n    setQueryResult('Analyzing lecture content...');\n\n    try {\n      const result = await queryLecture(lectureId, queryText.trim());\n      console.log('Query result:', result);\n      \n      let formattedResult = `Answer: ${result.answer}\\n\\n`;\n      \n      if (result.links && result.links.length > 0) {\n        formattedResult += 'Relevant timestamps:\\n';\n        result.links.forEach(link => {\n          formattedResult += `• ${link.timecode}: ${link.text}\\n`;\n        });\n        formattedResult += '\\n';\n      }\n      \n      if (result.flashcards && result.flashcards.length > 0) {\n        formattedResult += 'Generated flashcard:\\n';\n        result.flashcards.forEach(card => {\n          formattedResult += `Q: ${card.question}\\nA: ${card.answer}\\n`;\n        });\n      }\n      \n      setQueryResult(formattedResult);\n    } catch (error) {\n      console.error('Query failed:', error);\n      setQueryResult(`Query failed: ${error.message}`);\n    } finally {\n      setIsQuerying(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>🎯 AI Scene Analyzer</h1>\n        <p>Upload videos and analyze everything with AI Vision + OCR text detection</p>\n        \n        {/* Live Interactive Whiteboard Toggle */}\n        <div className=\"live-mode-toggle\">\n          <button \n            onClick={isLiveMode ? stopLiveMode : initializeLiveMode}\n            className={`btn ${isLiveMode ? 'danger' : 'primary'} live-toggle`}\n          >\n            {isLiveMode ? '🛑 Exit Live Mode' : '🎥 Start Live Interactive Whiteboard'}\n          </button>\n          {isListening && (\n            <div className=\"listening-indicator\">\n              🎤 Listening for \"EDITH\"...\n            </div>\n          )}\n        </div>\n      </header>\n\n      {/* Live Interactive Whiteboard Mode */}\n      {isLiveMode && (\n        <div className=\"live-whiteboard-container\">\n          <div className=\"live-main-area\">\n            <div className=\"live-video-container\">\n              <video \n                ref={liveVideoRef}\n                autoPlay\n                muted\n                playsInline\n                className=\"live-video\"\n                width={1280}\n                height={720}\n                style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n              />\n              <canvas \n                ref={liveCanvasRef}\n                className=\"live-overlay-canvas\"\n                width={1280}\n                height={720}\n              />\n              <canvas \n                ref={drawingCanvasRef}\n                className=\"drawing-canvas\"\n                width={1280}\n                height={720}\n              />\n            </div>\n            \n            <div className=\"live-controls\">\n              <div className=\"gesture-status\">\n                <div className={`status-item ${isDrawing ? 'active' : ''}`}>\n                  ✊ Pinch to Draw\n                </div>\n                <div className={`status-item ${isErasing ? 'active' : ''}`}>\n                  ✋ Open Palm to Erase\n                </div>\n                <button onClick={clearDrawings} className=\"btn secondary small\">\n                  🗑️ Clear All\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"live-sidebar\">\n            <div className=\"live-ai-assistant\">\n              <h3>🤖 EDITH - AI Teaching Assistant</h3>\n              <div className=\"voice-status\">\n                <div className={`voice-indicator ${isListening ? 'listening' : ''}`}>\n                  {isListening ? '🎤 Say \"EDITH\" + your question' : '🔇 Voice recognition inactive'}\n                </div>\n              </div>\n              \n              {lastVoiceCommand && (\n                <div className=\"last-command\">\n                  <strong>Last Command:</strong> \"{lastVoiceCommand}\"\n                </div>\n              )}\n              \n              {liveAIResponse && (\n                <div className=\"live-ai-response\">\n                  <h4>🎓 EDITH's Response:</h4>\n                  <div className=\"response-text\">\n                    {liveAIResponse}\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"live-summary-section\">\n                <h4>📚 Live Session Notes</h4>\n                <div className=\"live-notes\">\n                  <p>• Draw with pinch gesture (blue)</p>\n                  <p>• Erase with open palm</p>\n                  <p>• Ask EDITH questions by voice</p>\n                  <p>• Get real-time AI assistance</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <main className=\"App-main\">\n        {/* Only show traditional interface when not in live mode */}\n        {!isLiveMode && (\n          <>\n        {/* File Upload */}\n        <div className=\"upload-section\">\n          <label htmlFor=\"video-upload\" className=\"upload-label\">\n            Choose Video File\n          </label>\n          <input\n            id=\"video-upload\"\n            type=\"file\"\n            accept=\"video/*\"\n            onChange={handleFileUpload}\n            className=\"file-input\"\n          />\n          {!videoFile && (\n            <div className=\"upload-prompt\">\n              <p>📹 Select a video file to get started</p>\n              <p><small>Supported formats: MP4, WebM, AVI</small></p>\n            </div>\n          )}\n        </div>\n\n        {/* Video Player */}\n        {videoURL && (\n          <div className=\"video-section\">\n            {/* API Key Input */}\n            <div className=\"api-config\">\n              <h3>🤖 Gemini AI-Powered Analysis</h3>\n              <div className=\"api-input-group\">\n                <input\n                  type=\"password\"\n                  placeholder=\"Enter your Google Gemini API key...\"\n                  value={apiKey}\n                  onChange={(e) => setApiKey(e.target.value)}\n                  className=\"api-input\"\n                />\n                <small className=\"api-help\">\n                  Get your API key from <a href=\"https://aistudio.google.com/app/apikey\" target=\"_blank\" rel=\"noopener noreferrer\">Google AI Studio</a>\n                  <br />\n                  <strong>Features:</strong> Vision AI Analysis + Video Analysis + Q&A Chat\n                </small>\n              </div>\n            </div>\n\n            {/* Backend Integration Toggle */}\n            <div className=\"backend-config\">\n              <h3>🚀 Backend Analysis</h3>\n              <div className=\"backend-toggle\">\n                <label className=\"toggle-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={isUsingBackend}\n                    onChange={(e) => setIsUsingBackend(e.target.checked)}\n                  />\n                  Use backend API for full lecture analysis\n                </label>\n                <small className=\"backend-help\">\n                  Enable this to upload videos to the backend for comprehensive analysis including board change detection and Q&A capabilities\n                </small>\n              </div>\n              \n              {/* Upload/Processing Status */}\n              {uploadProgress && (\n                <div className=\"status-message upload-status\">\n                  {uploadProgress}\n                </div>\n              )}\n              \n              {processingStatus && (\n                <div className=\"status-message processing-status\">\n                  {processingStatus}\n                </div>\n              )}\n              \n              {/* Query Interface */}\n              {lectureId && (\n                <div className=\"query-section\">\n                  <h4>🔍 Ask Questions About This Lecture</h4>\n                  <div className=\"query-input-group\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Ask a question about the lecture content...\"\n                      value={queryText}\n                      onChange={(e) => setQueryText(e.target.value)}\n                      className=\"query-input\"\n                      onKeyPress={(e) => e.key === 'Enter' && handleBackendQuery()}\n                    />\n                    <button\n                      onClick={handleBackendQuery}\n                      disabled={isQuerying || !queryText.trim()}\n                      className=\"query-button\"\n                    >\n                      {isQuerying ? 'Analyzing...' : 'Ask Question'}\n                    </button>\n                  </div>\n                  \n                  {queryResult && (\n                    <div className=\"query-result\">\n                      <h5>📋 Analysis Result:</h5>\n                      <pre className=\"result-text\">{queryResult}</pre>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"video-container\">\n              <video\n                ref={videoRef}\n                src={videoURL}\n                controls\n                className=\"video-player\"\n              >\n                Your browser does not support the video tag.\n              </video>\n              <canvas ref={canvasRef} style={{ display: 'none' }} />\n            </div>\n\n            {/* Controls */}\n            <div className=\"controls\">\n              <button onClick={takeScreenshot} className=\"btn primary\">\n                📸 Screenshot\n              </button>\n              <button \n                onClick={analyzeCurrentScene} \n                disabled={isDetecting || !apiKey}\n                className=\"btn ai-vision primary-action\"\n              >\n                {isDetecting ? '🔄 Analyzing with AI...' : '🔍 Analyze Full Scene with AI'}\n              </button>\n              <button \n                onClick={analyzeEntireVideo} \n                disabled={isAnalyzingVideo || !apiKey || !videoRef.current}\n                className=\"btn ai-video comprehensive-analysis\"\n              >\n                {isAnalyzingVideo ? '🎬 Analyzing Video...' : '🎯 Comprehensive Video Analysis'}\n              </button>\n              <button \n                onClick={initializeOCR} \n                disabled={isDetecting}\n                className=\"btn info\"\n              >\n                🔧 Initialize OCR\n              </button>\n              <button \n                onClick={detectAndCapture} \n                disabled={isDetecting}\n                className=\"btn highlight\"\n              >\n                {isDetecting ? '⚡ Processing...' : '⚡ Detect & Capture'}\n              </button>\n              {screenshots.length > 0 && (\n                <button onClick={clearScreenshots} className=\"btn danger\">\n                  🗑️ Clear All ({screenshots.length})\n                </button>\n              )}\n              <button \n                onClick={() => {\n                  alert(`API Status:\\n- API Key: ${apiKey ? 'Present' : 'Missing'}\\n- Connection: Testing...\\n\\nCheck console for details.`);\n                  console.log('API Key Check:', { \n                    hasKey: !!apiKey, \n                    keyLength: apiKey?.length,\n                    keyStart: apiKey?.substring(0, 15) + '...',\n                    timestamp: new Date().toISOString()\n                  });\n                }}\n                className=\"btn info\"\n                title=\"Test API connection and debug\"\n              >\n                🔧 Test API\n              </button>\n            </div>\n\n            {/* Continuous Whiteboard Monitoring Section */}\n            <div className=\"monitoring-section\">\n              <h3>🔄 Continuous Whiteboard Monitoring</h3>\n              <p className=\"monitoring-description\">\n                Perfect for classrooms! Automatically captures whiteboard changes so students never miss content.\n              </p>\n              \n              <div className=\"monitoring-controls\">\n                <button \n                  onClick={isMonitoring ? stopMonitoring : startMonitoring}\n                  className={`btn ${isMonitoring ? 'danger' : 'success'} monitoring-toggle`}\n                  disabled={!videoRef.current}\n                >\n                  {isMonitoring ? '⏹️ Stop Monitoring' : '▶️ Start Monitoring'}\n                </button>\n                \n                <div className=\"monitoring-settings\">\n                  <label>\n                    Check Frequency: \n                    <select \n                      value={monitoringFrequency} \n                      onChange={(e) => setMonitoringFrequency(Number(e.target.value))}\n                      disabled={isMonitoring}\n                    >\n                      <option value={3000}>Every 3 seconds</option>\n                      <option value={5000}>Every 5 seconds</option>\n                      <option value={10000}>Every 10 seconds</option>\n                      <option value={30000}>Every 30 seconds</option>\n                    </select>\n                  </label>\n                  \n                  <label>\n                    Change Sensitivity: \n                    <select \n                      value={changeThreshold} \n                      onChange={(e) => setChangeThreshold(Number(e.target.value))}\n                      disabled={isMonitoring}\n                    >\n                      <option value={0.05}>Very High (5%)</option>\n                      <option value={0.10}>High (10%)</option>\n                      <option value={0.15}>Medium (15%)</option>\n                      <option value={0.25}>Low (25%)</option>\n                    </select>\n                  </label>\n                </div>\n              </div>\n              \n              <div className=\"monitoring-status\">\n                {isMonitoring && (\n                  <div className=\"status-active\">\n                    <span className=\"status-indicator\">🟢</span>\n                    <span>Monitoring Active - {boardHistory.length} captures</span>\n                    {lastChangeDetected && (\n                      <span className=\"last-change\">\n                        Last change: {lastChangeDetected.toLocaleTimeString()}\n                      </span>\n                    )}\n                  </div>\n                )}\n                {!isMonitoring && boardHistory.length > 0 && (\n                  <div className=\"status-inactive\">\n                    <span className=\"status-indicator\">⚪</span>\n                    <span>Monitoring Stopped - {boardHistory.length} captures saved</span>\n                  </div>\n                )}\n              </div>\n              \n              {boardHistory.length > 0 && (\n                <div className=\"monitoring-actions\">\n                  <button \n                    onClick={() => setShowMonitoringPanel(!showMonitoringPanel)}\n                    className=\"btn info\"\n                  >\n                    {showMonitoringPanel ? '📁 Hide History' : '📋 View History'} ({boardHistory.length})\n                  </button>\n                  <button \n                    onClick={generateBoardSummary}\n                    className=\"btn primary\"\n                    disabled={isGeneratingSummary}\n                  >\n                    {isGeneratingSummary ? '🔄 Generating...' : '📚 Generate Summary'}\n                  </button>\n                  <button \n                    onClick={exportBoardHistory}\n                    className=\"btn secondary\"\n                  >\n                    📤 Export History\n                  </button>\n                  <button \n                    onClick={clearBoardHistory}\n                    className=\"btn danger\"\n                  >\n                    🗑️ Clear History\n                  </button>\n                </div>\n              )}\n            </div>\n\n            {/* Board Summary Section */}\n            {boardHistory.length > 0 && (\n              <div className=\"summary-section\">\n                <h3>📚 Whiteboard Session Summary</h3>\n                {boardSummary ? (\n                  <div className=\"summary-result\">\n                    <div className=\"summary-content\">\n                      {boardSummary.split('\\n').map((line, index) => (\n                        <p key={index}>{line}</p>\n                      ))}\n                    </div>\n                    <div className=\"summary-actions\">\n                      <button \n                        onClick={() => {\n                          navigator.clipboard.writeText(boardSummary);\n                          alert('📋 Summary copied to clipboard!');\n                        }}\n                        className=\"btn secondary small\"\n                      >\n                        📋 Copy Summary\n                      </button>\n                      <button \n                        onClick={generatePDFStudyGuide}\n                        className=\"btn primary small\"\n                      >\n                        📄 Download PDF Study Guide\n                      </button>\n                      <button \n                        onClick={() => setBoardSummary('')}\n                        className=\"btn danger small\"\n                      >\n                        🗑️ Clear\n                      </button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"summary-placeholder\">\n                    <p>📝 Click \"Generate Summary\" to get an AI-powered overview of all whiteboard content captured during this session.</p>\n                    <p>Perfect for reviewing key concepts, formulas, and lesson progression!</p>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Q&A Section */}\n            {boardHistory.length > 0 && (\n              <div className=\"qa-section\">\n                <h3>💬 Ask Questions About Whiteboard Content</h3>\n                <div className=\"question-input\">\n                  <input \n                    type=\"text\"\n                    value={currentQuestion}\n                    onChange={(e) => setCurrentQuestion(e.target.value)}\n                    placeholder=\"Ask a question about what was written on the board...\"\n                    onKeyPress={(e) => e.key === 'Enter' && askQuestionAboutBoard()}\n                    disabled={isAnswering}\n                  />\n                  <button \n                    onClick={askQuestionAboutBoard}\n                    className=\"btn primary\"\n                    disabled={isAnswering || !currentQuestion.trim()}\n                  >\n                    {isAnswering ? '🤔 Thinking...' : '❓ Ask'}\n                  </button>\n                </div>\n                \n                {questionResponse && (\n                  <div className=\"qa-response\">\n                    <h4>🎓 Answer:</h4>\n                    <div className=\"response-content\">\n                      {questionResponse.split('\\n').map((line, index) => (\n                        <p key={index}>{line}</p>\n                      ))}\n                    </div>\n                    <div className=\"response-actions\">\n                      <button \n                        onClick={() => {\n                          navigator.clipboard.writeText(`Q: ${currentQuestion}\\nA: ${questionResponse}`);\n                          alert('📋 Q&A copied to clipboard!');\n                        }}\n                        className=\"btn secondary small\"\n                      >\n                        📋 Copy Q&A\n                      </button>\n                      <button \n                        onClick={() => {\n                          setQuestionResponse('');\n                          setCurrentQuestion('');\n                        }}\n                        className=\"btn danger small\"\n                      >\n                        🗑️ Clear\n                      </button>\n                    </div>\n                  </div>\n                )}\n                \n                {!questionResponse && (\n                  <div className=\"qa-placeholder\">\n                    <p>💡 Examples of questions you can ask:</p>\n                    <ul>\n                      <li>\"What formulas were written on the board?\"</li>\n                      <li>\"Can you explain the diagram that was drawn?\"</li>\n                      <li>\"What were the main points from today's lesson?\"</li>\n                      <li>\"What examples were given for this concept?\"</li>\n                    </ul>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Before/After Capture Section */}\n            <div className=\"capture-section\">\n              <h3>📋 Before/After Whiteboard Capture</h3>\n              <div className=\"capture-status\">\n                {captureMode === 'waiting' && (\n                  <p>🎯 Ready to capture whiteboard states. Start by capturing the BEFORE state.</p>\n                )}\n                {captureMode === 'before-captured' && (\n                  <p>✅ Before state captured! Make your changes to the whiteboard, then capture the AFTER state.</p>\n                )}\n                {captureMode === 'ready-for-after' && (\n                  <p>🎊 Both states captured! Scroll down to view the comparison analysis.</p>\n                )}\n              </div>\n              \n              <div className=\"capture-buttons\">\n                <button \n                  onClick={captureBeforeState}\n                  disabled={isDetecting}\n                  className=\"btn secondary\"\n                  title=\"Capture the current state before making changes\"\n                >\n                  📸 Capture BEFORE\n                </button>\n                <button \n                  onClick={captureAfterState}\n                  disabled={isDetecting || !beforeCapture}\n                  className=\"btn secondary\"\n                  title=\"Capture the state after making changes\"\n                >\n                  📸 Capture AFTER\n                </button>\n                <button \n                  onClick={resetCaptures}\n                  disabled={!beforeCapture && !afterCapture}\n                  className=\"btn danger\"\n                  title=\"Reset and start over with new captures\"\n                >\n                  🔄 Reset Captures\n                </button>\n              </div>\n            </div>\n\n            {/* Detected Text Display */}\n            <div className=\"text-detection\">\n              <h3>🔍 Detected Text:</h3>\n              <div className=\"detected-text-box\">\n                {detectedText || 'Click \"Detect Text\" to analyze the current frame'}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Screenshots Gallery */}\n        {/* AI Vision Analysis Panel */}\n        {showAnalysisPanel && aiAnalysisResult && (\n          <div className=\"ai-analysis-panel\">\n            <div className=\"panel-header\">\n              <h3>🤖 Gemini Vision Analysis Results</h3>\n              <button \n                onClick={() => setShowAnalysisPanel(false)}\n                className=\"close-panel-btn\"\n              >\n                ✕\n              </button>\n            </div>\n            <div className=\"analysis-content\">\n              <div className=\"analysis-section\">\n                <h4>📊 Scene Analysis</h4>\n                <pre className=\"analysis-text\">{aiAnalysisResult}</pre>\n              </div>\n              \n              {/* AI Agent Q&A Interface */}\n              <div className=\"qa-section\">\n                <h4>🤖 Ask Questions About This Content</h4>\n                <div className=\"qa-input-group\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Ask a question about what you see in the image...\"\n                    value={userQuestion}\n                    onChange={(e) => setUserQuestion(e.target.value)}\n                    className=\"qa-input\"\n                    onKeyPress={(e) => e.key === 'Enter' && askQuestionAboutContent()}\n                    disabled={isUsingChatGPT}\n                  />\n                  <button\n                    onClick={askQuestionAboutContent}\n                    disabled={isUsingChatGPT || !userQuestion.trim()}\n                    className=\"qa-button\"\n                  >\n                    {isUsingChatGPT ? '🤔 Thinking...' : '💬 Ask'}\n                  </button>\n                </div>\n                \n                {/* Conversation History */}\n                {conversationHistory.length > 0 && (\n                  <div className=\"conversation-history\">\n                    <h5>💭 Conversation</h5>\n                    <div className=\"conversation-messages\">\n                      {conversationHistory.map((message, index) => (\n                        <div \n                          key={index} \n                          className={`message ${message.role === 'user' ? 'user-message' : 'ai-message'}`}\n                        >\n                          <div className=\"message-role\">\n                            {message.role === 'user' ? '👤 You:' : '🤖 AI:'}\n                          </div>\n                          <div className=\"message-content\">{message.content}</div>\n                        </div>\n                      ))}\n                    </div>\n                    <button \n                      onClick={() => setConversationHistory([])}\n                      className=\"clear-conversation-btn\"\n                    >\n                      🗑️ Clear Conversation\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Comprehensive Video Analysis Panel */}\n        {showVideoAnalysis && videoAnalysisResult && (\n          <div className=\"video-analysis-panel\">\n            <div className=\"panel-header\">\n              <h3>🎬 Comprehensive Video Analysis</h3>\n              <button \n                onClick={() => setShowVideoAnalysis(false)}\n                className=\"close-panel-btn\"\n              >\n                ✕\n              </button>\n            </div>\n            <div className=\"analysis-content\">\n              <div className=\"analysis-section\">\n                <h4>📊 Complete Video Analysis</h4>\n                <pre className=\"video-analysis-text\">{videoAnalysisResult}</pre>\n              </div>\n              \n              {/* Sampled Frames Display */}\n              {videoFramesSampled.length > 0 && (\n                <div className=\"sampled-frames-section\">\n                  <h4>📸 Analyzed Video Frames ({videoFramesSampled.length} samples)</h4>\n                  <div className=\"frames-grid\">\n                    {videoFramesSampled.map((frame, index) => (\n                      <div key={index} className=\"frame-sample\">\n                        <img src={frame.image} alt={`Frame ${frame.frameNumber}`} />\n                        <div className=\"frame-info\">\n                          <span>Frame {frame.frameNumber}</span>\n                          <span>{frame.timestamp.toFixed(1)}s</span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Whiteboard Monitoring History Panel */}\n        {showMonitoringPanel && boardHistory.length > 0 && (\n          <div className=\"monitoring-panel\">\n            <div className=\"panel-header\">\n              <h3>📋 Whiteboard History - {boardHistory.length} Captures</h3>\n              <button \n                onClick={() => setShowMonitoringPanel(false)}\n                className=\"close-panel-btn\"\n              >\n                ✕\n              </button>\n            </div>\n            <div className=\"monitoring-content\">\n              <div className=\"monitoring-stats\">\n                <p><strong>📊 Session Stats:</strong></p>\n                <ul>\n                  <li>Total Captures: {boardHistory.length}</li>\n                  <li>Monitoring Status: {isMonitoring ? '🟢 Active' : '⚪ Stopped'}</li>\n                  <li>Check Frequency: Every {monitoringFrequency/1000}s</li>\n                  <li>Change Threshold: {(changeThreshold * 100).toFixed(0)}%</li>\n                  {lastChangeDetected && <li>Last Change: {lastChangeDetected.toLocaleString()}</li>}\n                </ul>\n              </div>\n              \n              <div className=\"board-history-grid\">\n                {boardHistory.slice().reverse().map((item, index) => (\n                  <div key={item.id} className=\"history-item\">\n                    <div className=\"history-header\">\n                      <span className=\"history-time\">\n                        {item.timestamp.toLocaleTimeString()}\n                      </span>\n                      <span className=\"history-change\">\n                        {item.changes}\n                      </span>\n                    </div>\n                    <div className=\"history-image\">\n                      <img \n                        src={item.image} \n                        alt={`Board state at ${item.timestamp.toLocaleTimeString()}`}\n                        className=\"board-thumbnail\"\n                      />\n                    </div>\n                    <div className=\"history-description\">\n                      <h4>📝 Content Analysis:</h4>\n                      <p>{item.description}</p>\n                    </div>\n                    <div className=\"history-actions\">\n                      <button \n                        onClick={() => {\n                          const link = document.createElement('a');\n                          link.href = item.image;\n                          link.download = `whiteboard-${item.timestamp.toISOString()}.jpg`;\n                          link.click();\n                        }}\n                        className=\"btn small secondary\"\n                      >\n                        💾 Download\n                      </button>\n                      <button \n                        onClick={() => {\n                          navigator.clipboard.writeText(item.description);\n                          alert('Description copied to clipboard!');\n                        }}\n                        className=\"btn small info\"\n                      >\n                        📋 Copy Text\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              {boardHistory.length === 0 && (\n                <div className=\"no-history\">\n                  <p>📝 No whiteboard changes captured yet.</p>\n                  <p>Start monitoring to automatically capture board content changes!</p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Screenshots Gallery */}\n        {screenshots.length > 0 && (\n          <div className=\"gallery-section\">\n            <h3>📱 Screenshots ({screenshots.length})</h3>\n            <div className=\"gallery\">\n              {screenshots.map((screenshot) => (\n                <div key={screenshot.id} className=\"screenshot-item\">\n                  <img \n                    src={screenshot.url} \n                    alt={`Screenshot at ${screenshot.timestamp.toFixed(1)}s`}\n                    className=\"screenshot-image\"\n                  />\n                  <div className=\"screenshot-info\">\n                    <p><strong>⏱️ Time:</strong> {screenshot.timestamp.toFixed(1)}s</p>\n                    <p><strong>📝 Text:</strong> {screenshot.detectedText}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAChE,OAAOC,SAAS,MAAM,cAAc;AACpC,SAASC,kBAAkB,QAAQ,uBAAuB;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,aAAa;AACrC,SAASC,KAAK,QAAQ,kBAAkB;AACxC,SAASC,MAAM,QAAQ,yBAAyB;AAChD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACyB,SAAS,EAAEC,YAAY,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC2B,MAAM,EAAEC,SAAS,CAAC,GAAG5B,QAAQ,CAAC6B,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,EAAE,CAAC;EAChF,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGjC,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACkC,aAAa,EAAEC,gBAAgB,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;;EAEtD;EACA,MAAM,CAACoC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACsC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;;EAEjE;EACA,MAAM,CAACwC,WAAW,EAAEC,cAAc,CAAC,GAAGzC,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAAC0C,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG3C,QAAQ,CAAC,CAAC,CAAC;EAC7D,MAAM,CAAC4C,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG7C,QAAQ,CAAC,EAAE,CAAC;EAClE,MAAM,CAAC8C,YAAY,EAAEC,eAAe,CAAC,GAAG/C,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACgD,YAAY,EAAEC,eAAe,CAAC,GAAGjD,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;;EAE/D;EACA,MAAM,CAACkD,aAAa,EAAEC,gBAAgB,CAAC,GAAGnD,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACoD,YAAY,EAAEC,eAAe,CAAC,GAAGrD,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACsD,WAAW,EAAEC,cAAc,CAAC,GAAGvD,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACwD,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGzD,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAAC0D,cAAc,EAAEC,iBAAiB,CAAC,GAAG3D,QAAQ,CAAC,KAAK,CAAC;;EAE3D;EACA,MAAM,CAAC4D,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG7D,QAAQ,CAAC,EAAE,CAAC;EAClE,MAAM,CAAC8D,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG/D,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACgE,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGjE,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACkE,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGnE,QAAQ,CAAC,EAAE,CAAC;;EAEhE;EACA,MAAM,CAACoE,YAAY,EAAEC,eAAe,CAAC,GAAGrE,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACsE,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGvE,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACwE,YAAY,EAAEC,eAAe,CAAC,GAAGzE,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC0E,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG3E,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAAC4E,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG7E,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAAC8E,eAAe,EAAEC,kBAAkB,CAAC,GAAG/E,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACgF,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGjF,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtE,MAAM,CAACkF,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGnF,QAAQ,CAAC,KAAK,CAAC;;EAErE;EACA,MAAM,CAACoF,YAAY,EAAEC,eAAe,CAAC,GAAGrF,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACsF,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGvF,QAAQ,CAAC,KAAK,CAAC;EACrE,MAAM,CAACwF,eAAe,EAAEC,kBAAkB,CAAC,GAAGzF,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC0F,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG3F,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAAC4F,WAAW,EAAEC,cAAc,CAAC,GAAG7F,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACA,MAAM,CAAC8F,UAAU,EAAEC,aAAa,CAAC,GAAG/F,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACgG,YAAY,EAAEC,eAAe,CAAC,GAAGjG,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACkG,SAAS,EAAEC,YAAY,CAAC,GAAGnG,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACoG,SAAS,EAAEC,YAAY,CAAC,GAAGrG,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACsG,WAAW,EAAEC,cAAc,CAAC,GAAGvG,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACwG,QAAQ,EAAEC,WAAW,CAAC,GAAGzG,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC0G,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG3G,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAAC4G,WAAW,EAAEC,cAAc,CAAC,GAAG7G,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC8G,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG/G,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACgH,cAAc,EAAEC,iBAAiB,CAAC,GAAGjH,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACkH,KAAK,EAAEC,QAAQ,CAAC,GAAGnH,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACoH,MAAM,EAAEC,SAAS,CAAC,GAAGrH,QAAQ,CAAC,IAAI,CAAC;;EAE1C;EACA,MAAMsH,YAAY,GAAGvH,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMwH,aAAa,GAAGxH,MAAM,CAAC,IAAI,CAAC;EAClC,MAAMyH,gBAAgB,GAAGzH,MAAM,CAAC,IAAI,CAAC;EACrC,MAAM0H,QAAQ,GAAG1H,MAAM,CAAC,IAAI,CAAC;;EAE7B;EACAE,SAAS,CAAC,MAAM;IACd,IAAI+F,YAAY,IAAIsB,YAAY,CAACI,OAAO,EAAE;MACxCJ,YAAY,CAACI,OAAO,CAACC,SAAS,GAAG3B,YAAY;MAC7CsB,YAAY,CAACI,OAAO,CAACE,IAAI,CAAC,CAAC,CAACC,KAAK,CAACC,OAAO,CAACC,KAAK,CAAC;IAClD;EACF,CAAC,EAAE,CAAC/B,YAAY,CAAC,CAAC;;EAElB;EACA,MAAMgC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAACrG,MAAM,EAAE;MACXsB,eAAe,CAAC,SAAS,CAAC;MAC1B;IACF;IAEA,IAAI;MACF;MACA,MAAMgF,KAAK,GAAG,IAAI7H,kBAAkB,CAACuB,MAAM,CAAC;MAC5C,MAAMuG,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;QAAED,KAAK,EAAE;MAAmB,CAAC,CAAC;;MAErE;MACA,MAAME,MAAM,GAAG,MAAMF,KAAK,CAACG,eAAe,CAAC,MAAM,CAAC;MAClD,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;MAEtC,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAAE;QACnBtF,eAAe,CAAC,OAAO,CAAC;QACxB6E,OAAO,CAACU,GAAG,CAAC,2BAA2B,CAAC;MAC1C,CAAC,MAAM;QACLvF,eAAe,CAAC,SAAS,CAAC;QAC1B6E,OAAO,CAACU,GAAG,CAAC,6BAA6B,CAAC;MAC5C;IACF,CAAC,CAAC,OAAOT,KAAK,EAAE;MACd9E,eAAe,CAAC,SAAS,CAAC;MAC1B6E,OAAO,CAACU,GAAG,CAAC,+BAA+B,EAAET,KAAK,CAAC;IACrD;EACF,CAAC,CAAC,CAAE;EACJ,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAG1I,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAAC2I,SAAS,EAAEC,YAAY,CAAC,GAAG5I,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC6I,cAAc,EAAEC,iBAAiB,CAAC,GAAG9I,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC+I,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGhJ,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACiJ,SAAS,EAAEC,YAAY,CAAC,GAAGlJ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACmJ,WAAW,EAAEC,cAAc,CAAC,GAAGpJ,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACqJ,UAAU,EAAEC,aAAa,CAAC,GAAGtJ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAMuJ,QAAQ,GAAGxJ,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMyJ,SAAS,GAAGzJ,MAAM,CAAC,IAAI,CAAC;;EAE9B;EACA,MAAM0J,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAIhI,SAAS,EAAE,OAAOA,SAAS;IAE/B,IAAI;MACFqG,OAAO,CAACU,GAAG,CAAC,gCAAgC,CAAC;MAC7C,MAAMkB,MAAM,GAAG,MAAMvJ,SAAS,CAACwJ,YAAY,CAAC,KAAK,EAAE,CAAC,EAAE;QACpDC,MAAM,EAAEC,CAAC,IAAI/B,OAAO,CAACU,GAAG,CAAC,aAAa,EAAEqB,CAAC;MAC3C,CAAC,CAAC;;MAEF;MACA,MAAMH,MAAM,CAACI,aAAa,CAAC;QACzBC,uBAAuB,EAAE,8FAA8F;QACvHC,qBAAqB,EAAE,GAAG;QAAE;QAC5BC,yBAAyB,EAAE,GAAG;QAC9BC,kBAAkB,EAAE;MACtB,CAAC,CAAC;MAEFpC,OAAO,CAACU,GAAG,CAAC,iCAAiC,CAAC;MAC9C9G,YAAY,CAACgI,MAAM,CAAC;MACpB,OAAOA,MAAM;IACf,CAAC,CAAC,OAAO3B,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDvG,eAAe,CAAC,6BAA6B,GAAGuG,KAAK,CAACoC,OAAO,CAAC;MAC9D,OAAO,IAAI;IACb;EACF,CAAC;;EAED;EACA,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI,CAACb,QAAQ,CAAC7B,OAAO,IAAI,CAAC8B,SAAS,CAAC9B,OAAO,EAAE;MAC3C2C,KAAK,CAAC,8CAA8C,CAAC;MACrD;IACF;IAEA,MAAMC,KAAK,GAAGf,QAAQ,CAAC7B,OAAO;IAC9B,MAAM6C,MAAM,GAAGf,SAAS,CAAC9B,OAAO;IAChC,MAAM8C,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;;IAEnC;IACAF,MAAM,CAACG,KAAK,GAAGJ,KAAK,CAACK,UAAU,IAAI,GAAG;IACtCJ,MAAM,CAACK,MAAM,GAAGN,KAAK,CAACO,WAAW,IAAI,GAAG;IAExC,IAAIP,KAAK,CAACK,UAAU,KAAK,CAAC,IAAIL,KAAK,CAACO,WAAW,KAAK,CAAC,EAAE;MACrDR,KAAK,CAAC,2BAA2B,CAAC;MAClC;IACF;;IAEA;IACAG,GAAG,CAACM,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEC,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACK,MAAM,CAAC;IACvD,MAAMG,OAAO,GAAGR,MAAM,CAACS,SAAS,CAAC,WAAW,CAAC;IAE7C7H,gBAAgB,CAAC;MACf8H,KAAK,EAAEF,OAAO;MACdG,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC;MACtCC,SAAS,EAAEf,KAAK,CAACgB;IACnB,CAAC,CAAC;IAEF/H,cAAc,CAAC,iBAAiB,CAAC;IACjC/B,eAAe,CAAC,4FAA4F,CAAC;EAC/G,CAAC;EAED,MAAM+J,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI,CAAChC,QAAQ,CAAC7B,OAAO,IAAI,CAAC8B,SAAS,CAAC9B,OAAO,EAAE;MAC3C2C,KAAK,CAAC,8CAA8C,CAAC;MACrD;IACF;IAEA,IAAI,CAACnH,aAAa,EAAE;MAClBmH,KAAK,CAAC,wCAAwC,CAAC;MAC/C;IACF;IAEA,MAAMC,KAAK,GAAGf,QAAQ,CAAC7B,OAAO;IAC9B,MAAM6C,MAAM,GAAGf,SAAS,CAAC9B,OAAO;IAChC,MAAM8C,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;;IAEnC;IACAF,MAAM,CAACG,KAAK,GAAGJ,KAAK,CAACK,UAAU,IAAI,GAAG;IACtCJ,MAAM,CAACK,MAAM,GAAGN,KAAK,CAACO,WAAW,IAAI,GAAG;;IAExC;IACAL,GAAG,CAACM,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEC,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACK,MAAM,CAAC;IACvD,MAAMG,OAAO,GAAGR,MAAM,CAACS,SAAS,CAAC,WAAW,CAAC;IAE7C3H,eAAe,CAAC;MACd4H,KAAK,EAAEF,OAAO;MACdG,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC;MACtCC,SAAS,EAAEf,KAAK,CAACgB;IACnB,CAAC,CAAC;IAEF/H,cAAc,CAAC,iBAAiB,CAAC;IACjCI,iBAAiB,CAAC,IAAI,CAAC;IACvBnC,eAAe,CAAC,sEAAsE,CAAC;;IAEvF;IACA,MAAMgK,cAAc,CAAC,CAAC;EACxB,CAAC;EAED,MAAMA,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAACtI,aAAa,IAAI,CAACE,YAAY,EAAE;IAErCK,mBAAmB,CAAC,yDAAyD,CAAC;IAE9E,IAAI;MACF;MACA;MACA,MAAMgI,QAAQ,GAAGrI,YAAY,CAACiI,SAAS,GAAGnI,aAAa,CAACmI,SAAS;MACjE,MAAMK,aAAa,GAAGC,IAAI,CAACC,GAAG,CAACH,QAAQ,CAAC,CAACI,OAAO,CAAC,CAAC,CAAC;MAEnD,MAAMC,aAAa,GAAG;AAC5B;AACA,0BAA0BJ,aAAa;AACvC,iBAAiBxI,aAAa,CAACgI,SAAS;AACxC,gBAAgB9H,YAAY,CAAC8H,SAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,iHAAiH;MAE3GzH,mBAAmB,CAACqI,aAAa,CAAC;IAEpC,CAAC,CAAC,OAAO/D,KAAK,EAAE;MACdtE,mBAAmB,CAAC,8BAA8BsE,KAAK,CAACoC,OAAO,EAAE,CAAC;IACpE;EACF,CAAC;EAED,MAAM4B,aAAa,GAAGA,CAAA,KAAM;IAC1B5I,gBAAgB,CAAC,IAAI,CAAC;IACtBE,eAAe,CAAC,IAAI,CAAC;IACrBE,cAAc,CAAC,SAAS,CAAC;IACzBE,mBAAmB,CAAC,EAAE,CAAC;IACvBE,iBAAiB,CAAC,KAAK,CAAC;IACxBnC,eAAe,CAAC,oEAAoE,CAAC;EACvF,CAAC;;EAED;EACA,MAAMwK,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI,CAACzC,QAAQ,CAAC7B,OAAO,IAAI,CAAC8B,SAAS,CAAC9B,OAAO,EAAE;MAC3C2C,KAAK,CAAC,8CAA8C,CAAC;MACrD;IACF;IAEA,MAAMC,KAAK,GAAGf,QAAQ,CAAC7B,OAAO;IAC9B,MAAM6C,MAAM,GAAGf,SAAS,CAAC9B,OAAO;IAChC,MAAM8C,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IAEnC,IAAIH,KAAK,CAAC2B,QAAQ,KAAK,CAAC,IAAIC,KAAK,CAAC5B,KAAK,CAAC2B,QAAQ,CAAC,EAAE;MACjD5B,KAAK,CAAC,uEAAuE,CAAC;MAC9E;IACF;;IAEA;IACA,MAAM8B,YAAY,GAAGtK,OAAO,CAACC,GAAG,CAACC,wBAAwB;IACzD,IAAI,CAACoK,YAAY,EAAE;MACjB9B,KAAK,CAAC,yEAAyE,CAAC;MAChF;IACF;IAEAtG,mBAAmB,CAAC,IAAI,CAAC;IACzBE,oBAAoB,CAAC,IAAI,CAAC;IAC1BE,qBAAqB,CAAC,EAAE,CAAC;IAEzB,MAAMiI,cAAc,GAAG;AAC3B;AACA;AACA,cAAcT,IAAI,CAACU,KAAK,CAAC/B,KAAK,CAAC2B,QAAQ,CAAC;AACxC,gBAAgB3B,KAAK,CAACK,UAAU,IAAIL,KAAK,CAACO,WAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;IAExChH,sBAAsB,CAACuI,cAAc,CAAC;IAEtC,IAAI;MACF;MACA,MAAME,cAAc,GAAGX,IAAI,CAACY,GAAG,CAAC,CAAC,EAAEZ,IAAI,CAACa,GAAG,CAAC,CAAC,EAAEb,IAAI,CAACc,KAAK,CAACnC,KAAK,CAAC2B,QAAQ,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAClF,MAAMS,aAAa,GAAGpC,KAAK,CAAC2B,QAAQ,GAAGK,cAAc;MACrD,MAAMK,aAAa,GAAG,EAAE;MAExBpC,MAAM,CAACG,KAAK,GAAGJ,KAAK,CAACK,UAAU,IAAI,GAAG;MACtCJ,MAAM,CAACK,MAAM,GAAGN,KAAK,CAACO,WAAW,IAAI,GAAG;;MAExC;MACA,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,cAAc,EAAEM,CAAC,EAAE,EAAE;QACvC,MAAM1B,SAAS,GAAG0B,CAAC,GAAGF,aAAa;;QAEnC;QACA,MAAM,IAAIG,OAAO,CAAEC,OAAO,IAAK;UAC7B,MAAMC,WAAW,GAAGA,CAAA,KAAM;YACxBzC,KAAK,CAAC0C,mBAAmB,CAAC,QAAQ,EAAED,WAAW,CAAC;;YAEhD;YACAvC,GAAG,CAACM,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEC,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACK,MAAM,CAAC;YACvD,MAAMG,OAAO,GAAGR,MAAM,CAACS,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC;YAEnD2B,aAAa,CAACM,IAAI,CAAC;cACjB/B,SAAS,EAAEA,SAAS;cACpBD,KAAK,EAAEF,OAAO;cACdmC,WAAW,EAAEN,CAAC,GAAG;YACnB,CAAC,CAAC;YAEFE,OAAO,CAAC,CAAC;UACX,CAAC;UAEDxC,KAAK,CAAC6C,gBAAgB,CAAC,QAAQ,EAAEJ,WAAW,CAAC;UAC7CzC,KAAK,CAACgB,WAAW,GAAGJ,SAAS;QAC/B,CAAC,CAAC;;QAEF;QACArH,sBAAsB,CAACuJ,IAAI,IAAIA,IAAI,GAAG,cAAcR,CAAC,GAAG,CAAC,IAAIN,cAAc,gBAAgBpB,SAAS,CAACW,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;MACrH;MAEA1H,qBAAqB,CAACwI,aAAa,CAAC;;MAEpC;MACA9I,sBAAsB,CAACuJ,IAAI,IAAIA,IAAI,GAAG,2DAA2D,CAAC;;MAElG;MACA,MAAMnF,KAAK,GAAG,IAAI7H,kBAAkB,CAAC+L,YAAY,CAAC;MAClD,MAAMjE,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;QAAED,KAAK,EAAE;MAAmB,CAAC,CAAC;;MAErE;MACA,MAAMmF,cAAc,GAAG,sEAAsEV,aAAa,CAACW,MAAM,2CAA2C3B,IAAI,CAACU,KAAK,CAAC/B,KAAK,CAAC2B,QAAQ,CAAC;AAC5L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sIAAsI;;MAEhI;MACA,MAAMsB,UAAU,GAAG,EAAE;MACrB,KAAK,MAAMC,KAAK,IAAIb,aAAa,EAAE;QACjC;QACA,MAAMc,UAAU,GAAGD,KAAK,CAACvC,KAAK,CAACyC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5CH,UAAU,CAACN,IAAI,CAAC;UACdU,UAAU,EAAE;YACVC,IAAI,EAAEH,UAAU;YAChBI,QAAQ,EAAE;UACZ;QACF,CAAC,CAAC;MACJ;;MAEA;MACA,MAAMzF,MAAM,GAAG,MAAMF,KAAK,CAACG,eAAe,CAAC,CACzCgF,cAAc,EACd,GAAGE,UAAU,CACd,CAAC;MAEF,MAAMjF,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;MACtC,MAAMwF,QAAQ,GAAGxF,QAAQ,CAACC,IAAI,CAAC,CAAC;MAEhC,MAAMwF,YAAY,GAAG;AAC3B;AACA;AACA,aAAapB,aAAa,CAACW,MAAM,oBAAoB3B,IAAI,CAACU,KAAK,CAAC/B,KAAK,CAAC2B,QAAQ,CAAC;AAC/E;AACA;AACA;AACA;AACA;AACA,EAAE6B,QAAQ;AACV;AACA;AACA;AACA,GAAGnB,aAAa,CAACW,MAAM,yBAAyB3B,IAAI,CAACU,KAAK,CAAC/B,KAAK,CAAC2B,QAAQ,CAAC,gBAAgB;MAEpFpI,sBAAsB,CAACkK,YAAY,CAAC;MACpCvM,eAAe,CAAC,8FAA8F,CAAC;IAEjH,CAAC,CAAC,OAAOuG,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMiG,QAAQ,GAAG;AACvB;AACA,aAAajG,KAAK,CAACoC,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF;MAE5EtG,sBAAsB,CAACmK,QAAQ,CAAC;IAClC,CAAC,SAAS;MACRjK,mBAAmB,CAAC,KAAK,CAAC;IAC5B;EACF,CAAC;;EAED;EACA,MAAMkK,gBAAgB,GAAG,MAAOC,KAAK,IAAK;IACxC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAIF,IAAI,IAAIA,IAAI,CAACG,IAAI,CAACC,UAAU,CAAC,QAAQ,CAAC,EAAE;MAC1CvN,YAAY,CAACmN,IAAI,CAAC;MAClB,MAAMK,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACP,IAAI,CAAC;MACrCjN,WAAW,CAACsN,GAAG,CAAC;MAChBpN,cAAc,CAAC,EAAE,CAAC;MAClBI,eAAe,CAAC,EAAE,CAAC;MACnBE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;MACpBkH,YAAY,CAAC,EAAE,CAAC;MAChBI,mBAAmB,CAAC,EAAE,CAAC;MACvBI,cAAc,CAAC,EAAE,CAAC;;MAElB;MACA,IAAIX,cAAc,EAAE;QAClB,IAAI;UACFK,iBAAiB,CAAC,+BAA+B,CAAC;UAClD,MAAM6F,YAAY,GAAG,MAAMC,oBAAoB,CAACT,IAAI,CAAC;UACrDrG,OAAO,CAACU,GAAG,CAAC,gBAAgB,EAAEmG,YAAY,CAAC;UAE3C7F,iBAAiB,CAAC,sCAAsC,CAAC;UACzD,MAAM+F,aAAa,GAAG,MAAMC,uBAAuB,CACjDH,YAAY,CAACrE,KAAK,CAACyE,IAAI,EACvBZ,IAAI,CAACa,IACP,CAAC;UACDlH,OAAO,CAACU,GAAG,CAAC,iBAAiB,EAAEqG,aAAa,CAAC;UAE7CjG,YAAY,CAACiG,aAAa,CAAClG,SAAS,CAAC;UACrCK,mBAAmB,CAAC,mCAAmC6F,aAAa,CAAClG,SAAS,EAAE,CAAC;UACjFG,iBAAiB,CAAC,EAAE,CAAC;QACvB,CAAC,CAAC,OAAOf,KAAK,EAAE;UACdD,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;UACzDe,iBAAiB,CAAC,UAAUf,KAAK,CAACoC,OAAO,EAAE,CAAC;QAC9C;MACF,CAAC,MAAM;QACL;QACA8E,UAAU,CAAC,MAAM;UACfxF,aAAa,CAAC,CAAC;QACjB,CAAC,EAAE,IAAI,CAAC;MACV;IACF,CAAC,MAAM;MACLY,KAAK,CAAC,kCAAkC,CAAC;IAC3C;EACF,CAAC;;EAED;;EAEA;EACA,MAAM6E,aAAa,GAAGA,CAACC,WAAW,EAAEC,WAAW,KAAK;IAClD,OAAO,IAAIvC,OAAO,CAAEC,OAAO,IAAK;MAC9B,MAAMuC,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAChD,MAAMC,OAAO,GAAGF,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAChD,MAAME,IAAI,GAAGJ,OAAO,CAAC5E,UAAU,CAAC,IAAI,CAAC;MACrC,MAAMiF,IAAI,GAAGF,OAAO,CAAC/E,UAAU,CAAC,IAAI,CAAC;MAErC,MAAMkF,MAAM,GAAG,IAAIC,KAAK,CAAC,CAAC;MAC1B,MAAMC,MAAM,GAAG,IAAID,KAAK,CAAC,CAAC;MAE1B,IAAIE,YAAY,GAAG,CAAC;MAEpB,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;QAC9BD,YAAY,EAAE;QACd,IAAIA,YAAY,KAAK,CAAC,EAAE;UACtB;UACA,MAAMpF,KAAK,GAAGiB,IAAI,CAACY,GAAG,CAACoD,MAAM,CAACjF,KAAK,EAAEmF,MAAM,CAACnF,KAAK,EAAE,GAAG,CAAC;UACvD,MAAME,MAAM,GAAGe,IAAI,CAACY,GAAG,CAACoD,MAAM,CAAC/E,MAAM,EAAEiF,MAAM,CAACjF,MAAM,EAAE,GAAG,CAAC;UAE1DyE,OAAO,CAAC3E,KAAK,GAAG8E,OAAO,CAAC9E,KAAK,GAAGA,KAAK;UACrC2E,OAAO,CAACzE,MAAM,GAAG4E,OAAO,CAAC5E,MAAM,GAAGA,MAAM;;UAExC;UACA6E,IAAI,CAAC3E,SAAS,CAAC6E,MAAM,EAAE,CAAC,EAAE,CAAC,EAAEjF,KAAK,EAAEE,MAAM,CAAC;UAC3C8E,IAAI,CAAC5E,SAAS,CAAC+E,MAAM,EAAE,CAAC,EAAE,CAAC,EAAEnF,KAAK,EAAEE,MAAM,CAAC;;UAE3C;UACA,MAAMoF,KAAK,GAAGP,IAAI,CAACQ,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEvF,KAAK,EAAEE,MAAM,CAAC;UACpD,MAAMsF,KAAK,GAAGR,IAAI,CAACO,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEvF,KAAK,EAAEE,MAAM,CAAC;;UAEpD;UACA,IAAIuF,eAAe,GAAG,CAAC;UACvB,MAAMC,WAAW,GAAG1F,KAAK,GAAGE,MAAM;UAElC,KAAK,IAAIgC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoD,KAAK,CAACpC,IAAI,CAACN,MAAM,EAAEV,CAAC,IAAI,CAAC,EAAE;YAC7C,MAAMyD,EAAE,GAAGL,KAAK,CAACpC,IAAI,CAAChB,CAAC,CAAC;YACxB,MAAM0D,EAAE,GAAGN,KAAK,CAACpC,IAAI,CAAChB,CAAC,GAAG,CAAC,CAAC;YAC5B,MAAM2D,EAAE,GAAGP,KAAK,CAACpC,IAAI,CAAChB,CAAC,GAAG,CAAC,CAAC;YAE5B,MAAM4D,EAAE,GAAGN,KAAK,CAACtC,IAAI,CAAChB,CAAC,CAAC;YACxB,MAAM6D,EAAE,GAAGP,KAAK,CAACtC,IAAI,CAAChB,CAAC,GAAG,CAAC,CAAC;YAC5B,MAAM8D,EAAE,GAAGR,KAAK,CAACtC,IAAI,CAAChB,CAAC,GAAG,CAAC,CAAC;;YAE5B;YACA,MAAM+D,IAAI,GAAGhF,IAAI,CAACC,GAAG,CAACyE,EAAE,GAAGG,EAAE,CAAC,GAAG7E,IAAI,CAACC,GAAG,CAAC0E,EAAE,GAAGG,EAAE,CAAC,GAAG9E,IAAI,CAACC,GAAG,CAAC2E,EAAE,GAAGG,EAAE,CAAC;YACtE,IAAIC,IAAI,GAAG,EAAE,EAAE;cAAE;cACfR,eAAe,EAAE;YACnB;UACF;UAEA,MAAMS,gBAAgB,GAAIT,eAAe,GAAGC,WAAW,GAAI,GAAG;UAC9DtD,OAAO,CAAC8D,gBAAgB,CAAC;QAC3B;MACF,CAAC;MAEDjB,MAAM,CAACkB,MAAM,GAAGd,iBAAiB;MACjCF,MAAM,CAACgB,MAAM,GAAGd,iBAAiB;MAEjCJ,MAAM,CAACmB,GAAG,GAAG3B,WAAW;MACxBU,MAAM,CAACiB,GAAG,GAAG1B,WAAW;IAC1B,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAM2B,wBAAwB,GAAGA,CAAA,KAAM;IACrC,IAAI,CAACxH,QAAQ,CAAC7B,OAAO,IAAI,CAAC8B,SAAS,CAAC9B,OAAO,EAAE,OAAO,IAAI;IAExD,MAAM4C,KAAK,GAAGf,QAAQ,CAAC7B,OAAO;IAC9B,MAAM6C,MAAM,GAAGf,SAAS,CAAC9B,OAAO;IAChC,MAAM8C,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IAEnCF,MAAM,CAACG,KAAK,GAAGJ,KAAK,CAACK,UAAU,IAAI,GAAG;IACtCJ,MAAM,CAACK,MAAM,GAAGN,KAAK,CAACO,WAAW,IAAI,GAAG;IAExCL,GAAG,CAACM,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEC,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACK,MAAM,CAAC;IACvD,OAAOL,MAAM,CAACS,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC;EAC5C,CAAC;;EAED;EACA,MAAMgG,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI5M,YAAY,EAAE;IAElBC,eAAe,CAAC,IAAI,CAAC;IACrBc,sBAAsB,CAAC,IAAI,CAAC;;IAE5B;IACA,MAAM8L,YAAY,GAAGF,wBAAwB,CAAC,CAAC;IAC/C,IAAIE,YAAY,EAAE;MAChB1M,oBAAoB,CAAC0M,YAAY,CAAC;MAClC,MAAM/F,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;MAC5B1G,eAAe,CAAC,CAAC;QACfyM,EAAE,EAAE/F,IAAI,CAACgG,GAAG,CAAC,CAAC;QACdlG,KAAK,EAAEgG,YAAY;QACnB/F,SAAS,EAAEA,SAAS;QACpBkG,WAAW,EAAE,0BAA0B;QACvCC,OAAO,EAAE;MACX,CAAC,CAAC,CAAC;IACL;;IAEA;IACA,MAAMC,QAAQ,GAAGC,WAAW,CAAC,YAAY;MACvC,MAAMC,QAAQ,GAAGT,wBAAwB,CAAC,CAAC;MAC3C,IAAI,CAACS,QAAQ,IAAI,CAAClN,iBAAiB,EAAE;MAErC,IAAI;QACF,MAAMsM,gBAAgB,GAAG,MAAM1B,aAAa,CAAC5K,iBAAiB,EAAEkN,QAAQ,CAAC;QAEzE,IAAIZ,gBAAgB,GAAG9L,eAAe,EAAE;UACtC;UACA,MAAMoG,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;;UAE5B;UACA,MAAMgB,YAAY,GAAGtK,OAAO,CAACC,GAAG,CAACC,wBAAwB;UACzD,IAAIoK,YAAY,EAAE;YAChB,IAAI;cACF,MAAMlE,KAAK,GAAG,IAAI7H,kBAAkB,CAAC+L,YAAY,CAAC;cAClD,MAAMjE,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;gBAAED,KAAK,EAAE;cAAmB,CAAC,CAAC;cAErE,MAAMuF,UAAU,GAAG+D,QAAQ,CAAC9D,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;cACzC,MAAM+D,SAAS,GAAG;gBAChB9D,UAAU,EAAE;kBACVC,IAAI,EAAEH,UAAU;kBAChBI,QAAQ,EAAE;gBACZ;cACF,CAAC;cAED,MAAM6D,MAAM,GAAG;AAC7B;AACA;AACA;AACA;AACA,oEAAoE;cAEtD,MAAMtJ,MAAM,GAAG,MAAMF,KAAK,CAACG,eAAe,CAAC,CAACqJ,MAAM,EAAED,SAAS,CAAC,CAAC;cAC/D,MAAMnJ,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;cACtC,MAAM8I,WAAW,GAAG9I,QAAQ,CAACC,IAAI,CAAC,CAAC;;cAEnC;cACA,MAAMoJ,cAAc,GAAG;gBACrBT,EAAE,EAAE/F,IAAI,CAACgG,GAAG,CAAC,CAAC;gBACdlG,KAAK,EAAEuG,QAAQ;gBACftG,SAAS,EAAEA,SAAS;gBACpBkG,WAAW,EAAEA,WAAW;gBACxBC,OAAO,EAAE,GAAGT,gBAAgB,CAAC/E,OAAO,CAAC,CAAC,CAAC;cACzC,CAAC;cAEDpH,eAAe,CAAC2I,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEuE,cAAc,CAAC,CAAC;cAClDpN,oBAAoB,CAACiN,QAAQ,CAAC;cAC9B7M,qBAAqB,CAACuG,SAAS,CAAC;YAElC,CAAC,CAAC,OAAOnD,KAAK,EAAE;cACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;cAC/C;cACA,MAAM4J,cAAc,GAAG;gBACrBT,EAAE,EAAE/F,IAAI,CAACgG,GAAG,CAAC,CAAC;gBACdlG,KAAK,EAAEuG,QAAQ;gBACftG,SAAS,EAAEA,SAAS;gBACpBkG,WAAW,EAAE,4BAA4B;gBACzCC,OAAO,EAAE,GAAGT,gBAAgB,CAAC/E,OAAO,CAAC,CAAC,CAAC;cACzC,CAAC;cAEDpH,eAAe,CAAC2I,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEuE,cAAc,CAAC,CAAC;cAClDpN,oBAAoB,CAACiN,QAAQ,CAAC;cAC9B7M,qBAAqB,CAACuG,SAAS,CAAC;YAClC;UACF;QACF;MACF,CAAC,CAAC,OAAOnD,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC,EAAE/C,mBAAmB,CAAC;IAEvBH,qBAAqB,CAACyM,QAAQ,CAAC;IAC/B9P,eAAe,CAAC,gEAAgEwD,mBAAmB,GAAC,IAAI,WAAW,CAAC;EACtH,CAAC;;EAED;EACA,MAAM4M,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIhN,kBAAkB,EAAE;MACtBiN,aAAa,CAACjN,kBAAkB,CAAC;MACjCC,qBAAqB,CAAC,IAAI,CAAC;IAC7B;IACAR,eAAe,CAAC,KAAK,CAAC;IACtB7C,eAAe,CAAC,mCAAmC,CAAC;EACtD,CAAC;;EAED;EACA,MAAMsQ,iBAAiB,GAAGA,CAAA,KAAM;IAC9BrN,eAAe,CAAC,EAAE,CAAC;IACnBjD,eAAe,CAAC,gCAAgC,CAAC;EACnD,CAAC;;EAED;EACA,MAAMuQ,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAIvN,YAAY,CAAC8I,MAAM,KAAK,CAAC,EAAE;MAC7BjD,KAAK,CAAC,yFAAyF,CAAC;MAChG;IACF;IAEA9E,sBAAsB,CAAC,IAAI,CAAC;IAC5BF,eAAe,CAAC,EAAE,CAAC;IAEnB,IAAI;MACF,MAAM4C,KAAK,GAAG,IAAI7H,kBAAkB,CAACuB,MAAM,CAAC;MAC5C,MAAMuG,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;QAAED,KAAK,EAAE;MAAmB,CAAC,CAAC;;MAErE;MACA,MAAM8J,UAAU,GAAGxN,YAAY,CAACyN,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAC9C,aAAaA,KAAK,GAAG,CAAC,OAAOD,IAAI,CAAChH,SAAS,CAACE,cAAc,CAAC,CAAC,OAAO8G,IAAI,CAACd,WAAW,EACrF,CAAC,CAACgB,IAAI,CAAC,MAAM,CAAC;MAEd,MAAMV,MAAM,GAAG,6FAA6FlN,YAAY,CAAC8I,MAAM;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE0E,UAAU;AACZ;AACA,yIAAyI;MAEnI,MAAM5J,MAAM,GAAG,MAAMF,KAAK,CAACG,eAAe,CAACqJ,MAAM,CAAC;MAClD,MAAMpJ,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;MACtC,MAAM+J,OAAO,GAAG/J,QAAQ,CAACC,IAAI,CAAC,CAAC;MAE/BlD,eAAe,CAACgN,OAAO,CAAC;MACxB7Q,eAAe,CAAC,uDAAuD,CAAC;IAC1E,CAAC,CAAC,OAAOuG,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDvG,eAAe,CAAC,+CAA+C,CAAC;IAClE,CAAC,SAAS;MACR+D,sBAAsB,CAAC,KAAK,CAAC;IAC/B;EACF,CAAC;;EAED;EACA,MAAM+M,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI,CAAClN,YAAY,EAAE;MACjBiF,KAAK,CAAC,uEAAuE,CAAC;MAC9E;IACF;IAEA,IAAI;MACF7I,eAAe,CAAC,kCAAkC,CAAC;;MAEnD;MACA,MAAM+Q,OAAO,GAAGjD,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MAC7CgD,OAAO,CAACC,KAAK,CAACC,QAAQ,GAAG,UAAU;MACnCF,OAAO,CAACC,KAAK,CAACE,IAAI,GAAG,SAAS;MAC9BH,OAAO,CAACC,KAAK,CAAC9H,KAAK,GAAG,OAAO;MAC7B6H,OAAO,CAACC,KAAK,CAACG,OAAO,GAAG,MAAM;MAC9BJ,OAAO,CAACC,KAAK,CAACI,UAAU,GAAG,mBAAmB;MAC9CL,OAAO,CAACC,KAAK,CAACK,QAAQ,GAAG,MAAM;MAC/BN,OAAO,CAACC,KAAK,CAACM,UAAU,GAAG,KAAK;MAChCP,OAAO,CAACC,KAAK,CAACO,KAAK,GAAG,MAAM;MAC5BR,OAAO,CAACC,KAAK,CAACQ,eAAe,GAAG,SAAS;;MAEzC;MACA,MAAMC,WAAW,GAAG,IAAI9H,IAAI,CAAC,CAAC,CAAC+H,kBAAkB,CAAC,OAAO,EAAE;QACzDC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE,MAAM;QACbC,GAAG,EAAE;MACP,CAAC,CAAC;;MAEF;MACA,MAAMC,gBAAgB,GAAGlO,YAAY,CAClCmO,OAAO,CAAC,gBAAgB,EAAE,qBAAqB,CAAC,CAChDA,OAAO,CAAC,8BAA8B,EAAE,EAAE,CAAC,CAC3C7F,KAAK,CAAC,IAAI,CAAC,CACXuE,GAAG,CAACuB,IAAI,IAAI;QACX,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAClF,UAAU,CAAC,GAAG,CAAC,EAAE;UAC/B,OAAO,yDAAyDiF,IAAI,CAACC,IAAI,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC,QAAQ;QAClG;QACA,OAAO,qCAAqCF,IAAI,QAAQ;MAC1D,CAAC,CAAC,CACDpB,IAAI,CAAC,EAAE,CAAC;MAEXG,OAAO,CAACoB,SAAS,GAAG;AAC1B;AACA;AACA,4GAA4GV,WAAW;AACvH;AACA,uBAAuBzO,YAAY,CAAC8I,MAAM;AAC1C;AACA;AACA;AACA;AACA,YAAYgG,gBAAgB;AAC5B;AACA;AACA;AACA;AACA,YAAY9O,YAAY,CAACyN,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;AAC9C;AACA;AACA,0BAA0BA,KAAK,GAAG,CAAC,MAAMD,IAAI,CAAChH,SAAS,CAACE,cAAc,CAAC,CAAC;AACxE;AACA;AACA,kBAAkB8G,IAAI,CAACd,WAAW;AAClC;AACA;AACA,WAAW,CAAC,CAACgB,IAAI,CAAC,EAAE,CAAC;AACrB;AACA;AACA;AACA;AACA;AACA,OAAO;MAED9C,QAAQ,CAACsE,IAAI,CAACC,WAAW,CAACtB,OAAO,CAAC;;MAElC;MACA,MAAMhI,MAAM,GAAG,MAAMjK,WAAW,CAACiS,OAAO,EAAE;QACxCuB,KAAK,EAAE,CAAC;QACRC,OAAO,EAAE,IAAI;QACbf,eAAe,EAAE,SAAS;QAC1BtI,KAAK,EAAE,GAAG;QACVE,MAAM,EAAE2H,OAAO,CAACyB;MAClB,CAAC,CAAC;;MAEF;MACA1E,QAAQ,CAACsE,IAAI,CAACK,WAAW,CAAC1B,OAAO,CAAC;;MAElC;MACA,MAAM2B,GAAG,GAAG,IAAI7T,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;MACtC,MAAM8T,OAAO,GAAG5J,MAAM,CAACS,SAAS,CAAC,WAAW,CAAC;MAE7C,MAAMoJ,QAAQ,GAAGF,GAAG,CAACG,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAAC,CAAC;MACjD,MAAMC,SAAS,GAAGN,GAAG,CAACG,QAAQ,CAACC,QAAQ,CAACG,SAAS,CAAC,CAAC;MACnD,MAAMC,QAAQ,GAAGnK,MAAM,CAACG,KAAK;MAC7B,MAAMiK,SAAS,GAAGpK,MAAM,CAACK,MAAM;MAC/B,MAAMgK,KAAK,GAAGjJ,IAAI,CAACY,GAAG,CAAC6H,QAAQ,GAAGM,QAAQ,EAAEF,SAAS,GAAGG,SAAS,CAAC;MAClE,MAAME,IAAI,GAAG,CAACT,QAAQ,GAAGM,QAAQ,GAAGE,KAAK,IAAI,CAAC;MAC9C,MAAME,IAAI,GAAG,CAAC;MAEdZ,GAAG,CAACa,QAAQ,CAACZ,OAAO,EAAE,KAAK,EAAEU,IAAI,EAAEC,IAAI,EAAEJ,QAAQ,GAAGE,KAAK,EAAED,SAAS,GAAGC,KAAK,CAAC;;MAE7E;MACA,MAAM1J,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC6J,WAAW,CAAC,CAAC,CAACzB,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC0B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAC7E,MAAMC,QAAQ,GAAG,0BAA0BhK,SAAS,MAAM;;MAE1D;MACAgJ,GAAG,CAACiB,IAAI,CAACD,QAAQ,CAAC;MAElB1T,eAAe,CAAC,gCAAgC0T,QAAQ,EAAE,CAAC;IAC7D,CAAC,CAAC,OAAOnN,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CvG,eAAe,CAAC,2CAA2C,CAAC;IAC9D;EACF,CAAC;;EAED;EACA,MAAM4T,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI,CAAC5P,eAAe,CAACiO,IAAI,CAAC,CAAC,EAAE;MAC3BpJ,KAAK,CAAC,mCAAmC,CAAC;MAC1C;IACF;IAEA,IAAI7F,YAAY,CAAC8I,MAAM,KAAK,CAAC,EAAE;MAC7BjD,KAAK,CAAC,sFAAsF,CAAC;MAC7F;IACF;IAEAxE,cAAc,CAAC,IAAI,CAAC;IACpBF,mBAAmB,CAAC,EAAE,CAAC;IAEvB,IAAI;MACF,MAAMsC,KAAK,GAAG,IAAI7H,kBAAkB,CAACuB,MAAM,CAAC;MAC5C,MAAMuG,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;QAAED,KAAK,EAAE;MAAmB,CAAC,CAAC;;MAErE;MACA,MAAM8J,UAAU,GAAGxN,YAAY,CAACyN,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAC9C,iBAAiBA,KAAK,GAAG,CAAC,OAAOD,IAAI,CAAChH,SAAS,CAACE,cAAc,CAAC,CAAC,OAAO8G,IAAI,CAACd,WAAW,EACzF,CAAC,CAACgB,IAAI,CAAC,MAAM,CAAC;MAEd,MAAMV,MAAM,GAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAUM,UAAU;AACpB;AACA;AACA,WAAWxM,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MAED,MAAM4C,MAAM,GAAG,MAAMF,KAAK,CAACG,eAAe,CAACqJ,MAAM,CAAC;MAClD,MAAMpJ,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;MACtC,MAAM+M,MAAM,GAAG/M,QAAQ,CAACC,IAAI,CAAC,CAAC;MAE9B5C,mBAAmB,CAAC0P,MAAM,CAAC;MAC3B7T,eAAe,CAAC,mDAAmD,CAAC;IACtE,CAAC,CAAC,OAAOuG,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDpC,mBAAmB,CAAC,mFAAmF,CAAC;MACxGnE,eAAe,CAAC,gDAAgD,CAAC;IACnE,CAAC,SAAS;MACRqE,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;;EAED;;EAEA;EACA,MAAMyP,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF9T,eAAe,CAAC,gDAAgD,CAAC;;MAEjE;MACA,MAAM+T,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QACvDpL,KAAK,EAAE;UAAEI,KAAK,EAAE,IAAI;UAAEE,MAAM,EAAE,GAAG;UAAE+K,UAAU,EAAE;QAAO;MACxD,CAAC,CAAC;MAEF1P,eAAe,CAACsP,MAAM,CAAC;MAEvB,IAAIjO,YAAY,CAACI,OAAO,EAAE;QACxBJ,YAAY,CAACI,OAAO,CAACC,SAAS,GAAG4N,MAAM;QACvC;QACA,MAAMjO,YAAY,CAACI,OAAO,CAACE,IAAI,CAAC,CAAC;MACnC;;MAEA;MACA,MAAMgO,aAAa,GAAG,IAAIrV,KAAK,CAAC;QAC9BsV,UAAU,EAAG1H,IAAI,IAAK,iDAAiDA,IAAI;MAC7E,CAAC,CAAC;MAEFyH,aAAa,CAACE,UAAU,CAAC;QACvBC,WAAW,EAAE,CAAC;QACdC,eAAe,EAAE,CAAC;QAClBC,sBAAsB,EAAE,GAAG;QAC3BC,qBAAqB,EAAE;MACzB,CAAC,CAAC;MAEFN,aAAa,CAACO,SAAS,CAACC,cAAc,CAAC;MACvC3O,QAAQ,CAACC,OAAO,GAAGkO,aAAa;;MAEhC;MACA,IAAItO,YAAY,CAACI,OAAO,EAAE;QACxB,MAAM2O,cAAc,GAAG,IAAI7V,MAAM,CAAC8G,YAAY,CAACI,OAAO,EAAE;UACtD4O,OAAO,EAAE,MAAAA,CAAA,KAAY;YACnB,IAAI7O,QAAQ,CAACC,OAAO,IAAIJ,YAAY,CAACI,OAAO,EAAE;cAC5C,MAAMD,QAAQ,CAACC,OAAO,CAAC6O,IAAI,CAAC;gBAAEtL,KAAK,EAAE3D,YAAY,CAACI;cAAQ,CAAC,CAAC;YAC9D;UACF,CAAC;UACDgD,KAAK,EAAE,IAAI;UACXE,MAAM,EAAE;QACV,CAAC,CAAC;QACFyL,cAAc,CAACG,KAAK,CAAC,CAAC;QACtBnP,SAAS,CAACgP,cAAc,CAAC;MAC3B;;MAEA;MACAI,0BAA0B,CAAC,CAAC;MAE5B1Q,aAAa,CAAC,IAAI,CAAC;MACnBvE,eAAe,CAAC,iGAAiG,CAAC;IAEpH,CAAC,CAAC,OAAOuG,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDvG,eAAe,CAAC,4DAA4D,CAAC;IAC/E;EACF,CAAC;;EAED;EACA,MAAM4U,cAAc,GAAGlW,WAAW,CAAEwW,OAAO,IAAK;IAC9C,IAAI,CAACnP,aAAa,CAACG,OAAO,IAAI,CAACF,gBAAgB,CAACE,OAAO,EAAE;IAEzD,MAAM6C,MAAM,GAAGhD,aAAa,CAACG,OAAO;IACpC,MAAM8C,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IACnC,MAAMkM,aAAa,GAAGnP,gBAAgB,CAACE,OAAO;IAC9C,MAAMkP,UAAU,GAAGD,aAAa,CAAClM,UAAU,CAAC,IAAI,CAAC;;IAEjD;IACAD,GAAG,CAACqM,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEtM,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACK,MAAM,CAAC;IAEhD,IAAI8L,OAAO,CAACI,kBAAkB,IAAIJ,OAAO,CAACI,kBAAkB,CAACxJ,MAAM,GAAG,CAAC,EAAE;MACvE,KAAK,MAAMyJ,SAAS,IAAIL,OAAO,CAACI,kBAAkB,EAAE;QAClD;QACA,MAAME,KAAK,GAAGD,SAAS,CAAC,CAAC,CAAC;QAC1B,MAAME,WAAW,GAAGF,SAAS,CAAC,CAAC,CAAC;QAChC,MAAMG,QAAQ,GAAGvL,IAAI,CAACwL,IAAI,CACxBxL,IAAI,CAACyL,GAAG,CAACJ,KAAK,CAACK,CAAC,GAAGJ,WAAW,CAACI,CAAC,EAAE,CAAC,CAAC,GACpC1L,IAAI,CAACyL,GAAG,CAACJ,KAAK,CAACM,CAAC,GAAGL,WAAW,CAACK,CAAC,EAAE,CAAC,CACrC,CAAC;;QAED;QACA,MAAMC,UAAU,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QACpC,MAAMC,WAAW,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QACrC,MAAMC,eAAe,GAAGF,UAAU,CAACG,KAAK,CAAC,CAACC,GAAG,EAAExF,KAAK,KAClD4E,SAAS,CAACY,GAAG,CAAC,CAACL,CAAC,GAAGP,SAAS,CAACS,WAAW,CAACrF,KAAK,CAAC,CAAC,CAACmF,CACnD,CAAC;QAED,IAAIJ,QAAQ,GAAG,IAAI,EAAE;UACnB;UACA/Q,YAAY,CAAC,IAAI,CAAC;UAClBE,YAAY,CAAC,KAAK,CAAC;;UAEnB;UACA,MAAMgR,CAAC,GAAGJ,WAAW,CAACI,CAAC,GAAG9M,MAAM,CAACG,KAAK;UACtC,MAAM4M,CAAC,GAAGL,WAAW,CAACK,CAAC,GAAG/M,MAAM,CAACK,MAAM;UAEvCgM,UAAU,CAACgB,SAAS,GAAG,SAAS;UAChChB,UAAU,CAACiB,SAAS,CAAC,CAAC;UACtBjB,UAAU,CAACkB,GAAG,CAACT,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG3L,IAAI,CAACoM,EAAE,CAAC;UACvCnB,UAAU,CAACoB,IAAI,CAAC,CAAC;;UAEjB;UACAzR,cAAc,CAAC6G,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;YAAEiK,CAAC;YAAEC,CAAC;YAAEhJ,IAAI,EAAE;UAAO,CAAC,CAAC,CAAC;QAE3D,CAAC,MAAM,IAAImJ,eAAe,IAAIV,SAAS,CAAC,CAAC,CAAC,CAACO,CAAC,GAAGP,SAAS,CAAC,CAAC,CAAC,CAACO,CAAC,EAAE;UAC7D;UACAnR,YAAY,CAAC,KAAK,CAAC;UACnBE,YAAY,CAAC,IAAI,CAAC;;UAElB;UACA,MAAM4R,KAAK,GAAGlB,SAAS,CAAC,CAAC,CAAC,CAACM,CAAC,GAAG9M,MAAM,CAACG,KAAK;UAC3C,MAAMwN,KAAK,GAAGnB,SAAS,CAAC,CAAC,CAAC,CAACO,CAAC,GAAG/M,MAAM,CAACK,MAAM;UAE5CgM,UAAU,CAACuB,wBAAwB,GAAG,iBAAiB;UACvDvB,UAAU,CAACiB,SAAS,CAAC,CAAC;UACtBjB,UAAU,CAACkB,GAAG,CAACG,KAAK,EAAEC,KAAK,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,GAAGvM,IAAI,CAACoM,EAAE,CAAC;UAChDnB,UAAU,CAACoB,IAAI,CAAC,CAAC;UACjBpB,UAAU,CAACuB,wBAAwB,GAAG,aAAa;QAErD,CAAC,MAAM;UACLhS,YAAY,CAAC,KAAK,CAAC;UACnBE,YAAY,CAAC,KAAK,CAAC;QACrB;;QAEA;QACAmE,GAAG,CAACoN,SAAS,GAAG1R,SAAS,GAAG,SAAS,GAAGE,SAAS,GAAG,SAAS,GAAG,SAAS;QACzE,KAAK,MAAMgS,QAAQ,IAAIrB,SAAS,EAAE;UAChCvM,GAAG,CAACqN,SAAS,CAAC,CAAC;UACfrN,GAAG,CAACsN,GAAG,CAACM,QAAQ,CAACf,CAAC,GAAG9M,MAAM,CAACG,KAAK,EAAE0N,QAAQ,CAACd,CAAC,GAAG/M,MAAM,CAACK,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAGe,IAAI,CAACoM,EAAE,CAAC;UACjFvN,GAAG,CAACwN,IAAI,CAAC,CAAC;QACZ;MACF;IACF;EACF,CAAC,EAAE,CAAC9R,SAAS,EAAEE,SAAS,CAAC,CAAC;;EAE1B;EACA,MAAMqQ,0BAA0B,GAAGA,CAAA,KAAM;IACvC,IAAI,yBAAyB,IAAI4B,MAAM,IAAI,mBAAmB,IAAIA,MAAM,EAAE;MACxE,MAAMC,iBAAiB,GAAGD,MAAM,CAACC,iBAAiB,IAAID,MAAM,CAACE,uBAAuB;MACpF,MAAMC,WAAW,GAAG,IAAIF,iBAAiB,CAAC,CAAC;MAE3CE,WAAW,CAACC,UAAU,GAAG,IAAI;MAC7BD,WAAW,CAACE,cAAc,GAAG,IAAI;MACjCF,WAAW,CAACG,IAAI,GAAG,OAAO;MAE1BH,WAAW,CAACI,OAAO,GAAG,MAAM;QAC1B/R,cAAc,CAAC,IAAI,CAAC;QACpBiB,OAAO,CAACU,GAAG,CAAC,yDAAyD,CAAC;MACxE,CAAC;MAEDgQ,WAAW,CAACK,QAAQ,GAAG,MAAO3K,KAAK,IAAK;QACtC,MAAM4K,UAAU,GAAGC,KAAK,CAACC,IAAI,CAAC9K,KAAK,CAACwI,OAAO,CAAC,CACzCzE,GAAG,CAAC7J,MAAM,IAAIA,MAAM,CAAC,CAAC,CAAC,CAAC0Q,UAAU,CAAC,CACnC1G,IAAI,CAAC,EAAE,CAAC;QAEXtK,OAAO,CAACU,GAAG,CAAC,QAAQ,EAAEsQ,UAAU,CAAC;;QAEjC;QACA,IAAIA,UAAU,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;UAC9C,MAAMC,OAAO,GAAGL,UAAU,CAACG,WAAW,CAAC,CAAC,CAAC1F,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACE,IAAI,CAAC,CAAC;UACpE,IAAI0F,OAAO,EAAE;YACXpS,mBAAmB,CAACoS,OAAO,CAAC;YAC5B,MAAMC,mBAAmB,CAACD,OAAO,CAAC;UACpC;QACF;MACF,CAAC;MAEDX,WAAW,CAACa,OAAO,GAAInL,KAAK,IAAK;QAC/BpG,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEmG,KAAK,CAACnG,KAAK,CAAC;MACzD,CAAC;MAEDyQ,WAAW,CAACc,KAAK,GAAG,MAAM;QACxBzS,cAAc,CAAC,KAAK,CAAC;QACrB;QACA,IAAIf,UAAU,EAAE;UACdmJ,UAAU,CAAC,MAAMuJ,WAAW,CAAChC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC;QAC7C;MACF,CAAC;MAEDgC,WAAW,CAAChC,KAAK,CAAC,CAAC;MACnB7P,mBAAmB,CAAC6R,WAAW,CAAC;IAClC,CAAC,MAAM;MACL1Q,OAAO,CAACyR,IAAI,CAAC,kDAAkD,CAAC;MAChE/X,eAAe,CAAC,oDAAoD,CAAC;IACvE;EACF,CAAC;;EAED;EACA,MAAM4X,mBAAmB,GAAG,MAAOD,OAAO,IAAK;IAC7C,IAAI;MAAA,IAAAK,qBAAA;MACFhY,eAAe,CAAC,oBAAoB2X,OAAO,GAAG,CAAC;;MAE/C;MACA,MAAMM,cAAc,IAAAD,qBAAA,GAAGhS,gBAAgB,CAACE,OAAO,cAAA8R,qBAAA,uBAAxBA,qBAAA,CAA0BxO,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC;MAE7E,MAAM/C,KAAK,GAAG,IAAI7H,kBAAkB,CAACuB,MAAM,CAAC;MAC5C,MAAMuG,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;QAAED,KAAK,EAAE;MAAmB,CAAC,CAAC;MAErE,MAAMwJ,MAAM,GAAG;AACrB;AACA;AACA;AACA;AACA;AACA,2CAA2CyH,OAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MAED,MAAM/Q,MAAM,GAAG,MAAMF,KAAK,CAACG,eAAe,CAACqJ,MAAM,CAAC;MAClD,MAAMpJ,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;MACtC,MAAMoR,UAAU,GAAGpR,QAAQ,CAACC,IAAI,CAAC,CAAC;MAElCtB,iBAAiB,CAACyS,UAAU,CAAC;MAC7BlY,eAAe,CAAC,aAAakY,UAAU,CAAChG,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC;;MAE/D;MACA,IAAI,iBAAiB,IAAI2E,MAAM,EAAE;QAC/B,MAAMsB,SAAS,GAAG,IAAIC,wBAAwB,CAACF,UAAU,CAAC;QAC1DC,SAAS,CAACE,IAAI,GAAG,GAAG;QACpBF,SAAS,CAACG,KAAK,GAAG,GAAG;QACrBzB,MAAM,CAAC0B,eAAe,CAACC,KAAK,CAACL,SAAS,CAAC;MACzC;IAEF,CAAC,CAAC,OAAO5R,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvDvG,eAAe,CAAC,uDAAuD,CAAC;IAC1E;EACF,CAAC;;EAED;EACA,MAAMyY,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAIjU,YAAY,EAAE;MAChBA,YAAY,CAACkU,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;MACvDpU,eAAe,CAAC,IAAI,CAAC;IACvB;IAEA,IAAImB,MAAM,EAAE;MACVA,MAAM,CAACiT,IAAI,CAAC,CAAC;MACbhT,SAAS,CAAC,IAAI,CAAC;IACjB;IAEA,IAAIX,gBAAgB,EAAE;MACpBA,gBAAgB,CAAC2T,IAAI,CAAC,CAAC;MACvB1T,mBAAmB,CAAC,IAAI,CAAC;IAC3B;IAEAZ,aAAa,CAAC,KAAK,CAAC;IACpBc,cAAc,CAAC,KAAK,CAAC;IACrBrF,eAAe,CAAC,yCAAyC,CAAC;EAC5D,CAAC;;EAED;EACA,MAAM8Y,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI9S,gBAAgB,CAACE,OAAO,EAAE;MAC5B,MAAM8C,GAAG,GAAGhD,gBAAgB,CAACE,OAAO,CAAC+C,UAAU,CAAC,IAAI,CAAC;MACrDD,GAAG,CAACqM,SAAS,CAAC,CAAC,EAAE,CAAC,EAAErP,gBAAgB,CAACE,OAAO,CAACgD,KAAK,EAAElD,gBAAgB,CAACE,OAAO,CAACkD,MAAM,CAAC;IACtF;IACAnE,WAAW,CAAC,EAAE,CAAC;IACfF,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;;EAED;EACA,MAAMgU,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,WAAW,GAAGhW,YAAY,CAACyN,GAAG,CAACC,IAAI,KAAK;MAC5ChH,SAAS,EAAEgH,IAAI,CAAChH,SAAS,CAAC8J,WAAW,CAAC,CAAC;MACvC5D,WAAW,EAAEc,IAAI,CAACd,WAAW;MAC7BC,OAAO,EAAEa,IAAI,CAACb;MACd;IACF,CAAC,CAAC,CAAC;IAEH,MAAMoJ,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACC,IAAI,CAACC,SAAS,CAACJ,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE;MAAElM,IAAI,EAAE;IAAmB,CAAC,CAAC;IAC3F,MAAME,GAAG,GAAGC,GAAG,CAACC,eAAe,CAAC+L,IAAI,CAAC;IACrC,MAAMI,CAAC,GAAGvL,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACrCsL,CAAC,CAACC,IAAI,GAAGtM,GAAG;IACZqM,CAAC,CAACE,QAAQ,GAAG,sBAAsB,IAAI5P,IAAI,CAAC,CAAC,CAAC6J,WAAW,CAAC,CAAC,CAACtH,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO;IAChFmN,CAAC,CAACG,KAAK,CAAC,CAAC;IACTvM,GAAG,CAACwM,eAAe,CAACzM,GAAG,CAAC;EAC1B,CAAC;;EAED;EACA,MAAM0M,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAAC3R,QAAQ,CAAC7B,OAAO,IAAI,CAAC8B,SAAS,CAAC9B,OAAO,EAAE;IAE7C,MAAM4C,KAAK,GAAGf,QAAQ,CAAC7B,OAAO;IAC9B,MAAM6C,MAAM,GAAGf,SAAS,CAAC9B,OAAO;IAChC,MAAM8C,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;;IAEnC;IACAF,MAAM,CAACG,KAAK,GAAGJ,KAAK,CAACK,UAAU;IAC/BJ,MAAM,CAACK,MAAM,GAAGN,KAAK,CAACO,WAAW;;IAEjC;IACAL,GAAG,CAACM,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEC,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACK,MAAM,CAAC;;IAEvD;IACAL,MAAM,CAAC4Q,MAAM,CAAEV,IAAI,IAAK;MACtB,MAAMW,UAAU,GAAG;QACjBlK,EAAE,EAAE/F,IAAI,CAACgG,GAAG,CAAC,CAAC;QACdsJ,IAAI,EAAEA,IAAI;QACVjM,GAAG,EAAEC,GAAG,CAACC,eAAe,CAAC+L,IAAI,CAAC;QAC9BvP,SAAS,EAAEZ,KAAK,CAACgB,WAAW;QAC5B/J,YAAY,EAAEA,YAAY,IAAI;MAChC,CAAC;MACDH,cAAc,CAACgM,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEgO,UAAU,CAAC,CAAC;IAC/C,CAAC,EAAE,WAAW,CAAC;EACjB,CAAC;;EAED;EACA,MAAMC,eAAe,GAAGA,CAAC9Q,MAAM,EAAEC,GAAG,KAAK;IACvC,MAAM8Q,SAAS,GAAG9Q,GAAG,CAACyF,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE1F,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACK,MAAM,CAAC;IACrE,MAAMgD,IAAI,GAAG0N,SAAS,CAAC1N,IAAI;;IAE3B;IACA,KAAK,IAAIhB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgB,IAAI,CAACN,MAAM,EAAEV,CAAC,IAAI,CAAC,EAAE;MACvC;MACA,MAAM2O,IAAI,GAAG5P,IAAI,CAACU,KAAK,CAAC,KAAK,GAAGuB,IAAI,CAAChB,CAAC,CAAC,GAAG,KAAK,GAAGgB,IAAI,CAAChB,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAGgB,IAAI,CAAChB,CAAC,GAAG,CAAC,CAAC,CAAC;;MAEpF;MACA,IAAI4O,QAAQ;MACZ,IAAID,IAAI,GAAG,GAAG,EAAE;QACd;QACAC,QAAQ,GAAG7P,IAAI,CAACa,GAAG,CAAC,CAAC,EAAE+O,IAAI,GAAG,EAAE,CAAC;MACnC,CAAC,MAAM;QACL;QACAC,QAAQ,GAAG7P,IAAI,CAACY,GAAG,CAAC,GAAG,EAAEgP,IAAI,GAAG,EAAE,CAAC;MACrC;;MAEA;MACA,MAAME,SAAS,GAAGD,QAAQ,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG;MAE1C5N,IAAI,CAAChB,CAAC,CAAC,GAAG6O,SAAS,CAAC,CAAK;MACzB7N,IAAI,CAAChB,CAAC,GAAG,CAAC,CAAC,GAAG6O,SAAS,CAAC,CAAC;MACzB7N,IAAI,CAAChB,CAAC,GAAG,CAAC,CAAC,GAAG6O,SAAS,CAAC,CAAC;MACzB;IACF;IAEAjR,GAAG,CAACkR,YAAY,CAACJ,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;IACjC,OAAO/Q,MAAM;EACf,CAAC;;EAED;EACA,MAAMoR,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAACpS,QAAQ,CAAC7B,OAAO,IAAI,CAAC8B,SAAS,CAAC9B,OAAO,EAAE;MAC3ClG,eAAe,CAAC,+BAA+B,CAAC;MAChD;IACF;IAEAF,cAAc,CAAC,IAAI,CAAC;IACpBE,eAAe,CAAC,qBAAqB,CAAC;IAEtC,IAAI;MACF,MAAM8I,KAAK,GAAGf,QAAQ,CAAC7B,OAAO;MAC9B,MAAM6C,MAAM,GAAGf,SAAS,CAAC9B,OAAO;MAChC,MAAM8C,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;;MAEnC;MACAF,MAAM,CAACG,KAAK,GAAGJ,KAAK,CAACK,UAAU,IAAI,GAAG;MACtCJ,MAAM,CAACK,MAAM,GAAGN,KAAK,CAACO,WAAW,IAAI,GAAG;MAExC,IAAIP,KAAK,CAACK,UAAU,KAAK,CAAC,IAAIL,KAAK,CAACO,WAAW,KAAK,CAAC,EAAE;QACrDrJ,eAAe,CAAC,2BAA2B,CAAC;QAC5CF,cAAc,CAAC,KAAK,CAAC;QACrB;MACF;;MAEA;MACAkJ,GAAG,CAACM,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEC,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACK,MAAM,CAAC;MACvDpJ,eAAe,CAAC,wCAAwC,CAAC;;MAEzD;MACA6Z,eAAe,CAAC9Q,MAAM,EAAEC,GAAG,CAAC;;MAE5B;MACA,IAAId,MAAM,GAAGjI,SAAS;MACtB,IAAI,CAACiI,MAAM,EAAE;QACXA,MAAM,GAAG,MAAMD,aAAa,CAAC,CAAC;MAChC;MAEA,IAAIC,MAAM,EAAE;QACVlI,eAAe,CAAC,yBAAyB,CAAC;;QAE1C;QACA,MAAMuJ,OAAO,GAAGR,MAAM,CAACS,SAAS,CAAC,WAAW,CAAC;QAE7C,MAAM;UAAE4C,IAAI,EAAE;YAAErF,IAAI;YAAEqT;UAAW;QAAE,CAAC,GAAG,MAAMlS,MAAM,CAACmS,SAAS,CAAC9Q,OAAO,EAAE;UACrE+Q,SAAS,EAAE;YAAEC,GAAG,EAAE,CAAC;YAAErJ,IAAI,EAAE,CAAC;YAAEhI,KAAK,EAAEH,MAAM,CAACG,KAAK;YAAEE,MAAM,EAAEL,MAAM,CAACK;UAAO;QAC3E,CAAC,CAAC;QAEF,MAAMoR,SAAS,GAAGzT,IAAI,CAACkL,IAAI,CAAC,CAAC,IAAI,kBAAkB;QACnD,MAAMwI,cAAc,GAAGL,UAAU,GAAG,iBAAiBA,UAAU,CAAC/P,OAAO,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;QACnFrK,eAAe,CAACwa,SAAS,GAAGC,cAAc,CAAC;QAC3CnU,OAAO,CAACU,GAAG,CAAC,aAAa,EAAEwT,SAAS,EAAE,aAAa,EAAEJ,UAAU,CAAC;MAClE,CAAC,MAAM;QACLpa,eAAe,CAAC,kCAAkC,CAAC;MACrD;IAEF,CAAC,CAAC,OAAOuG,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CvG,eAAe,CAAC,oBAAoB,GAAGuG,KAAK,CAACoC,OAAO,CAAC;IACvD,CAAC,SAAS;MACR7I,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;;EAED;EACA,MAAM4a,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI,CAAC3S,QAAQ,CAAC7B,OAAO,IAAI,CAAC8B,SAAS,CAAC9B,OAAO,EAAE;MAC3ClG,eAAe,CAAC,+BAA+B,CAAC;MAChD;IACF;IAEAF,cAAc,CAAC,IAAI,CAAC;IACpBE,eAAe,CAAC,gDAAgD,CAAC;IAEjE,IAAI;MACF,MAAM8I,KAAK,GAAGf,QAAQ,CAAC7B,OAAO;MAC9B,MAAM6C,MAAM,GAAGf,SAAS,CAAC9B,OAAO;MAChC,MAAM8C,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;;MAEnC;MACAF,MAAM,CAACG,KAAK,GAAGJ,KAAK,CAACK,UAAU,IAAI,GAAG;MACtCJ,MAAM,CAACK,MAAM,GAAGN,KAAK,CAACO,WAAW,IAAI,GAAG;MAExC,IAAIP,KAAK,CAACK,UAAU,KAAK,CAAC,IAAIL,KAAK,CAACO,WAAW,KAAK,CAAC,EAAE;QACrDrJ,eAAe,CAAC,2BAA2B,CAAC;QAC5CF,cAAc,CAAC,KAAK,CAAC;QACrB;MACF;;MAEA;MACAkJ,GAAG,CAACM,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEC,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACK,MAAM,CAAC;;MAEvD;MACA,IAAIlB,MAAM,GAAGjI,SAAS;MACtB,IAAI,CAACiI,MAAM,EAAE;QACXA,MAAM,GAAG,MAAMD,aAAa,CAAC,CAAC;MAChC;MAEA,IAAIC,MAAM,EAAE;QACV;QACA,MAAMgN,OAAO,GAAG,EAAE;;QAElB;QACAlV,eAAe,CAAC,uCAAuC,CAAC;QACxDgJ,GAAG,CAACM,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEC,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACK,MAAM,CAAC;QACvDyQ,eAAe,CAAC9Q,MAAM,EAAEC,GAAG,CAAC;QAC5B,MAAM2R,QAAQ,GAAG5R,MAAM,CAACS,SAAS,CAAC,WAAW,CAAC;QAE9C,MAAMtB,MAAM,CAACI,aAAa,CAAC;UACzBE,qBAAqB,EAAE,GAAG;UAAE;UAC5BD,uBAAuB,EAAE;QAC3B,CAAC,CAAC;QAEF,MAAMqS,OAAO,GAAG,MAAM1S,MAAM,CAACmS,SAAS,CAACM,QAAQ,CAAC;QAChDzF,OAAO,CAACzJ,IAAI,CAAC;UAAEoP,MAAM,EAAE,eAAe;UAAE9T,IAAI,EAAE6T,OAAO,CAACxO,IAAI,CAACrF,IAAI;UAAEqT,UAAU,EAAEQ,OAAO,CAACxO,IAAI,CAACgO;QAAW,CAAC,CAAC;;QAEvG;QACApa,eAAe,CAAC,8CAA8C,CAAC;QAC/DgJ,GAAG,CAACM,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEC,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACK,MAAM,CAAC;QAEvD,MAAMlB,MAAM,CAACI,aAAa,CAAC;UACzBE,qBAAqB,EAAE,GAAG;UAAE;UAC5BD,uBAAuB,EAAE;QAC3B,CAAC,CAAC;QAEF,MAAMuS,QAAQ,GAAG/R,MAAM,CAACS,SAAS,CAAC,WAAW,CAAC;QAC9C,MAAMuR,OAAO,GAAG,MAAM7S,MAAM,CAACmS,SAAS,CAACS,QAAQ,CAAC;QAChD5F,OAAO,CAACzJ,IAAI,CAAC;UAAEoP,MAAM,EAAE,gBAAgB;UAAE9T,IAAI,EAAEgU,OAAO,CAAC3O,IAAI,CAACrF,IAAI;UAAEqT,UAAU,EAAEW,OAAO,CAAC3O,IAAI,CAACgO;QAAW,CAAC,CAAC;;QAExG;QACApa,eAAe,CAAC,iCAAiC,CAAC;QAClDgJ,GAAG,CAACM,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEC,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACK,MAAM,CAAC;QAEvD,MAAMlB,MAAM,CAACI,aAAa,CAAC;UACzBE,qBAAqB,EAAE,IAAI;UAAE;UAC7BC,yBAAyB,EAAE;QAC7B,CAAC,CAAC;QAEF,MAAMuS,QAAQ,GAAGjS,MAAM,CAACS,SAAS,CAAC,WAAW,CAAC;QAC9C,MAAMyR,OAAO,GAAG,MAAM/S,MAAM,CAACmS,SAAS,CAACW,QAAQ,CAAC;QAChD9F,OAAO,CAACzJ,IAAI,CAAC;UAAEoP,MAAM,EAAE,UAAU;UAAE9T,IAAI,EAAEkU,OAAO,CAAC7O,IAAI,CAACrF,IAAI;UAAEqT,UAAU,EAAEa,OAAO,CAAC7O,IAAI,CAACgO;QAAW,CAAC,CAAC;;QAElG;QACA,MAAMc,UAAU,GAAGhG,OAAO,CAACiG,MAAM,CAAC,CAACC,IAAI,EAAElV,OAAO,KAC9CA,OAAO,CAACkU,UAAU,GAAGgB,IAAI,CAAChB,UAAU,GAAGlU,OAAO,GAAGkV,IACnD,CAAC;;QAED;QACA,IAAIC,WAAW,GAAG,YAAYH,UAAU,CAACL,MAAM,MAAMK,UAAU,CAACnU,IAAI,MAAM;QAC1EmO,OAAO,CAACyD,OAAO,CAAC/R,MAAM,IAAI;UAAA,IAAA0U,kBAAA;UACxBD,WAAW,IAAI,GAAGzU,MAAM,CAACiU,MAAM,MAAAS,kBAAA,GAAK1U,MAAM,CAACwT,UAAU,cAAAkB,kBAAA,uBAAjBA,kBAAA,CAAmBjR,OAAO,CAAC,CAAC,CAAC,OAAOzD,MAAM,CAACG,IAAI,MAAM;QAC3F,CAAC,CAAC;QAEF/G,eAAe,CAACqb,WAAW,CAAC;QAC5B/U,OAAO,CAACU,GAAG,CAAC,uBAAuB,EAAEkO,OAAO,CAAC;MAC/C,CAAC,MAAM;QACLlV,eAAe,CAAC,kCAAkC,CAAC;MACrD;IAEF,CAAC,CAAC,OAAOuG,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvDvG,eAAe,CAAC,6BAA6B,GAAGuG,KAAK,CAACoC,OAAO,CAAC;IAChE,CAAC,SAAS;MACR7I,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;;EAED;EACA,MAAMyb,kBAAkB,GAAG,MAAAA,CAAOC,YAAY,EAAEC,OAAO,KAAK;IAC1D,IAAI,CAACtb,MAAM,EAAE;MACXQ,gBAAgB,CAAC,wCAAwC,CAAC;MAC1D;IACF;IAEAF,iBAAiB,CAAC,IAAI,CAAC;IACvBE,gBAAgB,CAAC,mCAAmC,CAAC;IAErD,IAAI;MACF;MACA,MAAM8F,KAAK,GAAG,IAAI7H,kBAAkB,CAACuB,MAAM,CAAC;MAC5C,MAAMuG,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;QAAED,KAAK,EAAE;MAAmB,CAAC,CAAC;;MAErE;MACA,MAAMuF,UAAU,GAAGuP,YAAY,CAACtP,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAE7C,MAAM+D,SAAS,GAAG;QAChB9D,UAAU,EAAE;UACVC,IAAI,EAAEH,UAAU;UAChBI,QAAQ,EAAE;QACZ;MACF,CAAC;MAED,MAAM6D,MAAM,GAAG,mHAAmHuL,OAAO;AAC/I;AACA;AACA;AACA;AACA,yDAAyD;;MAEnD;MACA,MAAM7U,MAAM,GAAG,MAAMF,KAAK,CAACG,eAAe,CAAC,CAACqJ,MAAM,EAAED,SAAS,CAAC,CAAC;MAC/D,MAAMnJ,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;MACtC,MAAM4U,aAAa,GAAG5U,QAAQ,CAACC,IAAI,CAAC,CAAC;MAErCpG,gBAAgB,CAAC+a,aAAa,CAAC;;MAE/B;MACA1b,eAAe,CAAC,wBAAwB0b,aAAa,yBAAyBD,OAAO,EAAE,CAAC;IAE1F,CAAC,CAAC,OAAOlV,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,IAAIoV,YAAY,GAAG,UAAUpV,KAAK,CAACoC,OAAO,EAAE;MAE5C,IAAIpC,KAAK,CAACoC,OAAO,CAAC+O,QAAQ,CAAC,iBAAiB,CAAC,EAAE;QAC7CiE,YAAY,GAAG,sGAAsG;MACvH,CAAC,MAAM,IAAIpV,KAAK,CAACoC,OAAO,CAAC+O,QAAQ,CAAC,qBAAqB,CAAC,EAAE;QACxDiE,YAAY,GAAG,mHAAmH;MACpI;MAEAhb,gBAAgB,CAACgb,YAAY,CAAC;IAChC,CAAC,SAAS;MACRlb,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;;EAED;EACA,MAAMmb,kBAAkB,GAAG,MAAOJ,YAAY,IAAK;IACjD,MAAM7Q,YAAY,GAAGtK,OAAO,CAACC,GAAG,CAACC,wBAAwB;IAEzD,IAAI,CAACoK,YAAY,EAAE;MACjBhK,gBAAgB,CAAC,6DAA6D,CAAC;MAC/EE,mBAAmB,CAAC,6DAA6D,CAAC;MAClFE,oBAAoB,CAAC,IAAI,CAAC;MAC1B;IACF;;IAEA;IACA,MAAM4O,GAAG,GAAGhG,IAAI,CAACgG,GAAG,CAAC,CAAC;IACtB,MAAMkM,iBAAiB,GAAGlM,GAAG,GAAG3O,WAAW;IAC3C,MAAM8a,QAAQ,GAAG,IAAI,CAAC,CAAC;;IAEvB,IAAID,iBAAiB,GAAGC,QAAQ,EAAE;MAChC,MAAMC,QAAQ,GAAG5R,IAAI,CAAC6R,IAAI,CAAC,CAACF,QAAQ,GAAGD,iBAAiB,IAAI,IAAI,CAAC;MACjE,MAAMI,WAAW,GAAG,kBAAkBF,QAAQ,yCAAyC;MACvFlb,mBAAmB,CAACob,WAAW,CAAC;MAChClb,oBAAoB,CAAC,IAAI,CAAC;MAC1B;IACF;IAEAE,cAAc,CAAC0O,GAAG,CAAC;IACnBlP,iBAAiB,CAAC,IAAI,CAAC;IACvBM,oBAAoB,CAAC,IAAI,CAAC;IAE1B,IAAI;MACF;MACA,MAAMmb,cAAc,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;MAElDvb,gBAAgB,CAACub,cAAc,CAAC;MAChCrb,mBAAmB,CAACqb,cAAc,CAAC;;MAEnC;MACA,MAAMzV,KAAK,GAAG,IAAI7H,kBAAkB,CAAC+L,YAAY,CAAC;MAClD,MAAMjE,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;QAAED,KAAK,EAAE;MAAmB,CAAC,CAAC;;MAErE;MACA,MAAMwJ,MAAM,GAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;;MAEvE;MACA,MAAMjE,UAAU,GAAGuP,YAAY,CAACtP,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAE7C,MAAM+D,SAAS,GAAG;QAChB9D,UAAU,EAAE;UACVC,IAAI,EAAEH,UAAU;UAChBI,QAAQ,EAAE;QACZ;MACF,CAAC;;MAED;MACA,MAAMzF,MAAM,GAAG,MAAMF,KAAK,CAACG,eAAe,CAAC,CAACqJ,MAAM,EAAED,SAAS,CAAC,CAAC;MAC/D,MAAMnJ,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;MACtC,MAAMwF,QAAQ,GAAGxF,QAAQ,CAACC,IAAI,CAAC,CAAC;MAEhC,MAAMwF,YAAY,GAAG;AAC3B;AACA,EAAED,QAAQ;AACV;AACA;AACA,gDAAgD;MAE1C3L,gBAAgB,CAAC4L,YAAY,CAAC;MAC9B1L,mBAAmB,CAAC0L,YAAY,CAAC;MACjCvM,eAAe,CAAC,oEAAoE,CAAC;IAEvF,CAAC,CAAC,OAAOuG,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,IAAIiG,QAAQ,GAAG,gBAAgBjG,KAAK,CAACoC,OAAO,EAAE;MAE9C,IAAIpC,KAAK,CAACoC,OAAO,CAAC+O,QAAQ,CAAC,iBAAiB,CAAC,EAAE;QAC7ClL,QAAQ,GAAG,wFAAwF;MACrG,CAAC,MAAM,IAAIjG,KAAK,CAACoC,OAAO,CAAC+O,QAAQ,CAAC,qBAAqB,CAAC,EAAE;QACxDlL,QAAQ,GAAG,uFAAuF;MACpG,CAAC,MAAM,IAAIjG,KAAK,CAACoC,OAAO,CAAC+O,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAC3ClL,QAAQ,GAAG,+FAA+F;MAC5G,CAAC,MAAM;QACLA,QAAQ,IAAI;AACpB;AACA;AACA;AACA;AACA;AACA,wCAAwC;MAClC;MAEA7L,gBAAgB,CAAC6L,QAAQ,CAAC;MAC1B3L,mBAAmB,CAAC2L,QAAQ,CAAC;MAC7BzL,oBAAoB,CAAC,IAAI,CAAC;IAC5B,CAAC,SAAS;MACRN,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;;EAED;EACA,MAAM0b,uBAAuB,GAAG,MAAAA,CAAA,KAAY;IAC1C,MAAMxR,YAAY,GAAGtK,OAAO,CAACC,GAAG,CAACC,wBAAwB;IAEzD,IAAI,CAACoK,YAAY,EAAE;MACjB9B,KAAK,CAAC,6DAA6D,CAAC;MACpE;IACF;IAEA,IAAI,CAACvH,YAAY,CAAC2Q,IAAI,CAAC,CAAC,EAAE;MACxBpJ,KAAK,CAAC,yBAAyB,CAAC;MAChC;IACF;IAEA,IAAI,CAACjI,gBAAgB,EAAE;MACrBiI,KAAK,CAAC,2DAA2D,CAAC;MAClE;IACF;;IAEA;IACA,MAAM8G,GAAG,GAAGhG,IAAI,CAACgG,GAAG,CAAC,CAAC;IACtB,MAAMkM,iBAAiB,GAAGlM,GAAG,GAAG3O,WAAW;IAC3C,MAAM8a,QAAQ,GAAG,IAAI,CAAC,CAAC;;IAEvB,IAAID,iBAAiB,GAAGC,QAAQ,EAAE;MAChC,MAAMC,QAAQ,GAAG5R,IAAI,CAAC6R,IAAI,CAAC,CAACF,QAAQ,GAAGD,iBAAiB,IAAI,IAAI,CAAC;MACjEhT,KAAK,CAAC,eAAekT,QAAQ,0CAA0C,CAAC;MACxE;IACF;IAEA9a,cAAc,CAAC0O,GAAG,CAAC;IACnBlP,iBAAiB,CAAC,IAAI,CAAC;IAEvB,IAAI;MACF;MACA,MAAM2b,kBAAkB,GAAG;AACjC;AACA;AACA,EAAExb,gBAAgB;AAClB;AACA;AACA,EAAEQ,mBAAmB,CAACqP,GAAG,CAAC4L,GAAG,IAAI,GAAGA,GAAG,CAACC,IAAI,KAAKD,GAAG,CAACE,OAAO,EAAE,CAAC,CAAC3L,IAAI,CAAC,IAAI,CAAC;AAC1E;AACA,oBAAoBtP,YAAY;AAChC;AACA,4JAA4J;;MAEtJ;MACA,MAAMmF,KAAK,GAAG,IAAI7H,kBAAkB,CAAC+L,YAAY,CAAC;MAClD,MAAMjE,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;QAAED,KAAK,EAAE;MAAmB,CAAC,CAAC;;MAErE;MACA,MAAME,MAAM,GAAG,MAAMF,KAAK,CAACG,eAAe,CAACuV,kBAAkB,CAAC;MAC9D,MAAMtV,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;MACtC,MAAM+M,MAAM,GAAG/M,QAAQ,CAACC,IAAI,CAAC,CAAC;;MAE9B;MACA,MAAMyV,eAAe,GAAG,CACtB,GAAGpb,mBAAmB,EACtB;QAAEkb,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAEjb;MAAa,CAAC,EACvC;QAAEgb,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAE1I;MAAO,CAAC,CACvC;;MAED;MACA,MAAM4I,cAAc,GAAGD,eAAe,CAAC/I,KAAK,CAAC,CAAC,CAAC,CAAC;MAChDpS,sBAAsB,CAACob,cAAc,CAAC;;MAEtC;MACAlb,eAAe,CAAC,EAAE,CAAC;IAErB,CAAC,CAAC,OAAOgF,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,IAAIoV,YAAY,GAAG,UAAUpV,KAAK,CAACoC,OAAO,EAAE;MAE5C,IAAIpC,KAAK,CAACoC,OAAO,CAAC+O,QAAQ,CAAC,iBAAiB,CAAC,EAAE;QAC7CiE,YAAY,GAAG,wFAAwF;MACzG,CAAC,MAAM,IAAIpV,KAAK,CAACoC,OAAO,CAAC+O,QAAQ,CAAC,qBAAqB,CAAC,EAAE;QACxDiE,YAAY,GAAG,uFAAuF;MACxG,CAAC,MAAM,IAAIpV,KAAK,CAACoC,OAAO,CAAC+O,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAC3CiE,YAAY,GAAG,oGAAoG;MACrH;MAEA9S,KAAK,CAAC8S,YAAY,CAAC;IACrB,CAAC,SAAS;MACRlb,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;;EAED;EACA,MAAMic,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI,CAAC3U,QAAQ,CAAC7B,OAAO,IAAI,CAAC8B,SAAS,CAAC9B,OAAO,EAAE;MAC3ClG,eAAe,CAAC,+BAA+B,CAAC;MAChD;IACF;IAEAF,cAAc,CAAC,IAAI,CAAC;IACpBE,eAAe,CAAC,uCAAuC,CAAC;IAExD,IAAI;MACF,MAAM8I,KAAK,GAAGf,QAAQ,CAAC7B,OAAO;MAC9B,MAAM6C,MAAM,GAAGf,SAAS,CAAC9B,OAAO;MAChC,MAAM8C,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;;MAEnC;MACAF,MAAM,CAACG,KAAK,GAAGJ,KAAK,CAACK,UAAU,IAAI,GAAG;MACtCJ,MAAM,CAACK,MAAM,GAAGN,KAAK,CAACO,WAAW,IAAI,GAAG;MAExC,IAAIP,KAAK,CAACK,UAAU,KAAK,CAAC,IAAIL,KAAK,CAACO,WAAW,KAAK,CAAC,EAAE;QACrDrJ,eAAe,CAAC,2BAA2B,CAAC;QAC5CF,cAAc,CAAC,KAAK,CAAC;QACrB;MACF;;MAEA;MACAkJ,GAAG,CAACM,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEC,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACK,MAAM,CAAC;;MAEvD;MACA,MAAMG,OAAO,GAAGR,MAAM,CAACS,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,CAAC;;MAErD;MACA,MAAMoS,kBAAkB,CAACrS,OAAO,CAAC;IAEnC,CAAC,CAAC,OAAOhD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CvG,eAAe,CAAC,yBAAyB,GAAGuG,KAAK,CAACoC,OAAO,CAAC;IAC5D,CAAC,SAAS;MACR7I,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;;EAED;EACA,MAAM6c,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI,CAAC5U,QAAQ,CAAC7B,OAAO,IAAI,CAAC8B,SAAS,CAAC9B,OAAO,EAAE;MAC3ClG,eAAe,CAAC,+BAA+B,CAAC;MAChD;IACF;IAEAF,cAAc,CAAC,IAAI,CAAC;IACpBE,eAAe,CAAC,mCAAmC,CAAC;IAEpD,IAAI;MACF,MAAM8I,KAAK,GAAGf,QAAQ,CAAC7B,OAAO;MAC9B,MAAM6C,MAAM,GAAGf,SAAS,CAAC9B,OAAO;MAChC,MAAM8C,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;;MAEnC;MACAF,MAAM,CAACG,KAAK,GAAGJ,KAAK,CAACK,UAAU,IAAI,GAAG;MACtCJ,MAAM,CAACK,MAAM,GAAGN,KAAK,CAACO,WAAW,IAAI,GAAG;MAExC,IAAIP,KAAK,CAACK,UAAU,KAAK,CAAC,IAAIL,KAAK,CAACO,WAAW,KAAK,CAAC,EAAE;QACrDrJ,eAAe,CAAC,2BAA2B,CAAC;QAC5CF,cAAc,CAAC,KAAK,CAAC;QACrB;MACF;;MAEA;MACAkJ,GAAG,CAACM,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEC,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACK,MAAM,CAAC;MACvDpJ,eAAe,CAAC,wBAAwB,CAAC;;MAEzC;MACA6Z,eAAe,CAAC9Q,MAAM,EAAEC,GAAG,CAAC;;MAE5B;MACA,IAAId,MAAM,GAAGjI,SAAS;MACtB,IAAI,CAACiI,MAAM,EAAE;QACXA,MAAM,GAAG,MAAMD,aAAa,CAAC,CAAC;MAChC;MAEA,IAAIC,MAAM,EAAE;QACVlI,eAAe,CAAC,gBAAgB,CAAC;;QAEjC;QACA,MAAMuJ,OAAO,GAAGR,MAAM,CAACS,SAAS,CAAC,WAAW,CAAC;QAE7C,MAAM;UAAE4C,IAAI,EAAE;YAAErF,IAAI;YAAEqT;UAAW;QAAE,CAAC,GAAG,MAAMlS,MAAM,CAACmS,SAAS,CAAC9Q,OAAO,CAAC;QACtE,MAAMkS,OAAO,GAAG1U,IAAI,CAACkL,IAAI,CAAC,CAAC,IAAI,kBAAkB;QAEjDjS,eAAe,CAAC,eAAeyb,OAAO,2CAA2C,CAAC;;QAElF;QACA,MAAMF,kBAAkB,CAAChS,OAAO,EAAEkS,OAAO,CAAC;MAE5C,CAAC,MAAM;QACLzb,eAAe,CAAC,kCAAkC,CAAC;MACrD;IAEF,CAAC,CAAC,OAAOuG,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvDvG,eAAe,CAAC,oBAAoB,GAAGuG,KAAK,CAACoC,OAAO,CAAC;IACvD,CAAC,SAAS;MACR7I,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;;EAED;EACA,MAAM8c,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,MAAMzC,UAAU,CAAC,CAAC;IAClB1M,UAAU,CAAC,MAAM;MACfiM,cAAc,CAAC,CAAC;IAClB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACX,CAAC;;EAED;EACA,MAAMmD,gBAAgB,GAAGA,CAAA,KAAM;IAC7Bld,WAAW,CAACgZ,OAAO,CAACiB,UAAU,IAAI;MAChC,IAAIA,UAAU,CAAC5M,GAAG,EAAE;QAClBC,GAAG,CAACwM,eAAe,CAACG,UAAU,CAAC5M,GAAG,CAAC;MACrC;IACF,CAAC,CAAC;IACFpN,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;;EAED;EACA,MAAMkd,YAAY,GAAG,uBAAuB;;EAE5C;EACA,MAAM1P,oBAAoB,GAAG,MAAO7N,SAAS,IAAK;IAChD,MAAMwd,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE1d,SAAS,CAAC;IAEnC,IAAI;MACF,MAAMuH,QAAQ,GAAG,MAAMoW,KAAK,CAAC,GAAGJ,YAAY,SAAS,EAAE;QACrDjC,MAAM,EAAE,MAAM;QACdzI,IAAI,EAAE2K;MACR,CAAC,CAAC;MAEF,IAAI,CAACjW,QAAQ,CAACqW,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,kBAAkBtW,QAAQ,CAACuW,MAAM,IAAIvW,QAAQ,CAACwW,UAAU,EAAE,CAAC;MAC7E;MAEA,MAAM1W,MAAM,GAAG,MAAME,QAAQ,CAACyW,IAAI,CAAC,CAAC;MACpC,OAAO3W,MAAM;IACf,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAM+G,uBAAuB,GAAG,MAAAA,CAAOkQ,SAAS,EAAEC,KAAK,GAAG,kBAAkB,KAAK;IAC/E,IAAI;MACF,MAAM3W,QAAQ,GAAG,MAAMoW,KAAK,CAAC,GAAGJ,YAAY,SAAS,EAAE;QACrDjC,MAAM,EAAE,MAAM;QACd6C,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDtL,IAAI,EAAE+G,IAAI,CAACC,SAAS,CAAC;UACnBoE,SAAS;UACTC;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAAC3W,QAAQ,CAACqW,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsBtW,QAAQ,CAACuW,MAAM,IAAIvW,QAAQ,CAACwW,UAAU,EAAE,CAAC;MACjF;MAEA,MAAM1W,MAAM,GAAG,MAAME,QAAQ,CAACyW,IAAI,CAAC,CAAC;MACpC,OAAO3W,MAAM;IACf,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMoX,YAAY,GAAG,MAAAA,CAAOxW,SAAS,EAAEyW,KAAK,KAAK;IAC/C,IAAI;MACF,MAAM9W,QAAQ,GAAG,MAAMoW,KAAK,CAAC,GAAGJ,YAAY,UAAU,EAAE;QACtDjC,MAAM,EAAE,MAAM;QACd6C,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDtL,IAAI,EAAE+G,IAAI,CAACC,SAAS,CAAC;UACnBjS,SAAS;UACTyW;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAAC9W,QAAQ,CAACqW,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,iBAAiBtW,QAAQ,CAACuW,MAAM,IAAIvW,QAAQ,CAACwW,UAAU,EAAE,CAAC;MAC5E;MAEA,MAAM1W,MAAM,GAAG,MAAME,QAAQ,CAACyW,IAAI,CAAC,CAAC;MACpC,OAAO3W,MAAM;IACf,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMsX,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI,CAAC1W,SAAS,IAAI,CAACM,SAAS,CAACwK,IAAI,CAAC,CAAC,EAAE;MACnCrK,cAAc,CAAC,oDAAoD,CAAC;MACpE;IACF;IAEAE,aAAa,CAAC,IAAI,CAAC;IACnBF,cAAc,CAAC,8BAA8B,CAAC;IAE9C,IAAI;MACF,MAAMhB,MAAM,GAAG,MAAM+W,YAAY,CAACxW,SAAS,EAAEM,SAAS,CAACwK,IAAI,CAAC,CAAC,CAAC;MAC9D3L,OAAO,CAACU,GAAG,CAAC,eAAe,EAAEJ,MAAM,CAAC;MAEpC,IAAIkX,eAAe,GAAG,WAAWlX,MAAM,CAACiN,MAAM,MAAM;MAEpD,IAAIjN,MAAM,CAACmX,KAAK,IAAInX,MAAM,CAACmX,KAAK,CAACjS,MAAM,GAAG,CAAC,EAAE;QAC3CgS,eAAe,IAAI,wBAAwB;QAC3ClX,MAAM,CAACmX,KAAK,CAACpF,OAAO,CAACqF,IAAI,IAAI;UAC3BF,eAAe,IAAI,KAAKE,IAAI,CAACC,QAAQ,KAAKD,IAAI,CAACjX,IAAI,IAAI;QACzD,CAAC,CAAC;QACF+W,eAAe,IAAI,IAAI;MACzB;MAEA,IAAIlX,MAAM,CAACsX,UAAU,IAAItX,MAAM,CAACsX,UAAU,CAACpS,MAAM,GAAG,CAAC,EAAE;QACrDgS,eAAe,IAAI,wBAAwB;QAC3ClX,MAAM,CAACsX,UAAU,CAACvF,OAAO,CAACwF,IAAI,IAAI;UAChCL,eAAe,IAAI,MAAMK,IAAI,CAACC,QAAQ,QAAQD,IAAI,CAACtK,MAAM,IAAI;QAC/D,CAAC,CAAC;MACJ;MAEAjM,cAAc,CAACkW,eAAe,CAAC;IACjC,CAAC,CAAC,OAAOvX,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrCqB,cAAc,CAAC,iBAAiBrB,KAAK,CAACoC,OAAO,EAAE,CAAC;IAClD,CAAC,SAAS;MACRb,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC;EAED,oBACE5I,OAAA;IAAKmf,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBpf,OAAA;MAAQmf,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5Bpf,OAAA;QAAAof,QAAA,EAAI;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7Bxf,OAAA;QAAAof,QAAA,EAAG;MAAwE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAG/Exf,OAAA;QAAKmf,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/Bpf,OAAA;UACEyf,OAAO,EAAEra,UAAU,GAAGmU,YAAY,GAAG3E,kBAAmB;UACxDuK,SAAS,EAAE,OAAO/Z,UAAU,GAAG,QAAQ,GAAG,SAAS,cAAe;UAAAga,QAAA,EAEjEha,UAAU,GAAG,mBAAmB,GAAG;QAAsC;UAAAia,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpE,CAAC,EACRtZ,WAAW,iBACVlG,OAAA;UAAKmf,SAAS,EAAC,qBAAqB;UAAAC,QAAA,EAAC;QAErC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,EAGRpa,UAAU,iBACTpF,OAAA;MAAKmf,SAAS,EAAC,2BAA2B;MAAAC,QAAA,gBACxCpf,OAAA;QAAKmf,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC7Bpf,OAAA;UAAKmf,SAAS,EAAC,sBAAsB;UAAAC,QAAA,gBACnCpf,OAAA;YACE0f,GAAG,EAAE9Y,YAAa;YAClB+Y,QAAQ;YACRC,KAAK;YACLC,WAAW;YACXV,SAAS,EAAC,YAAY;YACtBnV,KAAK,EAAE,IAAK;YACZE,MAAM,EAAE,GAAI;YACZ4H,KAAK,EAAE;cAAE9H,KAAK,EAAE,MAAM;cAAEE,MAAM,EAAE,MAAM;cAAE4V,SAAS,EAAE;YAAQ;UAAE;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9D,CAAC,eACFxf,OAAA;YACE0f,GAAG,EAAE7Y,aAAc;YACnBsY,SAAS,EAAC,qBAAqB;YAC/BnV,KAAK,EAAE,IAAK;YACZE,MAAM,EAAE;UAAI;YAAAmV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACb,CAAC,eACFxf,OAAA;YACE0f,GAAG,EAAE5Y,gBAAiB;YACtBqY,SAAS,EAAC,gBAAgB;YAC1BnV,KAAK,EAAE,IAAK;YACZE,MAAM,EAAE;UAAI;YAAAmV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACb,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAENxf,OAAA;UAAKmf,SAAS,EAAC,eAAe;UAAAC,QAAA,eAC5Bpf,OAAA;YAAKmf,SAAS,EAAC,gBAAgB;YAAAC,QAAA,gBAC7Bpf,OAAA;cAAKmf,SAAS,EAAE,eAAe3Z,SAAS,GAAG,QAAQ,GAAG,EAAE,EAAG;cAAA4Z,QAAA,EAAC;YAE5D;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACNxf,OAAA;cAAKmf,SAAS,EAAE,eAAezZ,SAAS,GAAG,QAAQ,GAAG,EAAE,EAAG;cAAA0Z,QAAA,EAAC;YAE5D;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACNxf,OAAA;cAAQyf,OAAO,EAAE7F,aAAc;cAACuF,SAAS,EAAC,qBAAqB;cAAAC,QAAA,EAAC;YAEhE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAENxf,OAAA;QAAKmf,SAAS,EAAC,cAAc;QAAAC,QAAA,eAC3Bpf,OAAA;UAAKmf,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAChCpf,OAAA;YAAAof,QAAA,EAAI;UAAgC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACzCxf,OAAA;YAAKmf,SAAS,EAAC,cAAc;YAAAC,QAAA,eAC3Bpf,OAAA;cAAKmf,SAAS,EAAE,mBAAmBjZ,WAAW,GAAG,WAAW,GAAG,EAAE,EAAG;cAAAkZ,QAAA,EACjElZ,WAAW,GAAG,gCAAgC,GAAG;YAA+B;cAAAmZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9E;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,EAELpZ,gBAAgB,iBACfpG,OAAA;YAAKmf,SAAS,EAAC,cAAc;YAAAC,QAAA,gBAC3Bpf,OAAA;cAAAof,QAAA,EAAQ;YAAa;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,OAAE,EAACpZ,gBAAgB,EAAC,IACpD;UAAA;YAAAiZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CACN,EAEAlZ,cAAc,iBACbtG,OAAA;YAAKmf,SAAS,EAAC,kBAAkB;YAAAC,QAAA,gBAC/Bpf,OAAA;cAAAof,QAAA,EAAI;YAAoB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC7Bxf,OAAA;cAAKmf,SAAS,EAAC,eAAe;cAAAC,QAAA,EAC3B9Y;YAAc;cAAA+Y,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CACN,eAEDxf,OAAA;YAAKmf,SAAS,EAAC,sBAAsB;YAAAC,QAAA,gBACnCpf,OAAA;cAAAof,QAAA,EAAI;YAAqB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC9Bxf,OAAA;cAAKmf,SAAS,EAAC,YAAY;cAAAC,QAAA,gBACzBpf,OAAA;gBAAAof,QAAA,EAAG;cAAgC;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,eACvCxf,OAAA;gBAAAof,QAAA,EAAG;cAAsB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,eAC7Bxf,OAAA;gBAAAof,QAAA,EAAG;cAA8B;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,eACrCxf,OAAA;gBAAAof,QAAA,EAAG;cAA6B;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eAEDxf,OAAA;MAAMmf,SAAS,EAAC,UAAU;MAAAC,QAAA,EAEvB,CAACha,UAAU,iBACVpF,OAAA,CAAAE,SAAA;QAAAkf,QAAA,gBAEFpf,OAAA;UAAKmf,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7Bpf,OAAA;YAAO+f,OAAO,EAAC,cAAc;YAACZ,SAAS,EAAC,cAAc;YAAAC,QAAA,EAAC;UAEvD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACRxf,OAAA;YACEwQ,EAAE,EAAC,cAAc;YACjB5C,IAAI,EAAC,MAAM;YACXoS,MAAM,EAAC,SAAS;YAChBC,QAAQ,EAAE1S,gBAAiB;YAC3B4R,SAAS,EAAC;UAAY;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvB,CAAC,EACD,CAACnf,SAAS,iBACTL,OAAA;YAAKmf,SAAS,EAAC,eAAe;YAAAC,QAAA,gBAC5Bpf,OAAA;cAAAof,QAAA,EAAG;YAAqC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,eAC5Cxf,OAAA;cAAAof,QAAA,eAAGpf,OAAA;gBAAAof,QAAA,EAAO;cAAiC;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpD,CACN;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,EAGLjf,QAAQ,iBACPP,OAAA;UAAKmf,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAE5Bpf,OAAA;YAAKmf,SAAS,EAAC,YAAY;YAAAC,QAAA,gBACzBpf,OAAA;cAAAof,QAAA,EAAI;YAA6B;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACtCxf,OAAA;cAAKmf,SAAS,EAAC,iBAAiB;cAAAC,QAAA,gBAC9Bpf,OAAA;gBACE4N,IAAI,EAAC,UAAU;gBACfsS,WAAW,EAAC,qCAAqC;gBACjDC,KAAK,EAAElf,MAAO;gBACdgf,QAAQ,EAAGG,CAAC,IAAKlf,SAAS,CAACkf,CAAC,CAAC1S,MAAM,CAACyS,KAAK,CAAE;gBAC3ChB,SAAS,EAAC;cAAW;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACtB,CAAC,eACFxf,OAAA;gBAAOmf,SAAS,EAAC,UAAU;gBAAAC,QAAA,GAAC,wBACJ,eAAApf,OAAA;kBAAGoa,IAAI,EAAC,wCAAwC;kBAAC1M,MAAM,EAAC,QAAQ;kBAAC2S,GAAG,EAAC,qBAAqB;kBAAAjB,QAAA,EAAC;gBAAgB;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAG,CAAC,eACrIxf,OAAA;kBAAAqf,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eACNxf,OAAA;kBAAAof,QAAA,EAAQ;gBAAS;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,mDAC5B;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eAGNxf,OAAA;YAAKmf,SAAS,EAAC,gBAAgB;YAAAC,QAAA,gBAC7Bpf,OAAA;cAAAof,QAAA,EAAI;YAAmB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC5Bxf,OAAA;cAAKmf,SAAS,EAAC,gBAAgB;cAAAC,QAAA,gBAC7Bpf,OAAA;gBAAOmf,SAAS,EAAC,cAAc;gBAAAC,QAAA,gBAC7Bpf,OAAA;kBACE4N,IAAI,EAAC,UAAU;kBACf0S,OAAO,EAAEvY,cAAe;kBACxBkY,QAAQ,EAAGG,CAAC,IAAKpY,iBAAiB,CAACoY,CAAC,CAAC1S,MAAM,CAAC4S,OAAO;gBAAE;kBAAAjB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACtD,CAAC,6CAEJ;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACRxf,OAAA;gBAAOmf,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAAC;cAEhC;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CAAC,EAGLrX,cAAc,iBACbnI,OAAA;cAAKmf,SAAS,EAAC,8BAA8B;cAAAC,QAAA,EAC1CjX;YAAc;cAAAkX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ,CACN,EAEAnX,gBAAgB,iBACfrI,OAAA;cAAKmf,SAAS,EAAC,kCAAkC;cAAAC,QAAA,EAC9C/W;YAAgB;cAAAgX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACd,CACN,EAGAvX,SAAS,iBACRjI,OAAA;cAAKmf,SAAS,EAAC,eAAe;cAAAC,QAAA,gBAC5Bpf,OAAA;gBAAAof,QAAA,EAAI;cAAmC;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC5Cxf,OAAA;gBAAKmf,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,gBAChCpf,OAAA;kBACE4N,IAAI,EAAC,MAAM;kBACXsS,WAAW,EAAC,6CAA6C;kBACzDC,KAAK,EAAE5X,SAAU;kBACjB0X,QAAQ,EAAGG,CAAC,IAAK5X,YAAY,CAAC4X,CAAC,CAAC1S,MAAM,CAACyS,KAAK,CAAE;kBAC9ChB,SAAS,EAAC,aAAa;kBACvBoB,UAAU,EAAGH,CAAC,IAAKA,CAAC,CAACI,GAAG,KAAK,OAAO,IAAI7B,kBAAkB,CAAC;gBAAE;kBAAAU,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC9D,CAAC,eACFxf,OAAA;kBACEyf,OAAO,EAAEd,kBAAmB;kBAC5B8B,QAAQ,EAAE9X,UAAU,IAAI,CAACJ,SAAS,CAACwK,IAAI,CAAC,CAAE;kBAC1CoM,SAAS,EAAC,cAAc;kBAAAC,QAAA,EAEvBzW,UAAU,GAAG,cAAc,GAAG;gBAAc;kBAAA0W,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACvC,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC,EAEL/W,WAAW,iBACVzI,OAAA;gBAAKmf,SAAS,EAAC,cAAc;gBAAAC,QAAA,gBAC3Bpf,OAAA;kBAAAof,QAAA,EAAI;gBAAmB;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eAC5Bxf,OAAA;kBAAKmf,SAAS,EAAC,aAAa;kBAAAC,QAAA,EAAE3W;gBAAW;kBAAA4W,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC7C,CACN;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CACN;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eAENxf,OAAA;YAAKmf,SAAS,EAAC,iBAAiB;YAAAC,QAAA,gBAC9Bpf,OAAA;cACE0f,GAAG,EAAE7W,QAAS;cACduH,GAAG,EAAE7P,QAAS;cACdmgB,QAAQ;cACRvB,SAAS,EAAC,cAAc;cAAAC,QAAA,EACzB;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACRxf,OAAA;cAAQ0f,GAAG,EAAE5W,SAAU;cAACgJ,KAAK,EAAE;gBAAE6O,OAAO,EAAE;cAAO;YAAE;cAAAtB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnD,CAAC,eAGNxf,OAAA;YAAKmf,SAAS,EAAC,UAAU;YAAAC,QAAA,gBACvBpf,OAAA;cAAQyf,OAAO,EAAEjF,cAAe;cAAC2E,SAAS,EAAC,aAAa;cAAAC,QAAA,EAAC;YAEzD;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTxf,OAAA;cACEyf,OAAO,EAAEjC,mBAAoB;cAC7BiD,QAAQ,EAAE9f,WAAW,IAAI,CAACM,MAAO;cACjCke,SAAS,EAAC,8BAA8B;cAAAC,QAAA,EAEvCze,WAAW,GAAG,yBAAyB,GAAG;YAA+B;cAAA0e,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpE,CAAC,eACTxf,OAAA;cACEyf,OAAO,EAAEnU,kBAAmB;cAC5BmV,QAAQ,EAAErd,gBAAgB,IAAI,CAACnC,MAAM,IAAI,CAAC4H,QAAQ,CAAC7B,OAAQ;cAC3DmY,SAAS,EAAC,qCAAqC;cAAAC,QAAA,EAE9Chc,gBAAgB,GAAG,uBAAuB,GAAG;YAAiC;cAAAic,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACzE,CAAC,eACTxf,OAAA;cACEyf,OAAO,EAAE1W,aAAc;cACvB0X,QAAQ,EAAE9f,WAAY;cACtBwe,SAAS,EAAC,UAAU;cAAAC,QAAA,EACrB;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTxf,OAAA;cACEyf,OAAO,EAAE/B,gBAAiB;cAC1B+C,QAAQ,EAAE9f,WAAY;cACtBwe,SAAS,EAAC,eAAe;cAAAC,QAAA,EAExBze,WAAW,GAAG,iBAAiB,GAAG;YAAoB;cAAA0e,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjD,CAAC,EACR/e,WAAW,CAACmM,MAAM,GAAG,CAAC,iBACrB5M,OAAA;cAAQyf,OAAO,EAAE9B,gBAAiB;cAACwB,SAAS,EAAC,YAAY;cAAAC,QAAA,GAAC,gCACzC,EAAC3e,WAAW,CAACmM,MAAM,EAAC,GACrC;YAAA;cAAAyS,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CACT,eACDxf,OAAA;cACEyf,OAAO,EAAEA,CAAA,KAAM;gBACb9V,KAAK,CAAC,2BAA2B1I,MAAM,GAAG,SAAS,GAAG,SAAS,0DAA0D,CAAC;gBAC1HmG,OAAO,CAACU,GAAG,CAAC,gBAAgB,EAAE;kBAC5B8Y,MAAM,EAAE,CAAC,CAAC3f,MAAM;kBAChB4f,SAAS,EAAE5f,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE2L,MAAM;kBACzBkU,QAAQ,EAAE,CAAA7f,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE+R,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,IAAG,KAAK;kBAC1CxI,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAAC6J,WAAW,CAAC;gBACpC,CAAC,CAAC;cACJ,CAAE;cACF6K,SAAS,EAAC,UAAU;cACpBZ,KAAK,EAAC,+BAA+B;cAAAa,QAAA,EACtC;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,eAGNxf,OAAA;YAAKmf,SAAS,EAAC,oBAAoB;YAAAC,QAAA,gBACjCpf,OAAA;cAAAof,QAAA,EAAI;YAAmC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC5Cxf,OAAA;cAAGmf,SAAS,EAAC,wBAAwB;cAAAC,QAAA,EAAC;YAEtC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,eAEJxf,OAAA;cAAKmf,SAAS,EAAC,qBAAqB;cAAAC,QAAA,gBAClCpf,OAAA;gBACEyf,OAAO,EAAE/b,YAAY,GAAGwN,cAAc,GAAGZ,eAAgB;gBACzD6O,SAAS,EAAE,OAAOzb,YAAY,GAAG,QAAQ,GAAG,SAAS,oBAAqB;gBAC1E+c,QAAQ,EAAE,CAAC5X,QAAQ,CAAC7B,OAAQ;gBAAAoY,QAAA,EAE3B1b,YAAY,GAAG,oBAAoB,GAAG;cAAqB;gBAAA2b,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACtD,CAAC,eAETxf,OAAA;gBAAKmf,SAAS,EAAC,qBAAqB;gBAAAC,QAAA,gBAClCpf,OAAA;kBAAAof,QAAA,GAAO,kBAEL,eAAApf,OAAA;oBACEmgB,KAAK,EAAE7b,mBAAoB;oBAC3B2b,QAAQ,EAAGG,CAAC,IAAK7b,sBAAsB,CAACwc,MAAM,CAACX,CAAC,CAAC1S,MAAM,CAACyS,KAAK,CAAC,CAAE;oBAChEM,QAAQ,EAAE/c,YAAa;oBAAA0b,QAAA,gBAEvBpf,OAAA;sBAAQmgB,KAAK,EAAE,IAAK;sBAAAf,QAAA,EAAC;oBAAe;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC,eAC7Cxf,OAAA;sBAAQmgB,KAAK,EAAE,IAAK;sBAAAf,QAAA,EAAC;oBAAe;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC,eAC7Cxf,OAAA;sBAAQmgB,KAAK,EAAE,KAAM;sBAAAf,QAAA,EAAC;oBAAgB;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC,eAC/Cxf,OAAA;sBAAQmgB,KAAK,EAAE,KAAM;sBAAAf,QAAA,EAAC;oBAAgB;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACzC,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACJ,CAAC,eAERxf,OAAA;kBAAAof,QAAA,GAAO,qBAEL,eAAApf,OAAA;oBACEmgB,KAAK,EAAE/b,eAAgB;oBACvB6b,QAAQ,EAAGG,CAAC,IAAK/b,kBAAkB,CAAC0c,MAAM,CAACX,CAAC,CAAC1S,MAAM,CAACyS,KAAK,CAAC,CAAE;oBAC5DM,QAAQ,EAAE/c,YAAa;oBAAA0b,QAAA,gBAEvBpf,OAAA;sBAAQmgB,KAAK,EAAE,IAAK;sBAAAf,QAAA,EAAC;oBAAc;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC,eAC5Cxf,OAAA;sBAAQmgB,KAAK,EAAE,IAAK;sBAAAf,QAAA,EAAC;oBAAU;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC,eACxCxf,OAAA;sBAAQmgB,KAAK,EAAE,IAAK;sBAAAf,QAAA,EAAC;oBAAY;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC,eAC1Cxf,OAAA;sBAAQmgB,KAAK,EAAE,IAAK;sBAAAf,QAAA,EAAC;oBAAS;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAQ,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACjC,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACJ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eAENxf,OAAA;cAAKmf,SAAS,EAAC,mBAAmB;cAAAC,QAAA,GAC/B1b,YAAY,iBACX1D,OAAA;gBAAKmf,SAAS,EAAC,eAAe;gBAAAC,QAAA,gBAC5Bpf,OAAA;kBAAMmf,SAAS,EAAC,kBAAkB;kBAAAC,QAAA,EAAC;gBAAE;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,eAC5Cxf,OAAA;kBAAAof,QAAA,GAAM,sBAAoB,EAACtb,YAAY,CAAC8I,MAAM,EAAC,WAAS;gBAAA;kBAAAyS,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,EAC9Dxb,kBAAkB,iBACjBhE,OAAA;kBAAMmf,SAAS,EAAC,aAAa;kBAAAC,QAAA,GAAC,eACf,EAACpb,kBAAkB,CAACgd,kBAAkB,CAAC,CAAC;gBAAA;kBAAA3B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACjD,CACP;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACE,CACN,EACA,CAAC9b,YAAY,IAAII,YAAY,CAAC8I,MAAM,GAAG,CAAC,iBACvC5M,OAAA;gBAAKmf,SAAS,EAAC,iBAAiB;gBAAAC,QAAA,gBAC9Bpf,OAAA;kBAAMmf,SAAS,EAAC,kBAAkB;kBAAAC,QAAA,EAAC;gBAAC;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,eAC3Cxf,OAAA;kBAAAof,QAAA,GAAM,uBAAqB,EAACtb,YAAY,CAAC8I,MAAM,EAAC,iBAAe;gBAAA;kBAAAyS,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnE,CACN;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CAAC,EAEL1b,YAAY,CAAC8I,MAAM,GAAG,CAAC,iBACtB5M,OAAA;cAAKmf,SAAS,EAAC,oBAAoB;cAAAC,QAAA,gBACjCpf,OAAA;gBACEyf,OAAO,EAAEA,CAAA,KAAMhb,sBAAsB,CAAC,CAACD,mBAAmB,CAAE;gBAC5D2a,SAAS,EAAC,UAAU;gBAAAC,QAAA,GAEnB5a,mBAAmB,GAAG,iBAAiB,GAAG,iBAAiB,EAAC,IAAE,EAACV,YAAY,CAAC8I,MAAM,EAAC,GACtF;cAAA;gBAAAyS,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACTxf,OAAA;gBACEyf,OAAO,EAAEpO,oBAAqB;gBAC9B8N,SAAS,EAAC,aAAa;gBACvBsB,QAAQ,EAAE7b,mBAAoB;gBAAAwa,QAAA,EAE7Bxa,mBAAmB,GAAG,kBAAkB,GAAG;cAAqB;gBAAAya,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC3D,CAAC,eACTxf,OAAA;gBACEyf,OAAO,EAAE5F,kBAAmB;gBAC5BsF,SAAS,EAAC,eAAe;gBAAAC,QAAA,EAC1B;cAED;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACTxf,OAAA;gBACEyf,OAAO,EAAErO,iBAAkB;gBAC3B+N,SAAS,EAAC,YAAY;gBAAAC,QAAA,EACvB;cAED;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CACN;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,EAGL1b,YAAY,CAAC8I,MAAM,GAAG,CAAC,iBACtB5M,OAAA;YAAKmf,SAAS,EAAC,iBAAiB;YAAAC,QAAA,gBAC9Bpf,OAAA;cAAAof,QAAA,EAAI;YAA6B;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,EACrC9a,YAAY,gBACX1E,OAAA;cAAKmf,SAAS,EAAC,gBAAgB;cAAAC,QAAA,gBAC7Bpf,OAAA;gBAAKmf,SAAS,EAAC,iBAAiB;gBAAAC,QAAA,EAC7B1a,YAAY,CAACsI,KAAK,CAAC,IAAI,CAAC,CAACuE,GAAG,CAAC,CAACuB,IAAI,EAAErB,KAAK,kBACxCzR,OAAA;kBAAAof,QAAA,EAAgBtM;gBAAI,GAAZrB,KAAK;kBAAA4N,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CACzB;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC,eACNxf,OAAA;gBAAKmf,SAAS,EAAC,iBAAiB;gBAAAC,QAAA,gBAC9Bpf,OAAA;kBACEyf,OAAO,EAAEA,CAAA,KAAM;oBACb3K,SAAS,CAACmM,SAAS,CAACC,SAAS,CAACxc,YAAY,CAAC;oBAC3CiF,KAAK,CAAC,iCAAiC,CAAC;kBAC1C,CAAE;kBACFwV,SAAS,EAAC,qBAAqB;kBAAAC,QAAA,EAChC;gBAED;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACTxf,OAAA;kBACEyf,OAAO,EAAE7N,qBAAsB;kBAC/BuN,SAAS,EAAC,mBAAmB;kBAAAC,QAAA,EAC9B;gBAED;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACTxf,OAAA;kBACEyf,OAAO,EAAEA,CAAA,KAAM9a,eAAe,CAAC,EAAE,CAAE;kBACnCwa,SAAS,EAAC,kBAAkB;kBAAAC,QAAA,EAC7B;gBAED;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,gBAENxf,OAAA;cAAKmf,SAAS,EAAC,qBAAqB;cAAAC,QAAA,gBAClCpf,OAAA;gBAAAof,QAAA,EAAG;cAAiH;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,eACxHxf,OAAA;gBAAAof,QAAA,EAAG;cAAqE;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACzE,CACN;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CACN,EAGA1b,YAAY,CAAC8I,MAAM,GAAG,CAAC,iBACtB5M,OAAA;YAAKmf,SAAS,EAAC,YAAY;YAAAC,QAAA,gBACzBpf,OAAA;cAAAof,QAAA,EAAI;YAAyC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAClDxf,OAAA;cAAKmf,SAAS,EAAC,gBAAgB;cAAAC,QAAA,gBAC7Bpf,OAAA;gBACE4N,IAAI,EAAC,MAAM;gBACXuS,KAAK,EAAErb,eAAgB;gBACvBmb,QAAQ,EAAGG,CAAC,IAAKrb,kBAAkB,CAACqb,CAAC,CAAC1S,MAAM,CAACyS,KAAK,CAAE;gBACpDD,WAAW,EAAC,uDAAuD;gBACnEK,UAAU,EAAGH,CAAC,IAAKA,CAAC,CAACI,GAAG,KAAK,OAAO,IAAI9L,qBAAqB,CAAC,CAAE;gBAChE+L,QAAQ,EAAEvb;cAAY;gBAAAma,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACvB,CAAC,eACFxf,OAAA;gBACEyf,OAAO,EAAE/K,qBAAsB;gBAC/ByK,SAAS,EAAC,aAAa;gBACvBsB,QAAQ,EAAEvb,WAAW,IAAI,CAACJ,eAAe,CAACiO,IAAI,CAAC,CAAE;gBAAAqM,QAAA,EAEhDla,WAAW,GAAG,gBAAgB,GAAG;cAAO;gBAAAma,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnC,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC,EAELxa,gBAAgB,iBACfhF,OAAA;cAAKmf,SAAS,EAAC,aAAa;cAAAC,QAAA,gBAC1Bpf,OAAA;gBAAAof,QAAA,EAAI;cAAU;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACnBxf,OAAA;gBAAKmf,SAAS,EAAC,kBAAkB;gBAAAC,QAAA,EAC9Bpa,gBAAgB,CAACgI,KAAK,CAAC,IAAI,CAAC,CAACuE,GAAG,CAAC,CAACuB,IAAI,EAAErB,KAAK,kBAC5CzR,OAAA;kBAAAof,QAAA,EAAgBtM;gBAAI,GAAZrB,KAAK;kBAAA4N,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAW,CACzB;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC,eACNxf,OAAA;gBAAKmf,SAAS,EAAC,kBAAkB;gBAAAC,QAAA,gBAC/Bpf,OAAA;kBACEyf,OAAO,EAAEA,CAAA,KAAM;oBACb3K,SAAS,CAACmM,SAAS,CAACC,SAAS,CAAC,MAAMpc,eAAe,QAAQE,gBAAgB,EAAE,CAAC;oBAC9E2E,KAAK,CAAC,6BAA6B,CAAC;kBACtC,CAAE;kBACFwV,SAAS,EAAC,qBAAqB;kBAAAC,QAAA,EAChC;gBAED;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACTxf,OAAA;kBACEyf,OAAO,EAAEA,CAAA,KAAM;oBACbxa,mBAAmB,CAAC,EAAE,CAAC;oBACvBF,kBAAkB,CAAC,EAAE,CAAC;kBACxB,CAAE;kBACFoa,SAAS,EAAC,kBAAkB;kBAAAC,QAAA,EAC7B;gBAED;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CACN,EAEA,CAACxa,gBAAgB,iBAChBhF,OAAA;cAAKmf,SAAS,EAAC,gBAAgB;cAAAC,QAAA,gBAC7Bpf,OAAA;gBAAAof,QAAA,EAAG;cAAqC;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,eAC5Cxf,OAAA;gBAAAof,QAAA,gBACEpf,OAAA;kBAAAof,QAAA,EAAI;gBAA0C;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eACnDxf,OAAA;kBAAAof,QAAA,EAAI;gBAA6C;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eACtDxf,OAAA;kBAAAof,QAAA,EAAI;gBAAgD;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eACzDxf,OAAA;kBAAAof,QAAA,EAAI;gBAA4C;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnD,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CACN;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CACN,eAGDxf,OAAA;YAAKmf,SAAS,EAAC,iBAAiB;YAAAC,QAAA,gBAC9Bpf,OAAA;cAAAof,QAAA,EAAI;YAAkC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC3Cxf,OAAA;cAAKmf,SAAS,EAAC,gBAAgB;cAAAC,QAAA,GAC5Bxc,WAAW,KAAK,SAAS,iBACxB5C,OAAA;gBAAAof,QAAA,EAAG;cAA2E;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAClF,EACA5c,WAAW,KAAK,iBAAiB,iBAChC5C,OAAA;gBAAAof,QAAA,EAAG;cAA2F;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAClG,EACA5c,WAAW,KAAK,iBAAiB,iBAChC5C,OAAA;gBAAAof,QAAA,EAAG;cAAqE;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAC5E;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CAAC,eAENxf,OAAA;cAAKmf,SAAS,EAAC,iBAAiB;cAAAC,QAAA,gBAC9Bpf,OAAA;gBACEyf,OAAO,EAAE/V,kBAAmB;gBAC5B+W,QAAQ,EAAE9f,WAAY;gBACtBwe,SAAS,EAAC,eAAe;gBACzBZ,KAAK,EAAC,iDAAiD;gBAAAa,QAAA,EACxD;cAED;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACTxf,OAAA;gBACEyf,OAAO,EAAE5U,iBAAkB;gBAC3B4V,QAAQ,EAAE9f,WAAW,IAAI,CAAC6B,aAAc;gBACxC2c,SAAS,EAAC,eAAe;gBACzBZ,KAAK,EAAC,wCAAwC;gBAAAa,QAAA,EAC/C;cAED;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACTxf,OAAA;gBACEyf,OAAO,EAAEpU,aAAc;gBACvBoV,QAAQ,EAAE,CAACje,aAAa,IAAI,CAACE,YAAa;gBAC1Cyc,SAAS,EAAC,YAAY;gBACtBZ,KAAK,EAAC,wCAAwC;gBAAAa,QAAA,EAC/C;cAED;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eAGNxf,OAAA;YAAKmf,SAAS,EAAC,gBAAgB;YAAAC,QAAA,gBAC7Bpf,OAAA;cAAAof,QAAA,EAAI;YAAiB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC1Bxf,OAAA;cAAKmf,SAAS,EAAC,mBAAmB;cAAAC,QAAA,EAC/Bve,YAAY,IAAI;YAAkD;cAAAwe,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN,EAIA5d,iBAAiB,IAAIF,gBAAgB,iBACpC1B,OAAA;UAAKmf,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAChCpf,OAAA;YAAKmf,SAAS,EAAC,cAAc;YAAAC,QAAA,gBAC3Bpf,OAAA;cAAAof,QAAA,EAAI;YAAiC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC1Cxf,OAAA;cACEyf,OAAO,EAAEA,CAAA,KAAM5d,oBAAoB,CAAC,KAAK,CAAE;cAC3Csd,SAAS,EAAC,iBAAiB;cAAAC,QAAA,EAC5B;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,eACNxf,OAAA;YAAKmf,SAAS,EAAC,kBAAkB;YAAAC,QAAA,gBAC/Bpf,OAAA;cAAKmf,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC/Bpf,OAAA;gBAAAof,QAAA,EAAI;cAAiB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC1Bxf,OAAA;gBAAKmf,SAAS,EAAC,eAAe;gBAAAC,QAAA,EAAE1d;cAAgB;gBAAA2d,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpD,CAAC,eAGNxf,OAAA;cAAKmf,SAAS,EAAC,YAAY;cAAAC,QAAA,gBACzBpf,OAAA;gBAAAof,QAAA,EAAI;cAAmC;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC5Cxf,OAAA;gBAAKmf,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,gBAC7Bpf,OAAA;kBACE4N,IAAI,EAAC,MAAM;kBACXsS,WAAW,EAAC,mDAAmD;kBAC/DC,KAAK,EAAE/d,YAAa;kBACpB6d,QAAQ,EAAGG,CAAC,IAAK/d,eAAe,CAAC+d,CAAC,CAAC1S,MAAM,CAACyS,KAAK,CAAE;kBACjDhB,SAAS,EAAC,UAAU;kBACpBoB,UAAU,EAAGH,CAAC,IAAKA,CAAC,CAACI,GAAG,KAAK,OAAO,IAAIvD,uBAAuB,CAAC,CAAE;kBAClEwD,QAAQ,EAAEnf;gBAAe;kBAAA+d,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC1B,CAAC,eACFxf,OAAA;kBACEyf,OAAO,EAAExC,uBAAwB;kBACjCwD,QAAQ,EAAEnf,cAAc,IAAI,CAACc,YAAY,CAAC2Q,IAAI,CAAC,CAAE;kBACjDoM,SAAS,EAAC,WAAW;kBAAAC,QAAA,EAEpB9d,cAAc,GAAG,gBAAgB,GAAG;gBAAQ;kBAAA+d,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACvC,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC,EAGLtd,mBAAmB,CAAC0K,MAAM,GAAG,CAAC,iBAC7B5M,OAAA;gBAAKmf,SAAS,EAAC,sBAAsB;gBAAAC,QAAA,gBACnCpf,OAAA;kBAAAof,QAAA,EAAI;gBAAe;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eACxBxf,OAAA;kBAAKmf,SAAS,EAAC,uBAAuB;kBAAAC,QAAA,EACnCld,mBAAmB,CAACqP,GAAG,CAAC,CAAC9H,OAAO,EAAEgI,KAAK,kBACtCzR,OAAA;oBAEEmf,SAAS,EAAE,WAAW1V,OAAO,CAAC2T,IAAI,KAAK,MAAM,GAAG,cAAc,GAAG,YAAY,EAAG;oBAAAgC,QAAA,gBAEhFpf,OAAA;sBAAKmf,SAAS,EAAC,cAAc;sBAAAC,QAAA,EAC1B3V,OAAO,CAAC2T,IAAI,KAAK,MAAM,GAAG,SAAS,GAAG;oBAAQ;sBAAAiC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAC5C,CAAC,eACNxf,OAAA;sBAAKmf,SAAS,EAAC,iBAAiB;sBAAAC,QAAA,EAAE3V,OAAO,CAAC4T;oBAAO;sBAAAgC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM,CAAC;kBAAA,GANnD/N,KAAK;oBAAA4N,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAOP,CACN;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACC,CAAC,eACNxf,OAAA;kBACEyf,OAAO,EAAEA,CAAA,KAAMtd,sBAAsB,CAAC,EAAE,CAAE;kBAC1Cgd,SAAS,EAAC,wBAAwB;kBAAAC,QAAA,EACnC;gBAED;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CACN;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN,EAGAlc,iBAAiB,IAAIJ,mBAAmB,iBACvClD,OAAA;UAAKmf,SAAS,EAAC,sBAAsB;UAAAC,QAAA,gBACnCpf,OAAA;YAAKmf,SAAS,EAAC,cAAc;YAAAC,QAAA,gBAC3Bpf,OAAA;cAAAof,QAAA,EAAI;YAA+B;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACxCxf,OAAA;cACEyf,OAAO,EAAEA,CAAA,KAAMlc,oBAAoB,CAAC,KAAK,CAAE;cAC3C4b,SAAS,EAAC,iBAAiB;cAAAC,QAAA,EAC5B;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,eACNxf,OAAA;YAAKmf,SAAS,EAAC,kBAAkB;YAAAC,QAAA,gBAC/Bpf,OAAA;cAAKmf,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC/Bpf,OAAA;gBAAAof,QAAA,EAAI;cAA0B;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACnCxf,OAAA;gBAAKmf,SAAS,EAAC,qBAAqB;gBAAAC,QAAA,EAAElc;cAAmB;gBAAAmc,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC7D,CAAC,EAGLhc,kBAAkB,CAACoJ,MAAM,GAAG,CAAC,iBAC5B5M,OAAA;cAAKmf,SAAS,EAAC,wBAAwB;cAAAC,QAAA,gBACrCpf,OAAA;gBAAAof,QAAA,GAAI,sCAA0B,EAAC5b,kBAAkB,CAACoJ,MAAM,EAAC,WAAS;cAAA;gBAAAyS,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACvExf,OAAA;gBAAKmf,SAAS,EAAC,aAAa;gBAAAC,QAAA,EACzB5b,kBAAkB,CAAC+N,GAAG,CAAC,CAACzE,KAAK,EAAE2E,KAAK,kBACnCzR,OAAA;kBAAiBmf,SAAS,EAAC,cAAc;kBAAAC,QAAA,gBACvCpf,OAAA;oBAAKoQ,GAAG,EAAEtD,KAAK,CAACvC,KAAM;oBAAC4W,GAAG,EAAE,SAASrU,KAAK,CAACN,WAAW;kBAAG;oBAAA6S,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAE,CAAC,eAC5Dxf,OAAA;oBAAKmf,SAAS,EAAC,YAAY;oBAAAC,QAAA,gBACzBpf,OAAA;sBAAAof,QAAA,GAAM,QAAM,EAACtS,KAAK,CAACN,WAAW;oBAAA;sBAAA6S,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAO,CAAC,eACtCxf,OAAA;sBAAAof,QAAA,GAAOtS,KAAK,CAACtC,SAAS,CAACW,OAAO,CAAC,CAAC,CAAC,EAAC,GAAC;oBAAA;sBAAAkU,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACvC,CAAC;gBAAA,GALE/N,KAAK;kBAAA4N,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAMV,CACN;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CACN;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN,EAGAhb,mBAAmB,IAAIV,YAAY,CAAC8I,MAAM,GAAG,CAAC,iBAC7C5M,OAAA;UAAKmf,SAAS,EAAC,kBAAkB;UAAAC,QAAA,gBAC/Bpf,OAAA;YAAKmf,SAAS,EAAC,cAAc;YAAAC,QAAA,gBAC3Bpf,OAAA;cAAAof,QAAA,GAAI,oCAAwB,EAACtb,YAAY,CAAC8I,MAAM,EAAC,WAAS;YAAA;cAAAyS,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC/Dxf,OAAA;cACEyf,OAAO,EAAEA,CAAA,KAAMhb,sBAAsB,CAAC,KAAK,CAAE;cAC7C0a,SAAS,EAAC,iBAAiB;cAAAC,QAAA,EAC5B;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,eACNxf,OAAA;YAAKmf,SAAS,EAAC,oBAAoB;YAAAC,QAAA,gBACjCpf,OAAA;cAAKmf,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC/Bpf,OAAA;gBAAAof,QAAA,eAAGpf,OAAA;kBAAAof,QAAA,EAAQ;gBAAiB;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,eACzCxf,OAAA;gBAAAof,QAAA,gBACEpf,OAAA;kBAAAof,QAAA,GAAI,kBAAgB,EAACtb,YAAY,CAAC8I,MAAM;gBAAA;kBAAAyS,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eAC9Cxf,OAAA;kBAAAof,QAAA,GAAI,qBAAmB,EAAC1b,YAAY,GAAG,WAAW,GAAG,WAAW;gBAAA;kBAAA2b,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eACtExf,OAAA;kBAAAof,QAAA,GAAI,yBAAuB,EAAC9a,mBAAmB,GAAC,IAAI,EAAC,GAAC;gBAAA;kBAAA+a,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eAC3Dxf,OAAA;kBAAAof,QAAA,GAAI,oBAAkB,EAAC,CAAChb,eAAe,GAAG,GAAG,EAAE+G,OAAO,CAAC,CAAC,CAAC,EAAC,GAAC;gBAAA;kBAAAkU,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,EAC/Dxb,kBAAkB,iBAAIhE,OAAA;kBAAAof,QAAA,GAAI,eAAa,EAACpb,kBAAkB,CAAC0G,cAAc,CAAC,CAAC;gBAAA;kBAAA2U,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAChF,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF,CAAC,eAENxf,OAAA;cAAKmf,SAAS,EAAC,oBAAoB;cAAAC,QAAA,EAChCtb,YAAY,CAACyQ,KAAK,CAAC,CAAC,CAAC6M,OAAO,CAAC,CAAC,CAAC7P,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC9CzR,OAAA;gBAAmBmf,SAAS,EAAC,cAAc;gBAAAC,QAAA,gBACzCpf,OAAA;kBAAKmf,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,gBAC7Bpf,OAAA;oBAAMmf,SAAS,EAAC,cAAc;oBAAAC,QAAA,EAC3B5N,IAAI,CAAChH,SAAS,CAACwW,kBAAkB,CAAC;kBAAC;oBAAA3B,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAChC,CAAC,eACPxf,OAAA;oBAAMmf,SAAS,EAAC,gBAAgB;oBAAAC,QAAA,EAC7B5N,IAAI,CAACb;kBAAO;oBAAA0O,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACT,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACJ,CAAC,eACNxf,OAAA;kBAAKmf,SAAS,EAAC,eAAe;kBAAAC,QAAA,eAC5Bpf,OAAA;oBACEoQ,GAAG,EAAEoB,IAAI,CAACjH,KAAM;oBAChB4W,GAAG,EAAE,kBAAkB3P,IAAI,CAAChH,SAAS,CAACwW,kBAAkB,CAAC,CAAC,EAAG;oBAC7D7B,SAAS,EAAC;kBAAiB;oBAAAE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC5B;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACC,CAAC,eACNxf,OAAA;kBAAKmf,SAAS,EAAC,qBAAqB;kBAAAC,QAAA,gBAClCpf,OAAA;oBAAAof,QAAA,EAAI;kBAAoB;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAI,CAAC,eAC7Bxf,OAAA;oBAAAof,QAAA,EAAI5N,IAAI,CAACd;kBAAW;oBAAA2O,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAI,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACtB,CAAC,eACNxf,OAAA;kBAAKmf,SAAS,EAAC,iBAAiB;kBAAAC,QAAA,gBAC9Bpf,OAAA;oBACEyf,OAAO,EAAEA,CAAA,KAAM;sBACb,MAAMX,IAAI,GAAGlQ,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;sBACxCiQ,IAAI,CAAC1E,IAAI,GAAG5I,IAAI,CAACjH,KAAK;sBACtBuU,IAAI,CAACzE,QAAQ,GAAG,cAAc7I,IAAI,CAAChH,SAAS,CAAC8J,WAAW,CAAC,CAAC,MAAM;sBAChEwK,IAAI,CAACxE,KAAK,CAAC,CAAC;oBACd,CAAE;oBACF6E,SAAS,EAAC,qBAAqB;oBAAAC,QAAA,EAChC;kBAED;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,eACTxf,OAAA;oBACEyf,OAAO,EAAEA,CAAA,KAAM;sBACb3K,SAAS,CAACmM,SAAS,CAACC,SAAS,CAAC1P,IAAI,CAACd,WAAW,CAAC;sBAC/C/G,KAAK,CAAC,kCAAkC,CAAC;oBAC3C,CAAE;oBACFwV,SAAS,EAAC,gBAAgB;oBAAAC,QAAA,EAC3B;kBAED;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACN,CAAC;cAAA,GAzCEhO,IAAI,CAAChB,EAAE;gBAAA6O,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OA0CZ,CACN;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC,EAEL1b,YAAY,CAAC8I,MAAM,KAAK,CAAC,iBACxB5M,OAAA;cAAKmf,SAAS,EAAC,YAAY;cAAAC,QAAA,gBACzBpf,OAAA;gBAAAof,QAAA,EAAG;cAAsC;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,eAC7Cxf,OAAA;gBAAAof,QAAA,EAAG;cAAgE;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpE,CACN;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN,EAGA/e,WAAW,CAACmM,MAAM,GAAG,CAAC,iBACrB5M,OAAA;UAAKmf,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9Bpf,OAAA;YAAAof,QAAA,GAAI,4BAAgB,EAAC3e,WAAW,CAACmM,MAAM,EAAC,GAAC;UAAA;YAAAyS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC9Cxf,OAAA;YAAKmf,SAAS,EAAC,SAAS;YAAAC,QAAA,EACrB3e,WAAW,CAAC8Q,GAAG,CAAEmJ,UAAU,iBAC1B1a,OAAA;cAAyBmf,SAAS,EAAC,iBAAiB;cAAAC,QAAA,gBAClDpf,OAAA;gBACEoQ,GAAG,EAAEsK,UAAU,CAAC5M,GAAI;gBACpBqT,GAAG,EAAE,iBAAiBzG,UAAU,CAAClQ,SAAS,CAACW,OAAO,CAAC,CAAC,CAAC,GAAI;gBACzDgU,SAAS,EAAC;cAAkB;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC7B,CAAC,eACFxf,OAAA;gBAAKmf,SAAS,EAAC,iBAAiB;gBAAAC,QAAA,gBAC9Bpf,OAAA;kBAAAof,QAAA,gBAAGpf,OAAA;oBAAAof,QAAA,EAAQ;kBAAQ;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,KAAC,EAAC9E,UAAU,CAAClQ,SAAS,CAACW,OAAO,CAAC,CAAC,CAAC,EAAC,GAAC;gBAAA;kBAAAkU,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAG,CAAC,eACnExf,OAAA;kBAAAof,QAAA,gBAAGpf,OAAA;oBAAAof,QAAA,EAAQ;kBAAQ;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,KAAC,EAAC9E,UAAU,CAAC7Z,YAAY;gBAAA;kBAAAwe,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACvD,CAAC;YAAA,GATE9E,UAAU,CAAClK,EAAE;cAAA6O,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAUlB,CACN;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN;MAAA,eACC;IACD;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACpf,EAAA,CAptFQD,GAAG;AAAAkhB,EAAA,GAAHlhB,GAAG;AAstFZ,eAAeA,GAAG;AAAC,IAAAkhB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}