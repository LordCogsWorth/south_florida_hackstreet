{"ast":null,"code":"var _jsxFileName = \"/Users/kyleprice/south_florida_hackstreet/whiteboard-detector/src/App.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [videoFile, setVideoFile] = useState(null);\n  const [videoURL, setVideoURL] = useState(null);\n  const [screenshots, setScreenshots] = useState([]);\n  const [isDetecting, setIsDetecting] = useState(false);\n  const [detectedText, setDetectedText] = useState('');\n  const [ocrWorker, setOcrWorker] = useState(null);\n  const [apiKey, setApiKey] = useState(process.env.REACT_APP_OPENAI_API_KEY || '');\n  const [isUsingChatGPT, setIsUsingChatGPT] = useState(false);\n  const [chatGPTResult, setChatGPTResult] = useState('');\n\n  // AI Vision Analysis Results\n  const [aiAnalysisResult, setAiAnalysisResult] = useState('');\n  const [showAnalysisPanel, setShowAnalysisPanel] = useState(false);\n\n  // Rate limiting and conversation state\n  const [lastApiCall, setLastApiCall] = useState(0);\n  const [rateLimitCooldown, setRateLimitCooldown] = useState(0);\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const [userQuestion, setUserQuestion] = useState('');\n  const [apiKeyStatus, setApiKeyStatus] = useState('unchecked'); // unchecked, valid, invalid\n\n  // Before/After Whiteboard Capture System\n  const [beforeCapture, setBeforeCapture] = useState(null);\n  const [afterCapture, setAfterCapture] = useState(null);\n  const [captureMode, setCaptureMode] = useState('waiting'); // waiting, before-captured, ready-for-after\n  const [comparisonResult, setComparisonResult] = useState('');\n  const [showComparison, setShowComparison] = useState(false);\n\n  // Video Analysis System\n  const [videoAnalysisResult, setVideoAnalysisResult] = useState('');\n  const [isAnalyzingVideo, setIsAnalyzingVideo] = useState(false);\n  const [showVideoAnalysis, setShowVideoAnalysis] = useState(false);\n  const [videoFramesSampled, setVideoFramesSampled] = useState([]);\n\n  // Test API key validity\n  const testApiKey = async () => {\n    if (!apiKey) {\n      setApiKeyStatus('invalid');\n      return;\n    }\n    try {\n      const response = await fetch('https://api.openai.com/v1/models', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`\n        }\n      });\n      if (response.ok) {\n        setApiKeyStatus('valid');\n        console.log('‚úÖ API key is valid');\n      } else {\n        setApiKeyStatus('invalid');\n        console.log('‚ùå API key is invalid');\n      }\n    } catch (error) {\n      setApiKeyStatus('invalid');\n      console.log('‚ùå API key test failed:', error);\n    }\n  };\n\n  // Backend integration state\n  const [isUsingBackend, setIsUsingBackend] = useState(false);\n  const [lectureId, setLectureId] = useState('');\n  const [uploadProgress, setUploadProgress] = useState('');\n  const [processingStatus, setProcessingStatus] = useState('');\n  const [queryText, setQueryText] = useState('');\n  const [queryResult, setQueryResult] = useState('');\n  const [isQuerying, setIsQuerying] = useState(false);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Initialize OCR worker with handwriting optimizations\n  const initializeOCR = async () => {\n    if (ocrWorker) return ocrWorker;\n    try {\n      console.log('Starting OCR initialization...');\n      const worker = await Tesseract.createWorker('eng', 1, {\n        logger: m => console.log('OCR Logger:', m)\n      });\n\n      // Configure for better handwriting recognition\n      await worker.setParameters({\n        tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?()[]{}=-+*/\\'\"@#$%^&_|\\\\~ ',\n        tessedit_pageseg_mode: '6',\n        // Uniform block of text\n        preserve_interword_spaces: '1',\n        tessedit_do_invert: '0'\n      });\n      console.log('OCR worker created successfully');\n      setOcrWorker(worker);\n      return worker;\n    } catch (error) {\n      console.error('OCR initialization failed:', error);\n      setDetectedText('OCR initialization failed: ' + error.message);\n      return null;\n    }\n  };\n\n  // Before/After Whiteboard Capture Functions\n  const captureBeforeState = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n    if (video.videoWidth === 0 || video.videoHeight === 0) {\n      alert('Video not loaded properly');\n      return;\n    }\n\n    // Capture the current frame\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataURL = canvas.toDataURL('image/png');\n    setBeforeCapture({\n      image: dataURL,\n      timestamp: new Date().toLocaleString(),\n      frameTime: video.currentTime\n    });\n    setCaptureMode('before-captured');\n    setDetectedText('üì∏ Before state captured! Make your edits to the whiteboard, then capture the after state.');\n  };\n  const captureAfterState = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n    if (!beforeCapture) {\n      alert('Please capture the before state first.');\n      return;\n    }\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n\n    // Capture the current frame\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataURL = canvas.toDataURL('image/png');\n    setAfterCapture({\n      image: dataURL,\n      timestamp: new Date().toLocaleString(),\n      frameTime: video.currentTime\n    });\n    setCaptureMode('ready-for-after');\n    setShowComparison(true);\n    setDetectedText('üì∏ After state captured! Scroll down to see before/after comparison.');\n\n    // Auto-generate comparison analysis\n    await analyzeChanges();\n  };\n  const analyzeChanges = async () => {\n    if (!beforeCapture || !afterCapture) return;\n    setComparisonResult('üîç Analyzing changes between before and after states...');\n    try {\n      // For now, provide a basic comparison message\n      // In the future, this could use AI to detect actual differences\n      const timeDiff = afterCapture.frameTime - beforeCapture.frameTime;\n      const timeFormatted = Math.abs(timeDiff).toFixed(1);\n      const basicAnalysis = `üìä **Before/After Analysis Complete**\n\n‚è±Ô∏è **Time Difference**: ${timeFormatted} seconds between captures\nüìÖ **Before**: ${beforeCapture.timestamp}\nüìÖ **After**: ${afterCapture.timestamp}\n\nüîç **Visual Comparison**: \n- Both states have been captured for manual comparison\n- Review the images below to identify changes\n- Look for added text, erased content, or modified diagrams\n\nüí° **Tip**: Use the AI analysis feature on each image individually to get detailed descriptions of what changed.`;\n      setComparisonResult(basicAnalysis);\n    } catch (error) {\n      setComparisonResult(`‚ùå Error analyzing changes: ${error.message}`);\n    }\n  };\n  const resetCaptures = () => {\n    setBeforeCapture(null);\n    setAfterCapture(null);\n    setCaptureMode('waiting');\n    setComparisonResult('');\n    setShowComparison(false);\n    setDetectedText('üîÑ Capture system reset. Ready to capture new before/after states.');\n  };\n\n  // Comprehensive Video Analysis Function\n  const analyzeEntireVideo = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (video.duration === 0 || isNaN(video.duration)) {\n      alert('Video not fully loaded. Please wait for the video to load completely.');\n      return;\n    }\n    setIsAnalyzingVideo(true);\n    setShowVideoAnalysis(true);\n    setVideoFramesSampled([]);\n    const initialMessage = `üé¨ **Starting Comprehensive Video Analysis**\n\nüìπ **Video Details:**\n- Duration: ${Math.round(video.duration)} seconds\n- Dimensions: ${video.videoWidth}x${video.videoHeight}\n\nüîç **Analysis Process:**\n1. Sampling key frames throughout the video\n2. Extracting visual content from each frame\n3. Identifying patterns and changes over time\n4. Generating comprehensive summary and insights\n\n‚ö° **Processing Status:** Sampling frames...`;\n    setVideoAnalysisResult(initialMessage);\n    try {\n      // Sample frames at strategic intervals throughout the video\n      const framesToSample = Math.min(8, Math.max(3, Math.floor(video.duration / 10))); // 3-8 frames depending on video length\n      const frameInterval = video.duration / framesToSample;\n      const sampledFrames = [];\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n\n      // Sample frames at different timestamps\n      for (let i = 0; i < framesToSample; i++) {\n        const timestamp = i * frameInterval;\n\n        // Seek to timestamp and capture frame\n        await new Promise(resolve => {\n          const seekHandler = () => {\n            video.removeEventListener('seeked', seekHandler);\n\n            // Capture the frame\n            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n            const dataURL = canvas.toDataURL('image/jpeg', 0.7);\n            sampledFrames.push({\n              timestamp: timestamp,\n              image: dataURL,\n              frameNumber: i + 1\n            });\n            resolve();\n          };\n          video.addEventListener('seeked', seekHandler);\n          video.currentTime = timestamp;\n        });\n\n        // Update progress\n        setVideoAnalysisResult(prev => prev + `\\nüì∏ Frame ${i + 1}/${framesToSample} captured at ${timestamp.toFixed(1)}s`);\n      }\n      setVideoFramesSampled(sampledFrames);\n\n      // Create comprehensive analysis prompt\n      const analysisPrompt = `Please provide a comprehensive analysis of this video based on the ${sampledFrames.length} key frames I've sampled throughout its ${Math.round(video.duration)}-second duration.\n\nüéØ **COMPREHENSIVE VIDEO ANALYSIS REQUEST:**\n\nüìä **OVERALL SUMMARY:**\n- What is the main purpose/topic of this video?\n- What type of content is being presented? (lecture, tutorial, meeting, etc.)\n- Who is the target audience?\n\nüîç **DETAILED CONTENT ANALYSIS:**\n- What are the key concepts, topics, or subjects discussed?\n- Are there any educational elements, teaching materials, or learning objectives?\n- What visual aids are used? (whiteboards, slides, demonstrations, etc.)\n\nüìù **TEXT AND WRITING ANALYSIS:**\n- Extract and transcribe ALL visible text throughout the video\n- Identify any equations, formulas, diagrams, or technical content\n- Note any handwritten vs. printed text\n- Track how text content changes over time\n\nüë• **PEOPLE AND ACTIVITIES:**\n- How many people are visible and what are their roles?\n- What activities are taking place? (teaching, presenting, discussing, etc.)\n- How do people interact with materials or each other?\n- What gestures, movements, or behaviors are significant?\n\nüéì **EDUCATIONAL VALUE:**\n- What skills or knowledge does this video teach?\n- What are the main learning outcomes?\n- How is information structured and presented?\n- What teaching methods or techniques are used?\n\n‚è±Ô∏è **TEMPORAL ANALYSIS:**\n- How does the content progress over time?\n- Are there distinct sections or phases in the video?\n- What changes occur between the beginning and end?\n- Identify any pivotal moments or transitions\n\nüèõÔ∏è **ENVIRONMENT & CONTEXT:**\n- Describe the setting/location (classroom, office, lab, etc.)\n- What equipment, tools, or materials are present?\n- How does the environment support the content?\n\nüí° **KEY INSIGHTS & TAKEAWAYS:**\n- What are the most important points or messages?\n- What would someone learn from watching this video?\n- How could this content be applied or used?\n\nüìã **STRUCTURED SUMMARY:**\nProvide a clear, organized summary that someone could use to understand the video's content without watching it.\n\nPlease be thorough and detailed - I want to understand everything that happens in this video and its educational/informational value.`;\n\n      // Send analysis request to Agentuity agent\n      const agentuityApiKey = process.env.REACT_APP_AGENTUITY_API_KEY;\n      const webhookUrl = process.env.REACT_APP_AGENTUITY_WEBHOOK_URL;\n      if (!agentuityApiKey || !webhookUrl) {\n        throw new Error('Agentuity configuration missing. Please check environment variables.');\n      }\n      setVideoAnalysisResult(prev => prev + '\\n\\nüöÄ Sending comprehensive analysis request to AI agent...');\n\n      // Create FormData with all sampled frames\n      const formData = new FormData();\n      formData.append('message', analysisPrompt);\n\n      // Add all sampled frames\n      for (let i = 0; i < sampledFrames.length; i++) {\n        const frame = sampledFrames[i];\n        const response = await fetch(frame.image);\n        const blob = await response.blob();\n        formData.append(`frame_${i}`, blob, `frame_${i}_at_${frame.timestamp.toFixed(1)}s.jpg`);\n      }\n      const webhookResponse = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${agentuityApiKey}`\n          // Don't set Content-Type, let browser set it for FormData\n        },\n        body: formData\n      });\n      if (!webhookResponse.ok) {\n        throw new Error(`Agentuity Agent Error: ${webhookResponse.status} ${webhookResponse.statusText}`);\n      }\n      const data = await webhookResponse.json();\n      if (data.success && data.data && data.data.sessionId) {\n        const sessionId = data.data.sessionId;\n        const sessionUrl = `https://app.agentuity.com/projects/proj_e01e2043faa726c5b1493ec266576770/sessions/${sessionId}`;\n        const finalMessage = `‚úÖ **Video Analysis Request Submitted Successfully!**\n\nüéØ **Analysis Summary:**\n- Analyzed ${sampledFrames.length} key frames from ${Math.round(video.duration)}-second video\n- Comprehensive content analysis requested\n- Educational content extraction in progress\n\nüîó **Session Information:**\n- **Session ID**: ${sessionId}\n- **Track Progress**: [View Live Analysis Results](${sessionUrl})\n\nüìã **What the AI Agent is Analyzing:**\n‚Ä¢ Overall video purpose and content type\n‚Ä¢ Key concepts and educational elements  \n‚Ä¢ Text extraction from all frames\n‚Ä¢ People, activities, and interactions\n‚Ä¢ Temporal progression and changes\n‚Ä¢ Environment and context analysis\n‚Ä¢ Key insights and takeaways\n‚Ä¢ Structured summary for easy understanding\n\nüîÑ **Next Steps:**\n1. Click the session link above to view real-time analysis progress\n2. Results will include comprehensive video summary\n3. Educational content breakdown and insights\n4. Extracted text and visual elements\n5. Recommended applications and takeaways\n\nYour comprehensive video analysis is being processed by the AI agent!`;\n        setVideoAnalysisResult(finalMessage);\n\n        // Optional: Try to retrieve results automatically\n        setTimeout(() => {\n          attemptVideoResultRetrieval(sessionId, agentuityApiKey, sessionUrl);\n        }, 15000); // Wait 15 seconds before first attempt\n      } else {\n        throw new Error('Unexpected response format from Agentuity');\n      }\n    } catch (error) {\n      console.error('Video analysis error:', error);\n      const errorMsg = `‚ùå **Video Analysis Error**\n\n**Error**: ${error.message}\n\n**Troubleshooting:**\n‚Ä¢ Ensure video is fully loaded\n‚Ä¢ Check internet connection\n‚Ä¢ Verify Agentuity agent is operational\n‚Ä¢ Try analyzing a shorter video segment\n\n**Alternative**: Use the single frame analysis for specific moments in the video.`;\n      setVideoAnalysisResult(errorMsg);\n    } finally {\n      setIsAnalyzingVideo(false);\n    }\n  };\n\n  // Attempt to retrieve video analysis results\n  const attemptVideoResultRetrieval = async (sessionId, apiKey, sessionUrl, maxAttempts = 4) => {\n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n      try {\n        await new Promise(resolve => setTimeout(resolve, 15000)); // Wait 15 seconds between attempts\n\n        const response = await fetch(`https://agentuity.ai/api/sessions/${sessionId}`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.ok) {\n          const sessionData = await response.json();\n          if (sessionData.status === 'completed' && sessionData.response) {\n            var _videoRef$current;\n            const analysis = `üéâ **Comprehensive Video Analysis Complete!**\n\n${sessionData.response}\n\n---\n*Analysis automatically retrieved from session ${sessionId}*\n*${videoFramesSampled.length} frames analyzed from ${Math.round(((_videoRef$current = videoRef.current) === null || _videoRef$current === void 0 ? void 0 : _videoRef$current.duration) || 0)}-second video*`;\n            setVideoAnalysisResult(analysis);\n            setDetectedText(`üé¨ Comprehensive video analysis complete! View detailed results in the Video Analysis panel.`);\n            return; // Success, stop trying\n          }\n        }\n      } catch (error) {\n        console.log(`Video analysis retrieval attempt ${attempt} failed:`, error);\n      }\n    }\n    console.log('Automatic video analysis retrieval failed, but user can check session URL');\n  };\n\n  // Handle video file upload\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (file && file.type.startsWith('video/')) {\n      setVideoFile(file);\n      const url = URL.createObjectURL(file);\n      setVideoURL(url);\n      setScreenshots([]);\n      setDetectedText('');\n      setOcrWorker(null); // Reset worker for new video\n      setLectureId('');\n      setProcessingStatus('');\n      setQueryResult('');\n\n      // If using backend, upload and process the video\n      if (isUsingBackend) {\n        try {\n          setUploadProgress('Uploading video to backend...');\n          const uploadResult = await uploadVideoToBackend(file);\n          console.log('Upload result:', uploadResult);\n          setUploadProgress('Upload complete! Processing video...');\n          const processResult = await processVideoWithBackend(uploadResult.video.path, file.name);\n          console.log('Process result:', processResult);\n          setLectureId(processResult.lectureId);\n          setProcessingStatus(`Processing started. Lecture ID: ${processResult.lectureId}`);\n          setUploadProgress('');\n        } catch (error) {\n          console.error('Backend upload/processing failed:', error);\n          setUploadProgress(`Error: ${error.message}`);\n        }\n      } else {\n        // Initialize OCR for local processing\n        setTimeout(() => {\n          initializeOCR();\n        }, 1000);\n      }\n    } else {\n      alert('Please select a valid video file');\n    }\n  };\n\n  // Take a screenshot of current video frame\n  const takeScreenshot = async () => {\n    if (!videoRef.current || !canvasRef.current) return;\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Draw video frame to canvas\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Convert to blob and create screenshot object\n    canvas.toBlob(blob => {\n      const screenshot = {\n        id: Date.now(),\n        blob: blob,\n        url: URL.createObjectURL(blob),\n        timestamp: video.currentTime,\n        detectedText: detectedText || 'No text detected'\n      };\n      setScreenshots(prev => [...prev, screenshot]);\n    }, 'image/png');\n  };\n\n  // Image preprocessing for better OCR\n  const preprocessImage = (canvas, ctx) => {\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n\n    // Convert to grayscale and enhance contrast\n    for (let i = 0; i < data.length; i += 4) {\n      // Convert to grayscale\n      const gray = Math.round(0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]);\n\n      // Enhance contrast - make text darker and background lighter\n      let enhanced;\n      if (gray < 128) {\n        // Dark pixels (likely text) - make darker\n        enhanced = Math.max(0, gray - 30);\n      } else {\n        // Light pixels (likely background) - make lighter\n        enhanced = Math.min(255, gray + 30);\n      }\n\n      // Apply threshold for better text separation\n      const threshold = enhanced < 100 ? 0 : 255;\n      data[i] = threshold; // Red\n      data[i + 1] = threshold; // Green\n      data[i + 2] = threshold; // Blue\n      // Alpha channel (data[i + 3]) remains unchanged\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n  };\n\n  // OCR text detection with preprocessing\n  const detectText = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n    setIsDetecting(true);\n    setDetectedText('Initializing OCR...');\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      setDetectedText('Preprocessing image for handwriting...');\n\n      // Apply image preprocessing for better OCR\n      preprocessImage(canvas, ctx);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n      if (worker) {\n        setDetectedText('Running enhanced OCR...');\n\n        // Convert processed canvas to data URL and run OCR\n        const dataURL = canvas.toDataURL('image/png');\n        const {\n          data: {\n            text,\n            confidence\n          }\n        } = await worker.recognize(dataURL, {\n          rectangle: {\n            top: 0,\n            left: 0,\n            width: canvas.width,\n            height: canvas.height\n          }\n        });\n        const cleanText = text.trim() || 'No text detected';\n        const confidenceText = confidence ? ` (Confidence: ${confidence.toFixed(1)}%)` : '';\n        setDetectedText(cleanText + confidenceText);\n        console.log('OCR Result:', cleanText, 'Confidence:', confidence);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n    } catch (error) {\n      console.error('Text detection failed:', error);\n      setDetectedText('Detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Enhanced OCR for messy handwriting\n  const detectTextEnhanced = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n    setIsDetecting(true);\n    setDetectedText('Initializing enhanced handwriting detection...');\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n      if (worker) {\n        // Try multiple preprocessing approaches\n        const results = [];\n\n        // Method 1: High contrast black/white\n        setDetectedText('Method 1: High contrast processing...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        preprocessImage(canvas, ctx);\n        const dataURL1 = canvas.toDataURL('image/png');\n        await worker.setParameters({\n          tessedit_pageseg_mode: '6',\n          // Uniform block of text\n          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?()[]{}=-+*/\\'\"@#$%^&_|\\\\~ \\n'\n        });\n        const result1 = await worker.recognize(dataURL1);\n        results.push({\n          method: 'High Contrast',\n          text: result1.data.text,\n          confidence: result1.data.confidence\n        });\n\n        // Method 2: Single character mode for individual letters\n        setDetectedText('Method 2: Character-by-character analysis...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        await worker.setParameters({\n          tessedit_pageseg_mode: '8',\n          // Single character\n          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n        });\n        const dataURL2 = canvas.toDataURL('image/png');\n        const result2 = await worker.recognize(dataURL2);\n        results.push({\n          method: 'Character Mode',\n          text: result2.data.text,\n          confidence: result2.data.confidence\n        });\n\n        // Method 3: Raw text detection with minimal processing\n        setDetectedText('Method 3: Raw text detection...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        await worker.setParameters({\n          tessedit_pageseg_mode: '13',\n          // Raw line. Treat the image as a single text line\n          preserve_interword_spaces: '1'\n        });\n        const dataURL3 = canvas.toDataURL('image/png');\n        const result3 = await worker.recognize(dataURL3);\n        results.push({\n          method: 'Raw Line',\n          text: result3.data.text,\n          confidence: result3.data.confidence\n        });\n\n        // Find best result\n        const bestResult = results.reduce((best, current) => current.confidence > best.confidence ? current : best);\n\n        // Display all results\n        let displayText = `üèÜ BEST (${bestResult.method}): ${bestResult.text}\\n\\n`;\n        results.forEach(result => {\n          var _result$confidence;\n          displayText += `${result.method} (${(_result$confidence = result.confidence) === null || _result$confidence === void 0 ? void 0 : _result$confidence.toFixed(1)}%): ${result.text}\\n\\n`;\n        });\n        setDetectedText(displayText);\n        console.log('Enhanced OCR Results:', results);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n    } catch (error) {\n      console.error('Enhanced text detection failed:', error);\n      setDetectedText('Enhanced detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // ChatGPT integration for better text interpretation\n  const enhanceWithChatGPT = async (imageDataURL, ocrText) => {\n    if (!apiKey) {\n      setChatGPTResult('Please enter your OpenAI API key first');\n      return;\n    }\n    setIsUsingChatGPT(true);\n    setChatGPTResult('Sending to ChatGPT for analysis...');\n    try {\n      var _data$choices$, _data$choices$$messag;\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-4o\",\n          messages: [{\n            role: \"user\",\n            content: [{\n              type: \"text\",\n              text: `I have handwritten text on a whiteboard that OCR is struggling to read accurately. The OCR detected this text: \"${ocrText}\". Please look at the image and provide a clean, corrected version of what is actually written. Focus on:\n1. Correcting OCR errors and misread characters\n2. Fixing spacing and formatting\n3. Interpreting unclear handwriting\n4. Organizing the text logically\n5. Only return the corrected text content, nothing else.`\n            }, {\n              type: \"image_url\",\n              image_url: {\n                url: imageDataURL\n              }\n            }]\n          }],\n          max_tokens: 500\n        })\n      });\n      if (!response.ok) {\n        let errorMessage = `API error: ${response.status} ${response.statusText}`;\n        if (response.status === 429) {\n          errorMessage = `‚ö†Ô∏è Rate Limit Exceeded (429)\\n\\nYou've made too many requests to the OpenAI API. This usually means:\\n‚Ä¢ You've exceeded your API rate limit\\n‚Ä¢ Your API key has insufficient credits\\n‚Ä¢ Too many requests in a short time\\n\\nPlease wait a few minutes and try again, or check your OpenAI account for usage limits.`;\n        } else if (response.status === 401) {\n          errorMessage = `üîë Authentication Error (401)\\n\\nYour API key appears to be invalid or expired. Please check:\\n‚Ä¢ The API key is correct\\n‚Ä¢ The key has proper permissions\\n‚Ä¢ Your OpenAI account is in good standing`;\n        } else if (response.status === 400) {\n          errorMessage = `‚ö†Ô∏è Bad Request (400)\\n\\nThere was an issue with the request format. This might be due to:\\n‚Ä¢ Image format not supported\\n‚Ä¢ Request too large\\n‚Ä¢ Invalid parameters`;\n        }\n        throw new Error(errorMessage);\n      }\n      const data = await response.json();\n      const correctedText = ((_data$choices$ = data.choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content) || 'No response from ChatGPT';\n      setChatGPTResult(correctedText);\n\n      // Update the main detected text with ChatGPT result\n      setDetectedText(`ü§ñ ChatGPT Enhanced:\\n${correctedText}\\n\\nüìù Original OCR:\\n${ocrText}`);\n    } catch (error) {\n      console.error('ChatGPT API error:', error);\n      setChatGPTResult(`Error: ${error.message}`);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Simple Agentuity Agent Analysis with user-friendly feedback\n  const analyzeSceneWithAI = async imageDataURL => {\n    const agentuityApiKey = process.env.REACT_APP_AGENTUITY_API_KEY;\n    const webhookUrl = process.env.REACT_APP_AGENTUITY_WEBHOOK_URL;\n    if (!agentuityApiKey || !webhookUrl) {\n      setChatGPTResult('Agentuity configuration missing. Please check environment variables.');\n      setAiAnalysisResult('Agentuity configuration missing. Please check environment variables.');\n      setShowAnalysisPanel(true);\n      return;\n    }\n\n    // Rate limiting check\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall;\n    const minDelay = 3000; // 3 seconds between calls\n\n    if (timeSinceLastCall < minDelay) {\n      const waitTime = Math.ceil((minDelay - timeSinceLastCall) / 1000);\n      const waitMessage = `‚è±Ô∏è Please wait ${waitTime} seconds before making another request.`;\n      setAiAnalysisResult(waitMessage);\n      setShowAnalysisPanel(true);\n      return;\n    }\n    setLastApiCall(now);\n    setIsUsingChatGPT(true);\n    setShowAnalysisPanel(true);\n    try {\n      // Show immediate feedback\n      const loadingMessage = `üöÄ **AI Analysis Starting!**\n\nüì∏ **Image Received**: Processing your image now...\nü§ñ **Agent Status**: Connecting to your Agentuity AI agent...\n‚ö° **Processing**: This typically takes 15-45 seconds\n\n**What I'm analyzing:**\n‚Ä¢ All visible text (handwritten, printed, signs)\n‚Ä¢ People and their activities\n‚Ä¢ Objects and equipment in the scene\n‚Ä¢ Educational content and concepts\n‚Ä¢ Overall scene description and context\n\nPlease wait while I provide a comprehensive analysis...`;\n      setChatGPTResult(loadingMessage);\n      setAiAnalysisResult(loadingMessage);\n\n      // Convert base64 image to blob for multipart upload\n      const response = await fetch(imageDataURL);\n      const blob = await response.blob();\n\n      // Create FormData for the webhook\n      const formData = new FormData();\n      formData.append('image', blob, 'analysis.jpg');\n      formData.append('message', `Please provide a comprehensive analysis of this image. I want to understand everything that's happening in this scene. Please include:\n\nüìã **SCENE OVERVIEW:**\n- What type of environment is this? (classroom, office, meeting room, etc.)\n- What is the main focus or subject?\n\nüîç **DETAILED OBSERVATIONS:**\n- All text visible (handwritten, printed, on boards, signs, etc.)\n- People present (count, what they're doing, clothing, gestures)\n- Objects and equipment (whiteboards, computers, furniture, tools)\n- Colors, lighting, and atmosphere\n\nüìù **TEXT CONTENT:**\n- Transcribe ALL visible text accurately\n- Note the context of each text element\n- Identify any diagrams, equations, or drawings\n\nüéØ **EDUCATIONAL CONTENT:**\n- If this appears to be educational, what subject/topic?\n- Key concepts being taught or discussed\n- Any visual aids or teaching materials\n\nüìä **SUMMARY:**\n- Main purpose/activity in this scene\n- Most important information conveyed\n- Overall assessment of what's happening\n\nBe thorough and detailed - I want to understand everything about this scene!`);\n\n      // Send request and get session ID\n      const webhookResponse = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${agentuityApiKey}`\n          // Don't set Content-Type, let browser set it for FormData\n        },\n        body: formData\n      });\n      if (!webhookResponse.ok) {\n        let errorMessage = `Agentuity Agent Error: ${webhookResponse.status} ${webhookResponse.statusText}`;\n        if (webhookResponse.status === 429) {\n          errorMessage = `‚ö†Ô∏è Rate Limit Exceeded\\n\\nYour Agentuity agent is temporarily overloaded. Please wait a moment and try again.`;\n        } else if (webhookResponse.status === 401) {\n          errorMessage = `üîë Authentication Error\\n\\nYour Agentuity API key appears to be invalid. Please check your configuration.`;\n        } else if (webhookResponse.status === 400) {\n          errorMessage = `‚ö†Ô∏è Bad Request\\n\\nThere was an issue with the request. Please try again.`;\n        }\n        throw new Error(errorMessage);\n      }\n      const data = await webhookResponse.json();\n      if (data.success && data.data && data.data.sessionId) {\n        const sessionId = data.data.sessionId;\n        const sessionUrl = `https://app.agentuity.com/projects/proj_e01e2043faa726c5b1493ec266576770/sessions/${sessionId}`;\n\n        // Provide helpful message with session link\n        const sessionMessage = `‚úÖ **Analysis Request Submitted Successfully!**\n\nüéØ **Session ID**: ${sessionId}\nÔøΩ **Track Progress**: [View Live Results](${sessionUrl})\n\n**What happens next:**\n1. Your Agentuity agent is now processing the image\n2. Analysis typically completes in 15-45 seconds\n3. You can view real-time progress at the link above\n4. Results will include comprehensive scene analysis\n\n**Alternative Method:**\nIf you prefer, you can also:\n‚Ä¢ Visit the Agentuity dashboard\n‚Ä¢ Navigate to your project sessions\n‚Ä¢ View the detailed analysis when complete\n\nYour agent is working on providing detailed insights about everything in your image!`;\n        setChatGPTResult(sessionMessage);\n        setAiAnalysisResult(sessionMessage);\n\n        // Update the main detected text\n        setDetectedText(`ü§ñ Analysis submitted to Agentuity Agent! Session: ${sessionId}`);\n\n        // Optional: Try to poll a few times with very generous timeouts\n        setTimeout(() => {\n          attemptResultRetrieval(sessionId, agentuityApiKey, sessionUrl);\n        }, 10000); // Wait 10 seconds before first attempt\n      } else {\n        throw new Error('Unexpected response format from Agentuity');\n      }\n    } catch (error) {\n      console.error('Agentuity Agent error:', error);\n      const errorMsg = `‚ùå **Error**: ${error.message}\n\n**Troubleshooting Tips:**\n‚Ä¢ Check your internet connection\n‚Ä¢ Verify your Agentuity agent is deployed\n‚Ä¢ Try again in a few moments\n‚Ä¢ Contact support if the issue persists`;\n      setChatGPTResult(errorMsg);\n      setAiAnalysisResult(errorMsg);\n      setShowAnalysisPanel(true);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Optional attempt to retrieve results (non-blocking)\n  const attemptResultRetrieval = async (sessionId, apiKey, sessionUrl, maxAttempts = 3) => {\n    // This is a best-effort attempt - if it fails, user can still check the session URL\n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n      try {\n        await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds between attempts\n\n        // Try to get the result\n        const response = await fetch(`https://agentuity.ai/api/sessions/${sessionId}`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.ok) {\n          const sessionData = await response.json();\n          if (sessionData.status === 'completed' && sessionData.response) {\n            // Success! Update with the actual result\n            const analysis = `üéâ **Analysis Complete!**\n\n${sessionData.response}\n\n---\n*Analysis retrieved automatically from session ${sessionId}*`;\n            setChatGPTResult(analysis);\n            setAiAnalysisResult(analysis);\n            setDetectedText(`ü§ñ AI Analysis Complete! Full results available in analysis panel.`);\n            return; // Success, stop trying\n          }\n        }\n      } catch (error) {\n        console.log(`Attempt ${attempt} to retrieve results failed:`, error);\n      }\n    }\n\n    // If we get here, automatic retrieval failed, but that's okay\n    console.log('Automatic result retrieval failed, but user can check session URL');\n  };\n\n  // AI Agent for Q&A about analyzed content\n  // AI Agent Q&A using Agentuity Agent\n  const askQuestionAboutContent = async () => {\n    const agentuityApiKey = process.env.REACT_APP_AGENTUITY_API_KEY;\n    const webhookUrl = process.env.REACT_APP_AGENTUITY_WEBHOOK_URL;\n    if (!agentuityApiKey || !webhookUrl) {\n      alert('Agentuity configuration missing. Please check environment variables.');\n      return;\n    }\n    if (!userQuestion.trim()) {\n      alert('Please enter a question');\n      return;\n    }\n    if (!aiAnalysisResult) {\n      alert('Please analyze some content first before asking questions');\n      return;\n    }\n\n    // Rate limiting check\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall;\n    const minDelay = 3000; // 3 seconds for Q&A with Agentuity\n\n    if (timeSinceLastCall < minDelay) {\n      const waitTime = Math.ceil((minDelay - timeSinceLastCall) / 1000);\n      alert(`Please wait ${waitTime} seconds before asking another question.`);\n      return;\n    }\n    setLastApiCall(now);\n    setIsUsingChatGPT(true);\n    try {\n      // Create the context-aware message for Agentuity\n      const contextualQuestion = `Based on my previous image analysis, please answer this question:\n\nPREVIOUS ANALYSIS CONTEXT:\n${aiAnalysisResult}\n\nCONVERSATION HISTORY:\n${conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nCURRENT QUESTION: ${userQuestion}\n\nPlease provide a helpful answer based on the analysis and conversation context above.`;\n      const response = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${agentuityApiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: contextualQuestion,\n          type: 'question'\n        })\n      });\n      if (!response.ok) {\n        let errorMessage = `Agentuity Agent Error: ${response.status} ${response.statusText}`;\n        if (response.status === 429) {\n          errorMessage = `‚ö†Ô∏è Rate Limit Exceeded\\n\\nToo many questions too quickly. Please wait a moment before asking another question.`;\n        } else if (response.status === 401) {\n          errorMessage = `üîë Authentication Error\\n\\nYour Agentuity API key appears to be invalid.`;\n        }\n        throw new Error(errorMessage);\n      }\n      const data = await response.json();\n\n      // Simplified approach for Q&A - provide session info to user\n      if (data.success && data.data && data.data.sessionId) {\n        const sessionId = data.data.sessionId;\n        const sessionUrl = `https://app.agentuity.com/projects/proj_e01e2043faa726c5b1493ec266576770/sessions/${sessionId}`;\n\n        // Add to conversation history with session info\n        const answer = `‚úÖ **Question submitted to AI agent!**\n\n**Your Question**: ${userQuestion}\n\n**Session ID**: ${sessionId}\n**Track Answer**: [View Response](${sessionUrl})\n\nYour Agentuity agent is processing your question based on the previous image analysis. You can view the response in real-time by clicking the link above or visiting your Agentuity dashboard.`;\n        const newConversation = [...conversationHistory, {\n          role: \"user\",\n          content: userQuestion\n        }, {\n          role: \"assistant\",\n          content: answer\n        }];\n\n        // Keep only last 6 messages (3 Q&A pairs) to manage context length\n        const trimmedHistory = newConversation.slice(-6);\n        setConversationHistory(trimmedHistory);\n\n        // Clear the input\n        setUserQuestion('');\n      } else {\n        // Fallback for direct response\n        const answer = data.response || data.message || data.content || 'Response received from agent';\n\n        // Add to conversation history\n        const newConversation = [...conversationHistory, {\n          role: \"user\",\n          content: userQuestion\n        }, {\n          role: \"assistant\",\n          content: answer\n        }];\n\n        // Keep only last 6 messages (3 Q&A pairs) to manage context length\n        const trimmedHistory = newConversation.slice(-6);\n        setConversationHistory(trimmedHistory);\n\n        // Clear the input\n        setUserQuestion('');\n      }\n    } catch (error) {\n      console.error('Agentuity Agent error:', error);\n      alert(`Error: ${error.message}`);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Full Scene Analysis - capture frame and analyze everything with AI Vision\n  const analyzeCurrentScene = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n    setIsDetecting(true);\n    setDetectedText('üì∏ Capturing frame for AI analysis...');\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw current video frame without any preprocessing for AI Vision\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // Convert to data URL for AI Vision API\n      const dataURL = canvas.toDataURL('image/jpeg', 0.8); // Use JPEG for smaller size\n\n      // Run AI Vision analysis\n      await analyzeSceneWithAI(dataURL);\n    } catch (error) {\n      console.error('Scene analysis failed:', error);\n      setDetectedText('Scene analysis failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Enhanced OCR with ChatGPT integration\n  const detectTextWithChatGPT = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n    setIsDetecting(true);\n    setDetectedText('Running OCR + ChatGPT analysis...');\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      setDetectedText('Preprocessing image...');\n\n      // Apply image preprocessing for better OCR\n      preprocessImage(canvas, ctx);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n      if (worker) {\n        setDetectedText('Running OCR...');\n\n        // Convert processed canvas to data URL\n        const dataURL = canvas.toDataURL('image/png');\n        const {\n          data: {\n            text,\n            confidence\n          }\n        } = await worker.recognize(dataURL);\n        const ocrText = text.trim() || 'No text detected';\n        setDetectedText(`OCR Result: ${ocrText}\\n\\nSending to ChatGPT for enhancement...`);\n\n        // Send to ChatGPT for enhancement\n        await enhanceWithChatGPT(dataURL, ocrText);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n    } catch (error) {\n      console.error('OCR + ChatGPT detection failed:', error);\n      setDetectedText('Detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Auto-detect text and take screenshot\n  const detectAndCapture = async () => {\n    await detectText();\n    setTimeout(() => {\n      takeScreenshot();\n    }, 500); // Small delay to ensure text is updated\n  };\n\n  // Clear all screenshots\n  const clearScreenshots = () => {\n    screenshots.forEach(screenshot => {\n      if (screenshot.url) {\n        URL.revokeObjectURL(screenshot.url);\n      }\n    });\n    setScreenshots([]);\n  };\n\n  // Backend API Integration Functions\n  const API_BASE_URL = 'http://localhost:3000';\n\n  // Upload video to backend\n  const uploadVideoToBackend = async videoFile => {\n    const formData = new FormData();\n    formData.append('video', videoFile);\n    try {\n      const response = await fetch(`${API_BASE_URL}/upload`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend upload error:', error);\n      throw error;\n    }\n  };\n\n  // Process video with backend\n  const processVideoWithBackend = async (videoPath, title = 'Untitled Lecture') => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ingest`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          videoPath,\n          title\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Processing failed: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend processing error:', error);\n      throw error;\n    }\n  };\n\n  // Query processed lecture\n  const queryLecture = async (lectureId, query) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          lectureId,\n          query\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Query failed: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend query error:', error);\n      throw error;\n    }\n  };\n\n  // Handle querying the backend\n  const handleBackendQuery = async () => {\n    if (!lectureId || !queryText.trim()) {\n      setQueryResult('Please ensure video is processed and enter a query');\n      return;\n    }\n    setIsQuerying(true);\n    setQueryResult('Analyzing lecture content...');\n    try {\n      const result = await queryLecture(lectureId, queryText.trim());\n      console.log('Query result:', result);\n      let formattedResult = `Answer: ${result.answer}\\n\\n`;\n      if (result.links && result.links.length > 0) {\n        formattedResult += 'Relevant timestamps:\\n';\n        result.links.forEach(link => {\n          formattedResult += `‚Ä¢ ${link.timecode}: ${link.text}\\n`;\n        });\n        formattedResult += '\\n';\n      }\n      if (result.flashcards && result.flashcards.length > 0) {\n        formattedResult += 'Generated flashcard:\\n';\n        result.flashcards.forEach(card => {\n          formattedResult += `Q: ${card.question}\\nA: ${card.answer}\\n`;\n        });\n      }\n      setQueryResult(formattedResult);\n    } catch (error) {\n      console.error('Query failed:', error);\n      setQueryResult(`Query failed: ${error.message}`);\n    } finally {\n      setIsQuerying(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uFFFD AI Scene Analyzer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1422,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Upload videos and analyze everything with AI Vision + OCR text detection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1423,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1421,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"video-upload\",\n          className: \"upload-label\",\n          children: \"Choose Video File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1429,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"video-upload\",\n          type: \"file\",\n          accept: \"video/*\",\n          onChange: handleFileUpload,\n          className: \"file-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1432,\n          columnNumber: 11\n        }, this), !videoFile && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-prompt\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uD83D\\uDCF9 Select a video file to get started\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1441,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"small\", {\n              children: \"Supported formats: MP4, WebM, AVI\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1442,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1442,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1440,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1428,\n        columnNumber: 9\n      }, this), videoURL && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"api-config\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83E\\uDD16 AI-Powered Analysis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1452,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"api-input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              placeholder: \"Enter your OpenAI API key...\",\n              value: apiKey,\n              onChange: e => setApiKey(e.target.value),\n              className: \"api-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1454,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"api-help\",\n              children: [\"Get your API key from \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"https://platform.openai.com/api-keys\",\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                children: \"OpenAI Platform\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1462,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1463,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Features:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1464,\n                columnNumber: 19\n              }, this), \" OCR Enhancement + Full Scene Analysis with AI Vision\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1461,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1453,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1451,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"backend-config\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83D\\uDE80 Backend Analysis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1471,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"backend-toggle\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"toggle-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: isUsingBackend,\n                onChange: e => setIsUsingBackend(e.target.checked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1474,\n                columnNumber: 19\n              }, this), \"Use backend API for full lecture analysis\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1473,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"backend-help\",\n              children: \"Enable this to upload videos to the backend for comprehensive analysis including board change detection and Q&A capabilities\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1481,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1472,\n            columnNumber: 15\n          }, this), uploadProgress && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status-message upload-status\",\n            children: uploadProgress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1488,\n            columnNumber: 17\n          }, this), processingStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status-message processing-status\",\n            children: processingStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1494,\n            columnNumber: 17\n          }, this), lectureId && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"query-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\uD83D\\uDD0D Ask Questions About This Lecture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1502,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"query-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Ask a question about the lecture content...\",\n                value: queryText,\n                onChange: e => setQueryText(e.target.value),\n                className: \"query-input\",\n                onKeyPress: e => e.key === 'Enter' && handleBackendQuery()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1504,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleBackendQuery,\n                disabled: isQuerying || !queryText.trim(),\n                className: \"query-button\",\n                children: isQuerying ? 'Analyzing...' : 'Ask Question'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1512,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1503,\n              columnNumber: 19\n            }, this), queryResult && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"query-result\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"\\uD83D\\uDCCB Analysis Result:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1523,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n                className: \"result-text\",\n                children: queryResult\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1524,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1522,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1501,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1470,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: videoRef,\n            src: videoURL,\n            controls: true,\n            className: \"video-player\",\n            children: \"Your browser does not support the video tag.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1532,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: canvasRef,\n            style: {\n              display: 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1540,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1531,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: takeScreenshot,\n            className: \"btn primary\",\n            children: \"\\uD83D\\uDCF8 Screenshot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1545,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: analyzeCurrentScene,\n            disabled: isDetecting || !apiKey,\n            className: \"btn ai-vision primary-action\",\n            children: isDetecting ? 'üîÑ Analyzing with AI...' : 'üîç Analyze Full Scene with AI'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1548,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: analyzeEntireVideo,\n            disabled: isAnalyzingVideo || !apiKey || !videoRef.current,\n            className: \"btn ai-video comprehensive-analysis\",\n            children: isAnalyzingVideo ? 'üé¨ Analyzing Video...' : 'üéØ Comprehensive Video Analysis'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1555,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: initializeOCR,\n            disabled: isDetecting,\n            className: \"btn info\",\n            children: \"\\uD83D\\uDD27 Initialize OCR\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1562,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: detectAndCapture,\n            disabled: isDetecting,\n            className: \"btn highlight\",\n            children: isDetecting ? '‚ö° Processing...' : '‚ö° Detect & Capture'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1569,\n            columnNumber: 15\n          }, this), screenshots.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: clearScreenshots,\n            className: \"btn danger\",\n            children: [\"\\uD83D\\uDDD1\\uFE0F Clear All (\", screenshots.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1577,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              alert(`API Status:\\n- API Key: ${apiKey ? 'Present' : 'Missing'}\\n- Connection: Testing...\\n\\nCheck console for details.`);\n              console.log('API Key Check:', {\n                hasKey: !!apiKey,\n                keyLength: apiKey === null || apiKey === void 0 ? void 0 : apiKey.length,\n                keyStart: (apiKey === null || apiKey === void 0 ? void 0 : apiKey.substring(0, 15)) + '...',\n                timestamp: new Date().toISOString()\n              });\n            },\n            className: \"btn info\",\n            title: \"Test API connection and debug\",\n            children: \"\\uD83D\\uDD27 Test API\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1581,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1544,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"capture-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83D\\uDCCB Before/After Whiteboard Capture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1600,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"capture-status\",\n            children: [captureMode === 'waiting' && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\uD83C\\uDFAF Ready to capture whiteboard states. Start by capturing the BEFORE state.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1603,\n              columnNumber: 19\n            }, this), captureMode === 'before-captured' && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\u2705 Before state captured! Make your changes to the whiteboard, then capture the AFTER state.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1606,\n              columnNumber: 19\n            }, this), captureMode === 'ready-for-after' && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\uD83C\\uDF8A Both states captured! Scroll down to view the comparison analysis.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1609,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1601,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"capture-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: captureBeforeState,\n              disabled: isDetecting,\n              className: \"btn secondary\",\n              title: \"Capture the current state before making changes\",\n              children: \"\\uD83D\\uDCF8 Capture BEFORE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1614,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: captureAfterState,\n              disabled: isDetecting || !beforeCapture,\n              className: \"btn secondary\",\n              title: \"Capture the state after making changes\",\n              children: \"\\uD83D\\uDCF8 Capture AFTER\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1622,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: resetCaptures,\n              disabled: !beforeCapture && !afterCapture,\n              className: \"btn danger\",\n              title: \"Reset and start over with new captures\",\n              children: \"\\uD83D\\uDD04 Reset Captures\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1630,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1613,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1599,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-detection\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83D\\uDD0D Detected Text:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1643,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detected-text-box\",\n            children: detectedText || 'Click \"Detect Text\" to analyze the current frame'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1644,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1642,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1449,\n        columnNumber: 11\n      }, this), showAnalysisPanel && aiAnalysisResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ai-analysis-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83D\\uDEF8 AI Vision Analysis Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1656,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowAnalysisPanel(false),\n            className: \"close-panel-btn\",\n            children: \"\\u2715\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1657,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1655,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"analysis-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\uD83D\\uDCCA Scene Analysis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1666,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n              className: \"analysis-text\",\n              children: aiAnalysisResult\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1667,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1665,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"qa-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\uD83E\\uDD16 Ask Questions About This Content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1672,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"qa-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Ask a question about what you see in the image...\",\n                value: userQuestion,\n                onChange: e => setUserQuestion(e.target.value),\n                className: \"qa-input\",\n                onKeyPress: e => e.key === 'Enter' && askQuestionAboutContent(),\n                disabled: isUsingChatGPT\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1674,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: askQuestionAboutContent,\n                disabled: isUsingChatGPT || !userQuestion.trim(),\n                className: \"qa-button\",\n                children: isUsingChatGPT ? 'ü§î Thinking...' : 'üí¨ Ask'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1683,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1673,\n              columnNumber: 17\n            }, this), conversationHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"conversation-history\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"\\uD83D\\uDCAD Conversation\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1695,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"conversation-messages\",\n                children: conversationHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `message ${message.role === 'user' ? 'user-message' : 'ai-message'}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"message-role\",\n                    children: message.role === 'user' ? 'üë§ You:' : 'ü§ñ AI:'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1702,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"message-content\",\n                    children: message.content\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1705,\n                    columnNumber: 27\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1698,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1696,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setConversationHistory([]),\n                className: \"clear-conversation-btn\",\n                children: \"\\uD83D\\uDDD1\\uFE0F Clear Conversation\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1709,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1694,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1671,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1664,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1654,\n        columnNumber: 11\n      }, this), showVideoAnalysis && videoAnalysisResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-analysis-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83C\\uDFAC Comprehensive Video Analysis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1726,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowVideoAnalysis(false),\n            className: \"close-panel-btn\",\n            children: \"\\u2715\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1727,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1725,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"analysis-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\uD83D\\uDCCA Complete Video Analysis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1736,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n              className: \"video-analysis-text\",\n              children: videoAnalysisResult\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1737,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1735,\n            columnNumber: 15\n          }, this), videoFramesSampled.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sampled-frames-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"\\uD83D\\uDCF8 Analyzed Video Frames (\", videoFramesSampled.length, \" samples)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1743,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"frames-grid\",\n              children: videoFramesSampled.map((frame, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"frame-sample\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: frame.image,\n                  alt: `Frame ${frame.frameNumber}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1747,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"frame-info\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [\"Frame \", frame.frameNumber]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1749,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [frame.timestamp.toFixed(1), \"s\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1750,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1748,\n                  columnNumber: 25\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1746,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1744,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1742,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1734,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1724,\n        columnNumber: 11\n      }, this), screenshots.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gallery-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"\\uD83D\\uDCF1 Screenshots (\", screenshots.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1764,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gallery\",\n          children: screenshots.map(screenshot => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"screenshot-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: screenshot.url,\n              alt: `Screenshot at ${screenshot.timestamp.toFixed(1)}s`,\n              className: \"screenshot-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1768,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"screenshot-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"\\u23F1\\uFE0F Time:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1774,\n                  columnNumber: 24\n                }, this), \" \", screenshot.timestamp.toFixed(1), \"s\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1774,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"\\uD83D\\uDCDD Text:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1775,\n                  columnNumber: 24\n                }, this), \" \", screenshot.detectedText]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1775,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1773,\n              columnNumber: 19\n            }, this)]\n          }, screenshot.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1767,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1765,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1763,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1426,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1420,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jJBI18pcPPuY9nik/+MDnFYUXoQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useRef","useState","Tesseract","jsxDEV","_jsxDEV","App","_s","videoFile","setVideoFile","videoURL","setVideoURL","screenshots","setScreenshots","isDetecting","setIsDetecting","detectedText","setDetectedText","ocrWorker","setOcrWorker","apiKey","setApiKey","process","env","REACT_APP_OPENAI_API_KEY","isUsingChatGPT","setIsUsingChatGPT","chatGPTResult","setChatGPTResult","aiAnalysisResult","setAiAnalysisResult","showAnalysisPanel","setShowAnalysisPanel","lastApiCall","setLastApiCall","rateLimitCooldown","setRateLimitCooldown","conversationHistory","setConversationHistory","userQuestion","setUserQuestion","apiKeyStatus","setApiKeyStatus","beforeCapture","setBeforeCapture","afterCapture","setAfterCapture","captureMode","setCaptureMode","comparisonResult","setComparisonResult","showComparison","setShowComparison","videoAnalysisResult","setVideoAnalysisResult","isAnalyzingVideo","setIsAnalyzingVideo","showVideoAnalysis","setShowVideoAnalysis","videoFramesSampled","setVideoFramesSampled","testApiKey","response","fetch","method","headers","ok","console","log","error","isUsingBackend","setIsUsingBackend","lectureId","setLectureId","uploadProgress","setUploadProgress","processingStatus","setProcessingStatus","queryText","setQueryText","queryResult","setQueryResult","isQuerying","setIsQuerying","videoRef","canvasRef","initializeOCR","worker","createWorker","logger","m","setParameters","tessedit_char_whitelist","tessedit_pageseg_mode","preserve_interword_spaces","tessedit_do_invert","message","captureBeforeState","current","alert","video","canvas","ctx","getContext","width","videoWidth","height","videoHeight","drawImage","dataURL","toDataURL","image","timestamp","Date","toLocaleString","frameTime","currentTime","captureAfterState","analyzeChanges","timeDiff","timeFormatted","Math","abs","toFixed","basicAnalysis","resetCaptures","analyzeEntireVideo","duration","isNaN","initialMessage","round","framesToSample","min","max","floor","frameInterval","sampledFrames","i","Promise","resolve","seekHandler","removeEventListener","push","frameNumber","addEventListener","prev","analysisPrompt","length","agentuityApiKey","REACT_APP_AGENTUITY_API_KEY","webhookUrl","REACT_APP_AGENTUITY_WEBHOOK_URL","Error","formData","FormData","append","frame","blob","webhookResponse","body","status","statusText","data","json","success","sessionId","sessionUrl","finalMessage","setTimeout","attemptVideoResultRetrieval","errorMsg","maxAttempts","attempt","sessionData","_videoRef$current","analysis","handleFileUpload","event","file","target","files","type","startsWith","url","URL","createObjectURL","uploadResult","uploadVideoToBackend","processResult","processVideoWithBackend","path","name","takeScreenshot","toBlob","screenshot","id","now","preprocessImage","imageData","getImageData","gray","enhanced","threshold","putImageData","detectText","text","confidence","recognize","rectangle","top","left","cleanText","trim","confidenceText","detectTextEnhanced","results","dataURL1","result1","dataURL2","result2","dataURL3","result3","bestResult","reduce","best","displayText","forEach","result","_result$confidence","enhanceWithChatGPT","imageDataURL","ocrText","_data$choices$","_data$choices$$messag","JSON","stringify","model","messages","role","content","image_url","max_tokens","errorMessage","correctedText","choices","analyzeSceneWithAI","timeSinceLastCall","minDelay","waitTime","ceil","waitMessage","loadingMessage","sessionMessage","attemptResultRetrieval","askQuestionAboutContent","contextualQuestion","map","msg","join","answer","newConversation","trimmedHistory","slice","analyzeCurrentScene","detectTextWithChatGPT","detectAndCapture","clearScreenshots","revokeObjectURL","API_BASE_URL","videoPath","title","queryLecture","query","handleBackendQuery","formattedResult","links","link","timecode","flashcards","card","question","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","accept","onChange","placeholder","value","e","href","rel","checked","onKeyPress","key","onClick","disabled","ref","src","controls","style","display","hasKey","keyLength","keyStart","substring","toISOString","index","alt","_c","$RefreshReg$"],"sources":["/Users/kyleprice/south_florida_hackstreet/whiteboard-detector/src/App.js"],"sourcesContent":["import { useRef, useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\n\nfunction App() {\n  const [videoFile, setVideoFile] = useState(null);\n  const [videoURL, setVideoURL] = useState(null);\n  const [screenshots, setScreenshots] = useState([]);\n  const [isDetecting, setIsDetecting] = useState(false);\n  const [detectedText, setDetectedText] = useState('');\n  const [ocrWorker, setOcrWorker] = useState(null);\n  const [apiKey, setApiKey] = useState(process.env.REACT_APP_OPENAI_API_KEY || '');\n  const [isUsingChatGPT, setIsUsingChatGPT] = useState(false);\n  const [chatGPTResult, setChatGPTResult] = useState('');\n  \n  // AI Vision Analysis Results\n  const [aiAnalysisResult, setAiAnalysisResult] = useState('');\n  const [showAnalysisPanel, setShowAnalysisPanel] = useState(false);\n  \n  // Rate limiting and conversation state\n  const [lastApiCall, setLastApiCall] = useState(0);\n  const [rateLimitCooldown, setRateLimitCooldown] = useState(0);\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const [userQuestion, setUserQuestion] = useState('');\n  const [apiKeyStatus, setApiKeyStatus] = useState('unchecked'); // unchecked, valid, invalid\n  \n  // Before/After Whiteboard Capture System\n  const [beforeCapture, setBeforeCapture] = useState(null);\n  const [afterCapture, setAfterCapture] = useState(null);\n  const [captureMode, setCaptureMode] = useState('waiting'); // waiting, before-captured, ready-for-after\n  const [comparisonResult, setComparisonResult] = useState('');\n  const [showComparison, setShowComparison] = useState(false);\n  \n  // Video Analysis System\n  const [videoAnalysisResult, setVideoAnalysisResult] = useState('');\n  const [isAnalyzingVideo, setIsAnalyzingVideo] = useState(false);\n  const [showVideoAnalysis, setShowVideoAnalysis] = useState(false);\n  const [videoFramesSampled, setVideoFramesSampled] = useState([]);\n  \n  // Test API key validity\n  const testApiKey = async () => {\n    if (!apiKey) {\n      setApiKeyStatus('invalid');\n      return;\n    }\n    \n    try {\n      const response = await fetch('https://api.openai.com/v1/models', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`\n        }\n      });\n      \n      if (response.ok) {\n        setApiKeyStatus('valid');\n        console.log('‚úÖ API key is valid');\n      } else {\n        setApiKeyStatus('invalid');\n        console.log('‚ùå API key is invalid');\n      }\n    } catch (error) {\n      setApiKeyStatus('invalid');\n      console.log('‚ùå API key test failed:', error);\n    }\n  };\n  \n  // Backend integration state\n  const [isUsingBackend, setIsUsingBackend] = useState(false);\n  const [lectureId, setLectureId] = useState('');\n  const [uploadProgress, setUploadProgress] = useState('');\n  const [processingStatus, setProcessingStatus] = useState('');\n  const [queryText, setQueryText] = useState('');\n  const [queryResult, setQueryResult] = useState('');\n  const [isQuerying, setIsQuerying] = useState(false);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Initialize OCR worker with handwriting optimizations\n  const initializeOCR = async () => {\n    if (ocrWorker) return ocrWorker;\n    \n    try {\n      console.log('Starting OCR initialization...');\n      const worker = await Tesseract.createWorker('eng', 1, {\n        logger: m => console.log('OCR Logger:', m)\n      });\n      \n      // Configure for better handwriting recognition\n      await worker.setParameters({\n        tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?()[]{}=-+*/\\'\"@#$%^&_|\\\\~ ',\n        tessedit_pageseg_mode: '6', // Uniform block of text\n        preserve_interword_spaces: '1',\n        tessedit_do_invert: '0'\n      });\n      \n      console.log('OCR worker created successfully');\n      setOcrWorker(worker);\n      return worker;\n    } catch (error) {\n      console.error('OCR initialization failed:', error);\n      setDetectedText('OCR initialization failed: ' + error.message);\n      return null;\n    }\n  };\n\n  // Before/After Whiteboard Capture Functions\n  const captureBeforeState = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n    \n    if (video.videoWidth === 0 || video.videoHeight === 0) {\n      alert('Video not loaded properly');\n      return;\n    }\n\n    // Capture the current frame\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataURL = canvas.toDataURL('image/png');\n    \n    setBeforeCapture({\n      image: dataURL,\n      timestamp: new Date().toLocaleString(),\n      frameTime: video.currentTime\n    });\n    \n    setCaptureMode('before-captured');\n    setDetectedText('üì∏ Before state captured! Make your edits to the whiteboard, then capture the after state.');\n  };\n\n  const captureAfterState = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n\n    if (!beforeCapture) {\n      alert('Please capture the before state first.');\n      return;\n    }\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n\n    // Capture the current frame\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataURL = canvas.toDataURL('image/png');\n    \n    setAfterCapture({\n      image: dataURL,\n      timestamp: new Date().toLocaleString(),\n      frameTime: video.currentTime\n    });\n    \n    setCaptureMode('ready-for-after');\n    setShowComparison(true);\n    setDetectedText('üì∏ After state captured! Scroll down to see before/after comparison.');\n    \n    // Auto-generate comparison analysis\n    await analyzeChanges();\n  };\n\n  const analyzeChanges = async () => {\n    if (!beforeCapture || !afterCapture) return;\n    \n    setComparisonResult('üîç Analyzing changes between before and after states...');\n    \n    try {\n      // For now, provide a basic comparison message\n      // In the future, this could use AI to detect actual differences\n      const timeDiff = afterCapture.frameTime - beforeCapture.frameTime;\n      const timeFormatted = Math.abs(timeDiff).toFixed(1);\n      \n      const basicAnalysis = `üìä **Before/After Analysis Complete**\n\n‚è±Ô∏è **Time Difference**: ${timeFormatted} seconds between captures\nüìÖ **Before**: ${beforeCapture.timestamp}\nüìÖ **After**: ${afterCapture.timestamp}\n\nüîç **Visual Comparison**: \n- Both states have been captured for manual comparison\n- Review the images below to identify changes\n- Look for added text, erased content, or modified diagrams\n\nüí° **Tip**: Use the AI analysis feature on each image individually to get detailed descriptions of what changed.`;\n\n      setComparisonResult(basicAnalysis);\n      \n    } catch (error) {\n      setComparisonResult(`‚ùå Error analyzing changes: ${error.message}`);\n    }\n  };\n\n  const resetCaptures = () => {\n    setBeforeCapture(null);\n    setAfterCapture(null);\n    setCaptureMode('waiting');\n    setComparisonResult('');\n    setShowComparison(false);\n    setDetectedText('üîÑ Capture system reset. Ready to capture new before/after states.');\n  };\n\n  // Comprehensive Video Analysis Function\n  const analyzeEntireVideo = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      alert('Video not loaded. Please load a video first.');\n      return;\n    }\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    if (video.duration === 0 || isNaN(video.duration)) {\n      alert('Video not fully loaded. Please wait for the video to load completely.');\n      return;\n    }\n\n    setIsAnalyzingVideo(true);\n    setShowVideoAnalysis(true);\n    setVideoFramesSampled([]);\n    \n    const initialMessage = `üé¨ **Starting Comprehensive Video Analysis**\n\nüìπ **Video Details:**\n- Duration: ${Math.round(video.duration)} seconds\n- Dimensions: ${video.videoWidth}x${video.videoHeight}\n\nüîç **Analysis Process:**\n1. Sampling key frames throughout the video\n2. Extracting visual content from each frame\n3. Identifying patterns and changes over time\n4. Generating comprehensive summary and insights\n\n‚ö° **Processing Status:** Sampling frames...`;\n\n    setVideoAnalysisResult(initialMessage);\n\n    try {\n      // Sample frames at strategic intervals throughout the video\n      const framesToSample = Math.min(8, Math.max(3, Math.floor(video.duration / 10))); // 3-8 frames depending on video length\n      const frameInterval = video.duration / framesToSample;\n      const sampledFrames = [];\n\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n\n      // Sample frames at different timestamps\n      for (let i = 0; i < framesToSample; i++) {\n        const timestamp = i * frameInterval;\n        \n        // Seek to timestamp and capture frame\n        await new Promise((resolve) => {\n          const seekHandler = () => {\n            video.removeEventListener('seeked', seekHandler);\n            \n            // Capture the frame\n            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n            const dataURL = canvas.toDataURL('image/jpeg', 0.7);\n            \n            sampledFrames.push({\n              timestamp: timestamp,\n              image: dataURL,\n              frameNumber: i + 1\n            });\n            \n            resolve();\n          };\n          \n          video.addEventListener('seeked', seekHandler);\n          video.currentTime = timestamp;\n        });\n\n        // Update progress\n        setVideoAnalysisResult(prev => prev + `\\nüì∏ Frame ${i + 1}/${framesToSample} captured at ${timestamp.toFixed(1)}s`);\n      }\n\n      setVideoFramesSampled(sampledFrames);\n\n      // Create comprehensive analysis prompt\n      const analysisPrompt = `Please provide a comprehensive analysis of this video based on the ${sampledFrames.length} key frames I've sampled throughout its ${Math.round(video.duration)}-second duration.\n\nüéØ **COMPREHENSIVE VIDEO ANALYSIS REQUEST:**\n\nüìä **OVERALL SUMMARY:**\n- What is the main purpose/topic of this video?\n- What type of content is being presented? (lecture, tutorial, meeting, etc.)\n- Who is the target audience?\n\nüîç **DETAILED CONTENT ANALYSIS:**\n- What are the key concepts, topics, or subjects discussed?\n- Are there any educational elements, teaching materials, or learning objectives?\n- What visual aids are used? (whiteboards, slides, demonstrations, etc.)\n\nüìù **TEXT AND WRITING ANALYSIS:**\n- Extract and transcribe ALL visible text throughout the video\n- Identify any equations, formulas, diagrams, or technical content\n- Note any handwritten vs. printed text\n- Track how text content changes over time\n\nüë• **PEOPLE AND ACTIVITIES:**\n- How many people are visible and what are their roles?\n- What activities are taking place? (teaching, presenting, discussing, etc.)\n- How do people interact with materials or each other?\n- What gestures, movements, or behaviors are significant?\n\nüéì **EDUCATIONAL VALUE:**\n- What skills or knowledge does this video teach?\n- What are the main learning outcomes?\n- How is information structured and presented?\n- What teaching methods or techniques are used?\n\n‚è±Ô∏è **TEMPORAL ANALYSIS:**\n- How does the content progress over time?\n- Are there distinct sections or phases in the video?\n- What changes occur between the beginning and end?\n- Identify any pivotal moments or transitions\n\nüèõÔ∏è **ENVIRONMENT & CONTEXT:**\n- Describe the setting/location (classroom, office, lab, etc.)\n- What equipment, tools, or materials are present?\n- How does the environment support the content?\n\nüí° **KEY INSIGHTS & TAKEAWAYS:**\n- What are the most important points or messages?\n- What would someone learn from watching this video?\n- How could this content be applied or used?\n\nüìã **STRUCTURED SUMMARY:**\nProvide a clear, organized summary that someone could use to understand the video's content without watching it.\n\nPlease be thorough and detailed - I want to understand everything that happens in this video and its educational/informational value.`;\n\n      // Send analysis request to Agentuity agent\n      const agentuityApiKey = process.env.REACT_APP_AGENTUITY_API_KEY;\n      const webhookUrl = process.env.REACT_APP_AGENTUITY_WEBHOOK_URL;\n\n      if (!agentuityApiKey || !webhookUrl) {\n        throw new Error('Agentuity configuration missing. Please check environment variables.');\n      }\n\n      setVideoAnalysisResult(prev => prev + '\\n\\nüöÄ Sending comprehensive analysis request to AI agent...');\n\n      // Create FormData with all sampled frames\n      const formData = new FormData();\n      formData.append('message', analysisPrompt);\n      \n      // Add all sampled frames\n      for (let i = 0; i < sampledFrames.length; i++) {\n        const frame = sampledFrames[i];\n        const response = await fetch(frame.image);\n        const blob = await response.blob();\n        formData.append(`frame_${i}`, blob, `frame_${i}_at_${frame.timestamp.toFixed(1)}s.jpg`);\n      }\n\n      const webhookResponse = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${agentuityApiKey}`,\n          // Don't set Content-Type, let browser set it for FormData\n        },\n        body: formData\n      });\n\n      if (!webhookResponse.ok) {\n        throw new Error(`Agentuity Agent Error: ${webhookResponse.status} ${webhookResponse.statusText}`);\n      }\n\n      const data = await webhookResponse.json();\n      \n      if (data.success && data.data && data.data.sessionId) {\n        const sessionId = data.data.sessionId;\n        const sessionUrl = `https://app.agentuity.com/projects/proj_e01e2043faa726c5b1493ec266576770/sessions/${sessionId}`;\n        \n        const finalMessage = `‚úÖ **Video Analysis Request Submitted Successfully!**\n\nüéØ **Analysis Summary:**\n- Analyzed ${sampledFrames.length} key frames from ${Math.round(video.duration)}-second video\n- Comprehensive content analysis requested\n- Educational content extraction in progress\n\nüîó **Session Information:**\n- **Session ID**: ${sessionId}\n- **Track Progress**: [View Live Analysis Results](${sessionUrl})\n\nüìã **What the AI Agent is Analyzing:**\n‚Ä¢ Overall video purpose and content type\n‚Ä¢ Key concepts and educational elements  \n‚Ä¢ Text extraction from all frames\n‚Ä¢ People, activities, and interactions\n‚Ä¢ Temporal progression and changes\n‚Ä¢ Environment and context analysis\n‚Ä¢ Key insights and takeaways\n‚Ä¢ Structured summary for easy understanding\n\nüîÑ **Next Steps:**\n1. Click the session link above to view real-time analysis progress\n2. Results will include comprehensive video summary\n3. Educational content breakdown and insights\n4. Extracted text and visual elements\n5. Recommended applications and takeaways\n\nYour comprehensive video analysis is being processed by the AI agent!`;\n\n        setVideoAnalysisResult(finalMessage);\n        \n        // Optional: Try to retrieve results automatically\n        setTimeout(() => {\n          attemptVideoResultRetrieval(sessionId, agentuityApiKey, sessionUrl);\n        }, 15000); // Wait 15 seconds before first attempt\n        \n      } else {\n        throw new Error('Unexpected response format from Agentuity');\n      }\n\n    } catch (error) {\n      console.error('Video analysis error:', error);\n      const errorMsg = `‚ùå **Video Analysis Error**\n\n**Error**: ${error.message}\n\n**Troubleshooting:**\n‚Ä¢ Ensure video is fully loaded\n‚Ä¢ Check internet connection\n‚Ä¢ Verify Agentuity agent is operational\n‚Ä¢ Try analyzing a shorter video segment\n\n**Alternative**: Use the single frame analysis for specific moments in the video.`;\n      \n      setVideoAnalysisResult(errorMsg);\n    } finally {\n      setIsAnalyzingVideo(false);\n    }\n  };\n\n  // Attempt to retrieve video analysis results\n  const attemptVideoResultRetrieval = async (sessionId, apiKey, sessionUrl, maxAttempts = 4) => {\n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n      try {\n        await new Promise(resolve => setTimeout(resolve, 15000)); // Wait 15 seconds between attempts\n        \n        const response = await fetch(`https://agentuity.ai/api/sessions/${sessionId}`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        if (response.ok) {\n          const sessionData = await response.json();\n          \n          if (sessionData.status === 'completed' && sessionData.response) {\n            const analysis = `üéâ **Comprehensive Video Analysis Complete!**\n\n${sessionData.response}\n\n---\n*Analysis automatically retrieved from session ${sessionId}*\n*${videoFramesSampled.length} frames analyzed from ${Math.round(videoRef.current?.duration || 0)}-second video*`;\n            \n            setVideoAnalysisResult(analysis);\n            setDetectedText(`üé¨ Comprehensive video analysis complete! View detailed results in the Video Analysis panel.`);\n            return; // Success, stop trying\n          }\n        }\n      } catch (error) {\n        console.log(`Video analysis retrieval attempt ${attempt} failed:`, error);\n      }\n    }\n    \n    console.log('Automatic video analysis retrieval failed, but user can check session URL');\n  };\n\n  // Handle video file upload\n  const handleFileUpload = async (event) => {\n    const file = event.target.files[0];\n    if (file && file.type.startsWith('video/')) {\n      setVideoFile(file);\n      const url = URL.createObjectURL(file);\n      setVideoURL(url);\n      setScreenshots([]);\n      setDetectedText('');\n      setOcrWorker(null); // Reset worker for new video\n      setLectureId('');\n      setProcessingStatus('');\n      setQueryResult('');\n      \n      // If using backend, upload and process the video\n      if (isUsingBackend) {\n        try {\n          setUploadProgress('Uploading video to backend...');\n          const uploadResult = await uploadVideoToBackend(file);\n          console.log('Upload result:', uploadResult);\n          \n          setUploadProgress('Upload complete! Processing video...');\n          const processResult = await processVideoWithBackend(\n            uploadResult.video.path, \n            file.name\n          );\n          console.log('Process result:', processResult);\n          \n          setLectureId(processResult.lectureId);\n          setProcessingStatus(`Processing started. Lecture ID: ${processResult.lectureId}`);\n          setUploadProgress('');\n        } catch (error) {\n          console.error('Backend upload/processing failed:', error);\n          setUploadProgress(`Error: ${error.message}`);\n        }\n      } else {\n        // Initialize OCR for local processing\n        setTimeout(() => {\n          initializeOCR();\n        }, 1000);\n      }\n    } else {\n      alert('Please select a valid video file');\n    }\n  };\n\n  // Take a screenshot of current video frame\n  const takeScreenshot = async () => {\n    if (!videoRef.current || !canvasRef.current) return;\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Draw video frame to canvas\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Convert to blob and create screenshot object\n    canvas.toBlob((blob) => {\n      const screenshot = {\n        id: Date.now(),\n        blob: blob,\n        url: URL.createObjectURL(blob),\n        timestamp: video.currentTime,\n        detectedText: detectedText || 'No text detected'\n      };\n      setScreenshots(prev => [...prev, screenshot]);\n    }, 'image/png');\n  };\n\n  // Image preprocessing for better OCR\n  const preprocessImage = (canvas, ctx) => {\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n    \n    // Convert to grayscale and enhance contrast\n    for (let i = 0; i < data.length; i += 4) {\n      // Convert to grayscale\n      const gray = Math.round(0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]);\n      \n      // Enhance contrast - make text darker and background lighter\n      let enhanced;\n      if (gray < 128) {\n        // Dark pixels (likely text) - make darker\n        enhanced = Math.max(0, gray - 30);\n      } else {\n        // Light pixels (likely background) - make lighter\n        enhanced = Math.min(255, gray + 30);\n      }\n      \n      // Apply threshold for better text separation\n      const threshold = enhanced < 100 ? 0 : 255;\n      \n      data[i] = threshold;     // Red\n      data[i + 1] = threshold; // Green\n      data[i + 2] = threshold; // Blue\n      // Alpha channel (data[i + 3]) remains unchanged\n    }\n    \n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n  };\n\n  // OCR text detection with preprocessing\n  const detectText = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n\n    setIsDetecting(true);\n    setDetectedText('Initializing OCR...');\n\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      \n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      setDetectedText('Preprocessing image for handwriting...');\n\n      // Apply image preprocessing for better OCR\n      preprocessImage(canvas, ctx);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n\n      if (worker) {\n        setDetectedText('Running enhanced OCR...');\n        \n        // Convert processed canvas to data URL and run OCR\n        const dataURL = canvas.toDataURL('image/png');\n        \n        const { data: { text, confidence } } = await worker.recognize(dataURL, {\n          rectangle: { top: 0, left: 0, width: canvas.width, height: canvas.height }\n        });\n        \n        const cleanText = text.trim() || 'No text detected';\n        const confidenceText = confidence ? ` (Confidence: ${confidence.toFixed(1)}%)` : '';\n        setDetectedText(cleanText + confidenceText);\n        console.log('OCR Result:', cleanText, 'Confidence:', confidence);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n\n    } catch (error) {\n      console.error('Text detection failed:', error);\n      setDetectedText('Detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Enhanced OCR for messy handwriting\n  const detectTextEnhanced = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n\n    setIsDetecting(true);\n    setDetectedText('Initializing enhanced handwriting detection...');\n\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      \n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n\n      if (worker) {\n        // Try multiple preprocessing approaches\n        const results = [];\n        \n        // Method 1: High contrast black/white\n        setDetectedText('Method 1: High contrast processing...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        preprocessImage(canvas, ctx);\n        const dataURL1 = canvas.toDataURL('image/png');\n        \n        await worker.setParameters({\n          tessedit_pageseg_mode: '6', // Uniform block of text\n          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?()[]{}=-+*/\\'\"@#$%^&_|\\\\~ \\n'\n        });\n        \n        const result1 = await worker.recognize(dataURL1);\n        results.push({ method: 'High Contrast', text: result1.data.text, confidence: result1.data.confidence });\n\n        // Method 2: Single character mode for individual letters\n        setDetectedText('Method 2: Character-by-character analysis...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        \n        await worker.setParameters({\n          tessedit_pageseg_mode: '8', // Single character\n          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n        });\n        \n        const dataURL2 = canvas.toDataURL('image/png');\n        const result2 = await worker.recognize(dataURL2);\n        results.push({ method: 'Character Mode', text: result2.data.text, confidence: result2.data.confidence });\n\n        // Method 3: Raw text detection with minimal processing\n        setDetectedText('Method 3: Raw text detection...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        \n        await worker.setParameters({\n          tessedit_pageseg_mode: '13', // Raw line. Treat the image as a single text line\n          preserve_interword_spaces: '1'\n        });\n        \n        const dataURL3 = canvas.toDataURL('image/png');\n        const result3 = await worker.recognize(dataURL3);\n        results.push({ method: 'Raw Line', text: result3.data.text, confidence: result3.data.confidence });\n\n        // Find best result\n        const bestResult = results.reduce((best, current) => \n          current.confidence > best.confidence ? current : best\n        );\n\n        // Display all results\n        let displayText = `üèÜ BEST (${bestResult.method}): ${bestResult.text}\\n\\n`;\n        results.forEach(result => {\n          displayText += `${result.method} (${result.confidence?.toFixed(1)}%): ${result.text}\\n\\n`;\n        });\n\n        setDetectedText(displayText);\n        console.log('Enhanced OCR Results:', results);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n\n    } catch (error) {\n      console.error('Enhanced text detection failed:', error);\n      setDetectedText('Enhanced detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // ChatGPT integration for better text interpretation\n  const enhanceWithChatGPT = async (imageDataURL, ocrText) => {\n    if (!apiKey) {\n      setChatGPTResult('Please enter your OpenAI API key first');\n      return;\n    }\n\n    setIsUsingChatGPT(true);\n    setChatGPTResult('Sending to ChatGPT for analysis...');\n\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-4o\",\n          messages: [\n            {\n              role: \"user\",\n              content: [\n                {\n                  type: \"text\",\n                  text: `I have handwritten text on a whiteboard that OCR is struggling to read accurately. The OCR detected this text: \"${ocrText}\". Please look at the image and provide a clean, corrected version of what is actually written. Focus on:\n1. Correcting OCR errors and misread characters\n2. Fixing spacing and formatting\n3. Interpreting unclear handwriting\n4. Organizing the text logically\n5. Only return the corrected text content, nothing else.`\n                },\n                {\n                  type: \"image_url\",\n                  image_url: {\n                    url: imageDataURL\n                  }\n                }\n              ]\n            }\n          ],\n          max_tokens: 500\n        })\n      });\n\n      if (!response.ok) {\n        let errorMessage = `API error: ${response.status} ${response.statusText}`;\n        \n        if (response.status === 429) {\n          errorMessage = `‚ö†Ô∏è Rate Limit Exceeded (429)\\n\\nYou've made too many requests to the OpenAI API. This usually means:\\n‚Ä¢ You've exceeded your API rate limit\\n‚Ä¢ Your API key has insufficient credits\\n‚Ä¢ Too many requests in a short time\\n\\nPlease wait a few minutes and try again, or check your OpenAI account for usage limits.`;\n        } else if (response.status === 401) {\n          errorMessage = `üîë Authentication Error (401)\\n\\nYour API key appears to be invalid or expired. Please check:\\n‚Ä¢ The API key is correct\\n‚Ä¢ The key has proper permissions\\n‚Ä¢ Your OpenAI account is in good standing`;\n        } else if (response.status === 400) {\n          errorMessage = `‚ö†Ô∏è Bad Request (400)\\n\\nThere was an issue with the request format. This might be due to:\\n‚Ä¢ Image format not supported\\n‚Ä¢ Request too large\\n‚Ä¢ Invalid parameters`;\n        }\n        \n        throw new Error(errorMessage);\n      }\n\n      const data = await response.json();\n      const correctedText = data.choices[0]?.message?.content || 'No response from ChatGPT';\n      setChatGPTResult(correctedText);\n      \n      // Update the main detected text with ChatGPT result\n      setDetectedText(`ü§ñ ChatGPT Enhanced:\\n${correctedText}\\n\\nüìù Original OCR:\\n${ocrText}`);\n      \n    } catch (error) {\n      console.error('ChatGPT API error:', error);\n      setChatGPTResult(`Error: ${error.message}`);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Simple Agentuity Agent Analysis with user-friendly feedback\n  const analyzeSceneWithAI = async (imageDataURL) => {\n    const agentuityApiKey = process.env.REACT_APP_AGENTUITY_API_KEY;\n    const webhookUrl = process.env.REACT_APP_AGENTUITY_WEBHOOK_URL;\n    \n    if (!agentuityApiKey || !webhookUrl) {\n      setChatGPTResult('Agentuity configuration missing. Please check environment variables.');\n      setAiAnalysisResult('Agentuity configuration missing. Please check environment variables.');\n      setShowAnalysisPanel(true);\n      return;\n    }\n\n    // Rate limiting check\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall;\n    const minDelay = 3000; // 3 seconds between calls\n    \n    if (timeSinceLastCall < minDelay) {\n      const waitTime = Math.ceil((minDelay - timeSinceLastCall) / 1000);\n      const waitMessage = `‚è±Ô∏è Please wait ${waitTime} seconds before making another request.`;\n      setAiAnalysisResult(waitMessage);\n      setShowAnalysisPanel(true);\n      return;\n    }\n\n    setLastApiCall(now);\n    setIsUsingChatGPT(true);\n    setShowAnalysisPanel(true);\n\n    try {\n      // Show immediate feedback\n      const loadingMessage = `üöÄ **AI Analysis Starting!**\n\nüì∏ **Image Received**: Processing your image now...\nü§ñ **Agent Status**: Connecting to your Agentuity AI agent...\n‚ö° **Processing**: This typically takes 15-45 seconds\n\n**What I'm analyzing:**\n‚Ä¢ All visible text (handwritten, printed, signs)\n‚Ä¢ People and their activities\n‚Ä¢ Objects and equipment in the scene\n‚Ä¢ Educational content and concepts\n‚Ä¢ Overall scene description and context\n\nPlease wait while I provide a comprehensive analysis...`;\n\n      setChatGPTResult(loadingMessage);\n      setAiAnalysisResult(loadingMessage);\n      \n      // Convert base64 image to blob for multipart upload\n      const response = await fetch(imageDataURL);\n      const blob = await response.blob();\n      \n      // Create FormData for the webhook\n      const formData = new FormData();\n      formData.append('image', blob, 'analysis.jpg');\n      formData.append('message', `Please provide a comprehensive analysis of this image. I want to understand everything that's happening in this scene. Please include:\n\nüìã **SCENE OVERVIEW:**\n- What type of environment is this? (classroom, office, meeting room, etc.)\n- What is the main focus or subject?\n\nüîç **DETAILED OBSERVATIONS:**\n- All text visible (handwritten, printed, on boards, signs, etc.)\n- People present (count, what they're doing, clothing, gestures)\n- Objects and equipment (whiteboards, computers, furniture, tools)\n- Colors, lighting, and atmosphere\n\nüìù **TEXT CONTENT:**\n- Transcribe ALL visible text accurately\n- Note the context of each text element\n- Identify any diagrams, equations, or drawings\n\nüéØ **EDUCATIONAL CONTENT:**\n- If this appears to be educational, what subject/topic?\n- Key concepts being taught or discussed\n- Any visual aids or teaching materials\n\nüìä **SUMMARY:**\n- Main purpose/activity in this scene\n- Most important information conveyed\n- Overall assessment of what's happening\n\nBe thorough and detailed - I want to understand everything about this scene!`);\n\n      // Send request and get session ID\n      const webhookResponse = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${agentuityApiKey}`,\n          // Don't set Content-Type, let browser set it for FormData\n        },\n        body: formData\n      });\n\n      if (!webhookResponse.ok) {\n        let errorMessage = `Agentuity Agent Error: ${webhookResponse.status} ${webhookResponse.statusText}`;\n        \n        if (webhookResponse.status === 429) {\n          errorMessage = `‚ö†Ô∏è Rate Limit Exceeded\\n\\nYour Agentuity agent is temporarily overloaded. Please wait a moment and try again.`;\n        } else if (webhookResponse.status === 401) {\n          errorMessage = `üîë Authentication Error\\n\\nYour Agentuity API key appears to be invalid. Please check your configuration.`;\n        } else if (webhookResponse.status === 400) {\n          errorMessage = `‚ö†Ô∏è Bad Request\\n\\nThere was an issue with the request. Please try again.`;\n        }\n        \n        throw new Error(errorMessage);\n      }\n\n      const data = await webhookResponse.json();\n      \n      if (data.success && data.data && data.data.sessionId) {\n        const sessionId = data.data.sessionId;\n        const sessionUrl = `https://app.agentuity.com/projects/proj_e01e2043faa726c5b1493ec266576770/sessions/${sessionId}`;\n        \n        // Provide helpful message with session link\n        const sessionMessage = `‚úÖ **Analysis Request Submitted Successfully!**\n\nüéØ **Session ID**: ${sessionId}\nÔøΩ **Track Progress**: [View Live Results](${sessionUrl})\n\n**What happens next:**\n1. Your Agentuity agent is now processing the image\n2. Analysis typically completes in 15-45 seconds\n3. You can view real-time progress at the link above\n4. Results will include comprehensive scene analysis\n\n**Alternative Method:**\nIf you prefer, you can also:\n‚Ä¢ Visit the Agentuity dashboard\n‚Ä¢ Navigate to your project sessions\n‚Ä¢ View the detailed analysis when complete\n\nYour agent is working on providing detailed insights about everything in your image!`;\n\n        setChatGPTResult(sessionMessage);\n        setAiAnalysisResult(sessionMessage);\n        \n        // Update the main detected text\n        setDetectedText(`ü§ñ Analysis submitted to Agentuity Agent! Session: ${sessionId}`);\n        \n        // Optional: Try to poll a few times with very generous timeouts\n        setTimeout(() => {\n          attemptResultRetrieval(sessionId, agentuityApiKey, sessionUrl);\n        }, 10000); // Wait 10 seconds before first attempt\n        \n      } else {\n        throw new Error('Unexpected response format from Agentuity');\n      }\n      \n    } catch (error) {\n      console.error('Agentuity Agent error:', error);\n      const errorMsg = `‚ùå **Error**: ${error.message}\n\n**Troubleshooting Tips:**\n‚Ä¢ Check your internet connection\n‚Ä¢ Verify your Agentuity agent is deployed\n‚Ä¢ Try again in a few moments\n‚Ä¢ Contact support if the issue persists`;\n      setChatGPTResult(errorMsg);\n      setAiAnalysisResult(errorMsg);\n      setShowAnalysisPanel(true);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Optional attempt to retrieve results (non-blocking)\n  const attemptResultRetrieval = async (sessionId, apiKey, sessionUrl, maxAttempts = 3) => {\n    // This is a best-effort attempt - if it fails, user can still check the session URL\n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n      try {\n        await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds between attempts\n        \n        // Try to get the result\n        const response = await fetch(`https://agentuity.ai/api/sessions/${sessionId}`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        if (response.ok) {\n          const sessionData = await response.json();\n          \n          if (sessionData.status === 'completed' && sessionData.response) {\n            // Success! Update with the actual result\n            const analysis = `üéâ **Analysis Complete!**\n\n${sessionData.response}\n\n---\n*Analysis retrieved automatically from session ${sessionId}*`;\n            \n            setChatGPTResult(analysis);\n            setAiAnalysisResult(analysis);\n            setDetectedText(`ü§ñ AI Analysis Complete! Full results available in analysis panel.`);\n            return; // Success, stop trying\n          }\n        }\n      } catch (error) {\n        console.log(`Attempt ${attempt} to retrieve results failed:`, error);\n      }\n    }\n    \n    // If we get here, automatic retrieval failed, but that's okay\n    console.log('Automatic result retrieval failed, but user can check session URL');\n  };\n\n  // AI Agent for Q&A about analyzed content\n  // AI Agent Q&A using Agentuity Agent\n  const askQuestionAboutContent = async () => {\n    const agentuityApiKey = process.env.REACT_APP_AGENTUITY_API_KEY;\n    const webhookUrl = process.env.REACT_APP_AGENTUITY_WEBHOOK_URL;\n    \n    if (!agentuityApiKey || !webhookUrl) {\n      alert('Agentuity configuration missing. Please check environment variables.');\n      return;\n    }\n    \n    if (!userQuestion.trim()) {\n      alert('Please enter a question');\n      return;\n    }\n    \n    if (!aiAnalysisResult) {\n      alert('Please analyze some content first before asking questions');\n      return;\n    }\n\n    // Rate limiting check\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall;\n    const minDelay = 3000; // 3 seconds for Q&A with Agentuity\n    \n    if (timeSinceLastCall < minDelay) {\n      const waitTime = Math.ceil((minDelay - timeSinceLastCall) / 1000);\n      alert(`Please wait ${waitTime} seconds before asking another question.`);\n      return;\n    }\n\n    setLastApiCall(now);\n    setIsUsingChatGPT(true);\n\n    try {\n      // Create the context-aware message for Agentuity\n      const contextualQuestion = `Based on my previous image analysis, please answer this question:\n\nPREVIOUS ANALYSIS CONTEXT:\n${aiAnalysisResult}\n\nCONVERSATION HISTORY:\n${conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nCURRENT QUESTION: ${userQuestion}\n\nPlease provide a helpful answer based on the analysis and conversation context above.`;\n\n      const response = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${agentuityApiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: contextualQuestion,\n          type: 'question'\n        })\n      });\n\n      if (!response.ok) {\n        let errorMessage = `Agentuity Agent Error: ${response.status} ${response.statusText}`;\n        \n        if (response.status === 429) {\n          errorMessage = `‚ö†Ô∏è Rate Limit Exceeded\\n\\nToo many questions too quickly. Please wait a moment before asking another question.`;\n        } else if (response.status === 401) {\n          errorMessage = `üîë Authentication Error\\n\\nYour Agentuity API key appears to be invalid.`;\n        }\n        \n        throw new Error(errorMessage);\n      }\n\n      const data = await response.json();\n      \n      // Simplified approach for Q&A - provide session info to user\n      if (data.success && data.data && data.data.sessionId) {\n        const sessionId = data.data.sessionId;\n        const sessionUrl = `https://app.agentuity.com/projects/proj_e01e2043faa726c5b1493ec266576770/sessions/${sessionId}`;\n        \n        // Add to conversation history with session info\n        const answer = `‚úÖ **Question submitted to AI agent!**\n\n**Your Question**: ${userQuestion}\n\n**Session ID**: ${sessionId}\n**Track Answer**: [View Response](${sessionUrl})\n\nYour Agentuity agent is processing your question based on the previous image analysis. You can view the response in real-time by clicking the link above or visiting your Agentuity dashboard.`;\n\n        const newConversation = [\n          ...conversationHistory,\n          { role: \"user\", content: userQuestion },\n          { role: \"assistant\", content: answer }\n        ];\n        \n        // Keep only last 6 messages (3 Q&A pairs) to manage context length\n        const trimmedHistory = newConversation.slice(-6);\n        setConversationHistory(trimmedHistory);\n        \n        // Clear the input\n        setUserQuestion('');\n      } else {\n        // Fallback for direct response\n        const answer = data.response || data.message || data.content || 'Response received from agent';\n        \n        // Add to conversation history\n        const newConversation = [\n          ...conversationHistory,\n          { role: \"user\", content: userQuestion },\n          { role: \"assistant\", content: answer }\n        ];\n        \n        // Keep only last 6 messages (3 Q&A pairs) to manage context length\n        const trimmedHistory = newConversation.slice(-6);\n        setConversationHistory(trimmedHistory);\n        \n        // Clear the input\n        setUserQuestion('');\n      }\n      \n    } catch (error) {\n      console.error('Agentuity Agent error:', error);\n      alert(`Error: ${error.message}`);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Full Scene Analysis - capture frame and analyze everything with AI Vision\n  const analyzeCurrentScene = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n\n    setIsDetecting(true);\n    setDetectedText('üì∏ Capturing frame for AI analysis...');\n\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      \n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw current video frame without any preprocessing for AI Vision\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      \n      // Convert to data URL for AI Vision API\n      const dataURL = canvas.toDataURL('image/jpeg', 0.8); // Use JPEG for smaller size\n      \n      // Run AI Vision analysis\n      await analyzeSceneWithAI(dataURL);\n      \n    } catch (error) {\n      console.error('Scene analysis failed:', error);\n      setDetectedText('Scene analysis failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Enhanced OCR with ChatGPT integration\n  const detectTextWithChatGPT = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n\n    setIsDetecting(true);\n    setDetectedText('Running OCR + ChatGPT analysis...');\n\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      \n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      setDetectedText('Preprocessing image...');\n\n      // Apply image preprocessing for better OCR\n      preprocessImage(canvas, ctx);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n\n      if (worker) {\n        setDetectedText('Running OCR...');\n        \n        // Convert processed canvas to data URL\n        const dataURL = canvas.toDataURL('image/png');\n        \n        const { data: { text, confidence } } = await worker.recognize(dataURL);\n        const ocrText = text.trim() || 'No text detected';\n        \n        setDetectedText(`OCR Result: ${ocrText}\\n\\nSending to ChatGPT for enhancement...`);\n        \n        // Send to ChatGPT for enhancement\n        await enhanceWithChatGPT(dataURL, ocrText);\n        \n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n\n    } catch (error) {\n      console.error('OCR + ChatGPT detection failed:', error);\n      setDetectedText('Detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Auto-detect text and take screenshot\n  const detectAndCapture = async () => {\n    await detectText();\n    setTimeout(() => {\n      takeScreenshot();\n    }, 500); // Small delay to ensure text is updated\n  };\n\n  // Clear all screenshots\n  const clearScreenshots = () => {\n    screenshots.forEach(screenshot => {\n      if (screenshot.url) {\n        URL.revokeObjectURL(screenshot.url);\n      }\n    });\n    setScreenshots([]);\n  };\n\n  // Backend API Integration Functions\n  const API_BASE_URL = 'http://localhost:3000';\n\n  // Upload video to backend\n  const uploadVideoToBackend = async (videoFile) => {\n    const formData = new FormData();\n    formData.append('video', videoFile);\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/upload`, {\n        method: 'POST',\n        body: formData\n      });\n\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend upload error:', error);\n      throw error;\n    }\n  };\n\n  // Process video with backend\n  const processVideoWithBackend = async (videoPath, title = 'Untitled Lecture') => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ingest`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          videoPath,\n          title\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Processing failed: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend processing error:', error);\n      throw error;\n    }\n  };\n\n  // Query processed lecture\n  const queryLecture = async (lectureId, query) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          lectureId,\n          query\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Query failed: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend query error:', error);\n      throw error;\n    }\n  };\n\n  // Handle querying the backend\n  const handleBackendQuery = async () => {\n    if (!lectureId || !queryText.trim()) {\n      setQueryResult('Please ensure video is processed and enter a query');\n      return;\n    }\n\n    setIsQuerying(true);\n    setQueryResult('Analyzing lecture content...');\n\n    try {\n      const result = await queryLecture(lectureId, queryText.trim());\n      console.log('Query result:', result);\n      \n      let formattedResult = `Answer: ${result.answer}\\n\\n`;\n      \n      if (result.links && result.links.length > 0) {\n        formattedResult += 'Relevant timestamps:\\n';\n        result.links.forEach(link => {\n          formattedResult += `‚Ä¢ ${link.timecode}: ${link.text}\\n`;\n        });\n        formattedResult += '\\n';\n      }\n      \n      if (result.flashcards && result.flashcards.length > 0) {\n        formattedResult += 'Generated flashcard:\\n';\n        result.flashcards.forEach(card => {\n          formattedResult += `Q: ${card.question}\\nA: ${card.answer}\\n`;\n        });\n      }\n      \n      setQueryResult(formattedResult);\n    } catch (error) {\n      console.error('Query failed:', error);\n      setQueryResult(`Query failed: ${error.message}`);\n    } finally {\n      setIsQuerying(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>ÔøΩ AI Scene Analyzer</h1>\n        <p>Upload videos and analyze everything with AI Vision + OCR text detection</p>\n      </header>\n\n      <main className=\"App-main\">\n        {/* File Upload */}\n        <div className=\"upload-section\">\n          <label htmlFor=\"video-upload\" className=\"upload-label\">\n            Choose Video File\n          </label>\n          <input\n            id=\"video-upload\"\n            type=\"file\"\n            accept=\"video/*\"\n            onChange={handleFileUpload}\n            className=\"file-input\"\n          />\n          {!videoFile && (\n            <div className=\"upload-prompt\">\n              <p>üìπ Select a video file to get started</p>\n              <p><small>Supported formats: MP4, WebM, AVI</small></p>\n            </div>\n          )}\n        </div>\n\n        {/* Video Player */}\n        {videoURL && (\n          <div className=\"video-section\">\n            {/* API Key Input */}\n            <div className=\"api-config\">\n              <h3>ü§ñ AI-Powered Analysis</h3>\n              <div className=\"api-input-group\">\n                <input\n                  type=\"password\"\n                  placeholder=\"Enter your OpenAI API key...\"\n                  value={apiKey}\n                  onChange={(e) => setApiKey(e.target.value)}\n                  className=\"api-input\"\n                />\n                <small className=\"api-help\">\n                  Get your API key from <a href=\"https://platform.openai.com/api-keys\" target=\"_blank\" rel=\"noopener noreferrer\">OpenAI Platform</a>\n                  <br />\n                  <strong>Features:</strong> OCR Enhancement + Full Scene Analysis with AI Vision\n                </small>\n              </div>\n            </div>\n\n            {/* Backend Integration Toggle */}\n            <div className=\"backend-config\">\n              <h3>üöÄ Backend Analysis</h3>\n              <div className=\"backend-toggle\">\n                <label className=\"toggle-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={isUsingBackend}\n                    onChange={(e) => setIsUsingBackend(e.target.checked)}\n                  />\n                  Use backend API for full lecture analysis\n                </label>\n                <small className=\"backend-help\">\n                  Enable this to upload videos to the backend for comprehensive analysis including board change detection and Q&A capabilities\n                </small>\n              </div>\n              \n              {/* Upload/Processing Status */}\n              {uploadProgress && (\n                <div className=\"status-message upload-status\">\n                  {uploadProgress}\n                </div>\n              )}\n              \n              {processingStatus && (\n                <div className=\"status-message processing-status\">\n                  {processingStatus}\n                </div>\n              )}\n              \n              {/* Query Interface */}\n              {lectureId && (\n                <div className=\"query-section\">\n                  <h4>üîç Ask Questions About This Lecture</h4>\n                  <div className=\"query-input-group\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Ask a question about the lecture content...\"\n                      value={queryText}\n                      onChange={(e) => setQueryText(e.target.value)}\n                      className=\"query-input\"\n                      onKeyPress={(e) => e.key === 'Enter' && handleBackendQuery()}\n                    />\n                    <button\n                      onClick={handleBackendQuery}\n                      disabled={isQuerying || !queryText.trim()}\n                      className=\"query-button\"\n                    >\n                      {isQuerying ? 'Analyzing...' : 'Ask Question'}\n                    </button>\n                  </div>\n                  \n                  {queryResult && (\n                    <div className=\"query-result\">\n                      <h5>üìã Analysis Result:</h5>\n                      <pre className=\"result-text\">{queryResult}</pre>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"video-container\">\n              <video\n                ref={videoRef}\n                src={videoURL}\n                controls\n                className=\"video-player\"\n              >\n                Your browser does not support the video tag.\n              </video>\n              <canvas ref={canvasRef} style={{ display: 'none' }} />\n            </div>\n\n            {/* Controls */}\n            <div className=\"controls\">\n              <button onClick={takeScreenshot} className=\"btn primary\">\n                üì∏ Screenshot\n              </button>\n              <button \n                onClick={analyzeCurrentScene} \n                disabled={isDetecting || !apiKey}\n                className=\"btn ai-vision primary-action\"\n              >\n                {isDetecting ? 'üîÑ Analyzing with AI...' : 'üîç Analyze Full Scene with AI'}\n              </button>\n              <button \n                onClick={analyzeEntireVideo} \n                disabled={isAnalyzingVideo || !apiKey || !videoRef.current}\n                className=\"btn ai-video comprehensive-analysis\"\n              >\n                {isAnalyzingVideo ? 'üé¨ Analyzing Video...' : 'üéØ Comprehensive Video Analysis'}\n              </button>\n              <button \n                onClick={initializeOCR} \n                disabled={isDetecting}\n                className=\"btn info\"\n              >\n                üîß Initialize OCR\n              </button>\n              <button \n                onClick={detectAndCapture} \n                disabled={isDetecting}\n                className=\"btn highlight\"\n              >\n                {isDetecting ? '‚ö° Processing...' : '‚ö° Detect & Capture'}\n              </button>\n              {screenshots.length > 0 && (\n                <button onClick={clearScreenshots} className=\"btn danger\">\n                  üóëÔ∏è Clear All ({screenshots.length})\n                </button>\n              )}\n              <button \n                onClick={() => {\n                  alert(`API Status:\\n- API Key: ${apiKey ? 'Present' : 'Missing'}\\n- Connection: Testing...\\n\\nCheck console for details.`);\n                  console.log('API Key Check:', { \n                    hasKey: !!apiKey, \n                    keyLength: apiKey?.length,\n                    keyStart: apiKey?.substring(0, 15) + '...',\n                    timestamp: new Date().toISOString()\n                  });\n                }}\n                className=\"btn info\"\n                title=\"Test API connection and debug\"\n              >\n                üîß Test API\n              </button>\n            </div>\n\n            {/* Before/After Capture Section */}\n            <div className=\"capture-section\">\n              <h3>üìã Before/After Whiteboard Capture</h3>\n              <div className=\"capture-status\">\n                {captureMode === 'waiting' && (\n                  <p>üéØ Ready to capture whiteboard states. Start by capturing the BEFORE state.</p>\n                )}\n                {captureMode === 'before-captured' && (\n                  <p>‚úÖ Before state captured! Make your changes to the whiteboard, then capture the AFTER state.</p>\n                )}\n                {captureMode === 'ready-for-after' && (\n                  <p>üéä Both states captured! Scroll down to view the comparison analysis.</p>\n                )}\n              </div>\n              \n              <div className=\"capture-buttons\">\n                <button \n                  onClick={captureBeforeState}\n                  disabled={isDetecting}\n                  className=\"btn secondary\"\n                  title=\"Capture the current state before making changes\"\n                >\n                  üì∏ Capture BEFORE\n                </button>\n                <button \n                  onClick={captureAfterState}\n                  disabled={isDetecting || !beforeCapture}\n                  className=\"btn secondary\"\n                  title=\"Capture the state after making changes\"\n                >\n                  üì∏ Capture AFTER\n                </button>\n                <button \n                  onClick={resetCaptures}\n                  disabled={!beforeCapture && !afterCapture}\n                  className=\"btn danger\"\n                  title=\"Reset and start over with new captures\"\n                >\n                  üîÑ Reset Captures\n                </button>\n              </div>\n            </div>\n\n            {/* Detected Text Display */}\n            <div className=\"text-detection\">\n              <h3>üîç Detected Text:</h3>\n              <div className=\"detected-text-box\">\n                {detectedText || 'Click \"Detect Text\" to analyze the current frame'}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Screenshots Gallery */}\n        {/* AI Vision Analysis Panel */}\n        {showAnalysisPanel && aiAnalysisResult && (\n          <div className=\"ai-analysis-panel\">\n            <div className=\"panel-header\">\n              <h3>üõ∏ AI Vision Analysis Results</h3>\n              <button \n                onClick={() => setShowAnalysisPanel(false)}\n                className=\"close-panel-btn\"\n              >\n                ‚úï\n              </button>\n            </div>\n            <div className=\"analysis-content\">\n              <div className=\"analysis-section\">\n                <h4>üìä Scene Analysis</h4>\n                <pre className=\"analysis-text\">{aiAnalysisResult}</pre>\n              </div>\n              \n              {/* AI Agent Q&A Interface */}\n              <div className=\"qa-section\">\n                <h4>ü§ñ Ask Questions About This Content</h4>\n                <div className=\"qa-input-group\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Ask a question about what you see in the image...\"\n                    value={userQuestion}\n                    onChange={(e) => setUserQuestion(e.target.value)}\n                    className=\"qa-input\"\n                    onKeyPress={(e) => e.key === 'Enter' && askQuestionAboutContent()}\n                    disabled={isUsingChatGPT}\n                  />\n                  <button\n                    onClick={askQuestionAboutContent}\n                    disabled={isUsingChatGPT || !userQuestion.trim()}\n                    className=\"qa-button\"\n                  >\n                    {isUsingChatGPT ? 'ü§î Thinking...' : 'üí¨ Ask'}\n                  </button>\n                </div>\n                \n                {/* Conversation History */}\n                {conversationHistory.length > 0 && (\n                  <div className=\"conversation-history\">\n                    <h5>üí≠ Conversation</h5>\n                    <div className=\"conversation-messages\">\n                      {conversationHistory.map((message, index) => (\n                        <div \n                          key={index} \n                          className={`message ${message.role === 'user' ? 'user-message' : 'ai-message'}`}\n                        >\n                          <div className=\"message-role\">\n                            {message.role === 'user' ? 'üë§ You:' : 'ü§ñ AI:'}\n                          </div>\n                          <div className=\"message-content\">{message.content}</div>\n                        </div>\n                      ))}\n                    </div>\n                    <button \n                      onClick={() => setConversationHistory([])}\n                      className=\"clear-conversation-btn\"\n                    >\n                      üóëÔ∏è Clear Conversation\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Comprehensive Video Analysis Panel */}\n        {showVideoAnalysis && videoAnalysisResult && (\n          <div className=\"video-analysis-panel\">\n            <div className=\"panel-header\">\n              <h3>üé¨ Comprehensive Video Analysis</h3>\n              <button \n                onClick={() => setShowVideoAnalysis(false)}\n                className=\"close-panel-btn\"\n              >\n                ‚úï\n              </button>\n            </div>\n            <div className=\"analysis-content\">\n              <div className=\"analysis-section\">\n                <h4>üìä Complete Video Analysis</h4>\n                <pre className=\"video-analysis-text\">{videoAnalysisResult}</pre>\n              </div>\n              \n              {/* Sampled Frames Display */}\n              {videoFramesSampled.length > 0 && (\n                <div className=\"sampled-frames-section\">\n                  <h4>üì∏ Analyzed Video Frames ({videoFramesSampled.length} samples)</h4>\n                  <div className=\"frames-grid\">\n                    {videoFramesSampled.map((frame, index) => (\n                      <div key={index} className=\"frame-sample\">\n                        <img src={frame.image} alt={`Frame ${frame.frameNumber}`} />\n                        <div className=\"frame-info\">\n                          <span>Frame {frame.frameNumber}</span>\n                          <span>{frame.timestamp.toFixed(1)}s</span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Screenshots Gallery */}\n        {screenshots.length > 0 && (\n          <div className=\"gallery-section\">\n            <h3>üì± Screenshots ({screenshots.length})</h3>\n            <div className=\"gallery\">\n              {screenshots.map((screenshot) => (\n                <div key={screenshot.id} className=\"screenshot-item\">\n                  <img \n                    src={screenshot.url} \n                    alt={`Screenshot at ${screenshot.timestamp.toFixed(1)}s`}\n                    className=\"screenshot-image\"\n                  />\n                  <div className=\"screenshot-info\">\n                    <p><strong>‚è±Ô∏è Time:</strong> {screenshot.timestamp.toFixed(1)}s</p>\n                    <p><strong>üìù Text:</strong> {screenshot.detectedText}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}