{"ast":null,"code":"var _jsxFileName = \"/Users/kyleprice/south_florida_hackstreet/whiteboard-detector/src/App.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [videoFile, setVideoFile] = useState(null);\n  const [videoURL, setVideoURL] = useState(null);\n  const [screenshots, setScreenshots] = useState([]);\n  const [isDetecting, setIsDetecting] = useState(false);\n  const [detectedText, setDetectedText] = useState('');\n  const [ocrWorker, setOcrWorker] = useState(null);\n  const [apiKey, setApiKey] = useState(process.env.REACT_APP_OPENAI_API_KEY || '');\n  const [isUsingChatGPT, setIsUsingChatGPT] = useState(false);\n  const [chatGPTResult, setChatGPTResult] = useState('');\n\n  // AI Vision Analysis Results\n  const [aiAnalysisResult, setAiAnalysisResult] = useState('');\n  const [showAnalysisPanel, setShowAnalysisPanel] = useState(false);\n\n  // Rate limiting and conversation state\n  const [lastApiCall, setLastApiCall] = useState(0);\n  const [rateLimitCooldown, setRateLimitCooldown] = useState(0);\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const [userQuestion, setUserQuestion] = useState('');\n  const [apiKeyStatus, setApiKeyStatus] = useState('unchecked'); // unchecked, valid, invalid\n\n  // Test API key validity\n  const testApiKey = async () => {\n    if (!apiKey) {\n      setApiKeyStatus('invalid');\n      return;\n    }\n    try {\n      const response = await fetch('https://api.openai.com/v1/models', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`\n        }\n      });\n      if (response.ok) {\n        setApiKeyStatus('valid');\n        console.log('✅ API key is valid');\n      } else {\n        setApiKeyStatus('invalid');\n        console.log('❌ API key is invalid');\n      }\n    } catch (error) {\n      setApiKeyStatus('invalid');\n      console.log('❌ API key test failed:', error);\n    }\n  };\n\n  // Backend integration state\n  const [isUsingBackend, setIsUsingBackend] = useState(false);\n  const [lectureId, setLectureId] = useState('');\n  const [uploadProgress, setUploadProgress] = useState('');\n  const [processingStatus, setProcessingStatus] = useState('');\n  const [queryText, setQueryText] = useState('');\n  const [queryResult, setQueryResult] = useState('');\n  const [isQuerying, setIsQuerying] = useState(false);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Initialize OCR worker with handwriting optimizations\n  const initializeOCR = async () => {\n    if (ocrWorker) return ocrWorker;\n    try {\n      console.log('Starting OCR initialization...');\n      const worker = await Tesseract.createWorker('eng', 1, {\n        logger: m => console.log('OCR Logger:', m)\n      });\n\n      // Configure for better handwriting recognition\n      await worker.setParameters({\n        tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?()[]{}=-+*/\\'\"@#$%^&_|\\\\~ ',\n        tessedit_pageseg_mode: '6',\n        // Uniform block of text\n        preserve_interword_spaces: '1',\n        tessedit_do_invert: '0'\n      });\n      console.log('OCR worker created successfully');\n      setOcrWorker(worker);\n      return worker;\n    } catch (error) {\n      console.error('OCR initialization failed:', error);\n      setDetectedText('OCR initialization failed: ' + error.message);\n      return null;\n    }\n  };\n\n  // Handle video file upload\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (file && file.type.startsWith('video/')) {\n      setVideoFile(file);\n      const url = URL.createObjectURL(file);\n      setVideoURL(url);\n      setScreenshots([]);\n      setDetectedText('');\n      setOcrWorker(null); // Reset worker for new video\n      setLectureId('');\n      setProcessingStatus('');\n      setQueryResult('');\n\n      // If using backend, upload and process the video\n      if (isUsingBackend) {\n        try {\n          setUploadProgress('Uploading video to backend...');\n          const uploadResult = await uploadVideoToBackend(file);\n          console.log('Upload result:', uploadResult);\n          setUploadProgress('Upload complete! Processing video...');\n          const processResult = await processVideoWithBackend(uploadResult.video.path, file.name);\n          console.log('Process result:', processResult);\n          setLectureId(processResult.lectureId);\n          setProcessingStatus(`Processing started. Lecture ID: ${processResult.lectureId}`);\n          setUploadProgress('');\n        } catch (error) {\n          console.error('Backend upload/processing failed:', error);\n          setUploadProgress(`Error: ${error.message}`);\n        }\n      } else {\n        // Initialize OCR for local processing\n        setTimeout(() => {\n          initializeOCR();\n        }, 1000);\n      }\n    } else {\n      alert('Please select a valid video file');\n    }\n  };\n\n  // Take a screenshot of current video frame\n  const takeScreenshot = async () => {\n    if (!videoRef.current || !canvasRef.current) return;\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Draw video frame to canvas\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Convert to blob and create screenshot object\n    canvas.toBlob(blob => {\n      const screenshot = {\n        id: Date.now(),\n        blob: blob,\n        url: URL.createObjectURL(blob),\n        timestamp: video.currentTime,\n        detectedText: detectedText || 'No text detected'\n      };\n      setScreenshots(prev => [...prev, screenshot]);\n    }, 'image/png');\n  };\n\n  // Image preprocessing for better OCR\n  const preprocessImage = (canvas, ctx) => {\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n\n    // Convert to grayscale and enhance contrast\n    for (let i = 0; i < data.length; i += 4) {\n      // Convert to grayscale\n      const gray = Math.round(0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]);\n\n      // Enhance contrast - make text darker and background lighter\n      let enhanced;\n      if (gray < 128) {\n        // Dark pixels (likely text) - make darker\n        enhanced = Math.max(0, gray - 30);\n      } else {\n        // Light pixels (likely background) - make lighter\n        enhanced = Math.min(255, gray + 30);\n      }\n\n      // Apply threshold for better text separation\n      const threshold = enhanced < 100 ? 0 : 255;\n      data[i] = threshold; // Red\n      data[i + 1] = threshold; // Green\n      data[i + 2] = threshold; // Blue\n      // Alpha channel (data[i + 3]) remains unchanged\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n  };\n\n  // OCR text detection with preprocessing\n  const detectText = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n    setIsDetecting(true);\n    setDetectedText('Initializing OCR...');\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      setDetectedText('Preprocessing image for handwriting...');\n\n      // Apply image preprocessing for better OCR\n      preprocessImage(canvas, ctx);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n      if (worker) {\n        setDetectedText('Running enhanced OCR...');\n\n        // Convert processed canvas to data URL and run OCR\n        const dataURL = canvas.toDataURL('image/png');\n        const {\n          data: {\n            text,\n            confidence\n          }\n        } = await worker.recognize(dataURL, {\n          rectangle: {\n            top: 0,\n            left: 0,\n            width: canvas.width,\n            height: canvas.height\n          }\n        });\n        const cleanText = text.trim() || 'No text detected';\n        const confidenceText = confidence ? ` (Confidence: ${confidence.toFixed(1)}%)` : '';\n        setDetectedText(cleanText + confidenceText);\n        console.log('OCR Result:', cleanText, 'Confidence:', confidence);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n    } catch (error) {\n      console.error('Text detection failed:', error);\n      setDetectedText('Detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Enhanced OCR for messy handwriting\n  const detectTextEnhanced = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n    setIsDetecting(true);\n    setDetectedText('Initializing enhanced handwriting detection...');\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n      if (worker) {\n        // Try multiple preprocessing approaches\n        const results = [];\n\n        // Method 1: High contrast black/white\n        setDetectedText('Method 1: High contrast processing...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        preprocessImage(canvas, ctx);\n        const dataURL1 = canvas.toDataURL('image/png');\n        await worker.setParameters({\n          tessedit_pageseg_mode: '6',\n          // Uniform block of text\n          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?()[]{}=-+*/\\'\"@#$%^&_|\\\\~ \\n'\n        });\n        const result1 = await worker.recognize(dataURL1);\n        results.push({\n          method: 'High Contrast',\n          text: result1.data.text,\n          confidence: result1.data.confidence\n        });\n\n        // Method 2: Single character mode for individual letters\n        setDetectedText('Method 2: Character-by-character analysis...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        await worker.setParameters({\n          tessedit_pageseg_mode: '8',\n          // Single character\n          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n        });\n        const dataURL2 = canvas.toDataURL('image/png');\n        const result2 = await worker.recognize(dataURL2);\n        results.push({\n          method: 'Character Mode',\n          text: result2.data.text,\n          confidence: result2.data.confidence\n        });\n\n        // Method 3: Raw text detection with minimal processing\n        setDetectedText('Method 3: Raw text detection...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        await worker.setParameters({\n          tessedit_pageseg_mode: '13',\n          // Raw line. Treat the image as a single text line\n          preserve_interword_spaces: '1'\n        });\n        const dataURL3 = canvas.toDataURL('image/png');\n        const result3 = await worker.recognize(dataURL3);\n        results.push({\n          method: 'Raw Line',\n          text: result3.data.text,\n          confidence: result3.data.confidence\n        });\n\n        // Find best result\n        const bestResult = results.reduce((best, current) => current.confidence > best.confidence ? current : best);\n\n        // Display all results\n        let displayText = `🏆 BEST (${bestResult.method}): ${bestResult.text}\\n\\n`;\n        results.forEach(result => {\n          var _result$confidence;\n          displayText += `${result.method} (${(_result$confidence = result.confidence) === null || _result$confidence === void 0 ? void 0 : _result$confidence.toFixed(1)}%): ${result.text}\\n\\n`;\n        });\n        setDetectedText(displayText);\n        console.log('Enhanced OCR Results:', results);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n    } catch (error) {\n      console.error('Enhanced text detection failed:', error);\n      setDetectedText('Enhanced detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // ChatGPT integration for better text interpretation\n  const enhanceWithChatGPT = async (imageDataURL, ocrText) => {\n    if (!apiKey) {\n      setChatGPTResult('Please enter your OpenAI API key first');\n      return;\n    }\n    setIsUsingChatGPT(true);\n    setChatGPTResult('Sending to ChatGPT for analysis...');\n    try {\n      var _data$choices$, _data$choices$$messag;\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-4o\",\n          messages: [{\n            role: \"user\",\n            content: [{\n              type: \"text\",\n              text: `I have handwritten text on a whiteboard that OCR is struggling to read accurately. The OCR detected this text: \"${ocrText}\". Please look at the image and provide a clean, corrected version of what is actually written. Focus on:\n1. Correcting OCR errors and misread characters\n2. Fixing spacing and formatting\n3. Interpreting unclear handwriting\n4. Organizing the text logically\n5. Only return the corrected text content, nothing else.`\n            }, {\n              type: \"image_url\",\n              image_url: {\n                url: imageDataURL\n              }\n            }]\n          }],\n          max_tokens: 500\n        })\n      });\n      if (!response.ok) {\n        let errorMessage = `API error: ${response.status} ${response.statusText}`;\n        if (response.status === 429) {\n          errorMessage = `⚠️ Rate Limit Exceeded (429)\\n\\nYou've made too many requests to the OpenAI API. This usually means:\\n• You've exceeded your API rate limit\\n• Your API key has insufficient credits\\n• Too many requests in a short time\\n\\nPlease wait a few minutes and try again, or check your OpenAI account for usage limits.`;\n        } else if (response.status === 401) {\n          errorMessage = `🔑 Authentication Error (401)\\n\\nYour API key appears to be invalid or expired. Please check:\\n• The API key is correct\\n• The key has proper permissions\\n• Your OpenAI account is in good standing`;\n        } else if (response.status === 400) {\n          errorMessage = `⚠️ Bad Request (400)\\n\\nThere was an issue with the request format. This might be due to:\\n• Image format not supported\\n• Request too large\\n• Invalid parameters`;\n        }\n        throw new Error(errorMessage);\n      }\n      const data = await response.json();\n      const correctedText = ((_data$choices$ = data.choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content) || 'No response from ChatGPT';\n      setChatGPTResult(correctedText);\n\n      // Update the main detected text with ChatGPT result\n      setDetectedText(`🤖 ChatGPT Enhanced:\\n${correctedText}\\n\\n📝 Original OCR:\\n${ocrText}`);\n    } catch (error) {\n      console.error('ChatGPT API error:', error);\n      setChatGPTResult(`Error: ${error.message}`);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Poll for Agentuity session result\n  const pollForResult = async (sessionId, apiKey, maxAttempts = 12) => {\n    const pollUrl = `https://agentuity.ai/api/sessions/${sessionId}`;\n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n      try {\n        const response = await fetch(pollUrl, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.ok) {\n          const sessionData = await response.json();\n\n          // Check if the session has completed\n          if (sessionData.status === 'completed' && sessionData.response) {\n            const analysis = sessionData.response;\n            setChatGPTResult(analysis);\n            setAiAnalysisResult(analysis);\n            setShowAnalysisPanel(true);\n            setDetectedText(`🤖 Agentuity AI Analysis Complete! Check the analysis panel for detailed results.`);\n            return;\n          } else if (sessionData.status === 'failed') {\n            throw new Error('Agent processing failed: ' + (sessionData.error || 'Unknown error'));\n          }\n          // If still processing, continue polling\n        }\n\n        // Wait before next poll (exponential backoff)\n        const waitTime = Math.min(2000 * attempt, 10000); // 2s, 4s, 6s... max 10s\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n\n        // Update status message with dots for visual feedback\n        const dots = '.'.repeat(attempt % 3 + 1);\n        setChatGPTResult(`🔄 Processing your image analysis${dots} Please wait while our AI agent analyzes the content.`);\n        setAiAnalysisResult(`🔄 Processing your image analysis${dots} Please wait while our AI agent analyzes the content.`);\n      } catch (error) {\n        console.error(`Poll attempt ${attempt} failed:`, error);\n        if (attempt === maxAttempts) {\n          throw new Error('Failed to get analysis result. Please try again.');\n        }\n      }\n    }\n    throw new Error('Analysis timed out. Please try again.');\n  };\n\n  // Poll for Agentuity Q&A session result\n  const pollForQAResult = async (sessionId, apiKey, originalQuestion, maxAttempts = 10) => {\n    const pollUrl = `https://agentuity.ai/api/sessions/${sessionId}`;\n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n      try {\n        const response = await fetch(pollUrl, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.ok) {\n          const sessionData = await response.json();\n\n          // Check if the session has completed\n          if (sessionData.status === 'completed' && sessionData.response) {\n            const answer = sessionData.response;\n\n            // Add to conversation history\n            const newConversation = [...conversationHistory, {\n              role: \"user\",\n              content: originalQuestion\n            }, {\n              role: \"assistant\",\n              content: answer\n            }];\n\n            // Keep only last 6 messages (3 Q&A pairs) to manage context length\n            const trimmedHistory = newConversation.slice(-6);\n            setConversationHistory(trimmedHistory);\n\n            // Clear the input\n            setUserQuestion('');\n            return;\n          } else if (sessionData.status === 'failed') {\n            throw new Error('Q&A processing failed: ' + (sessionData.error || 'Unknown error'));\n          }\n          // If still processing, continue polling\n        }\n\n        // Wait before next poll\n        const waitTime = Math.min(1500 * attempt, 8000); // 1.5s, 3s, 4.5s... max 8s\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n      } catch (error) {\n        console.error(`Q&A poll attempt ${attempt} failed:`, error);\n        if (attempt === maxAttempts) {\n          throw new Error('Failed to get answer. Please try again.');\n        }\n      }\n    }\n    throw new Error('Q&A timed out. Please try again.');\n  };\n\n  // AI Vision Analysis using Agentuity Agent\n  const analyzeSceneWithAI = async imageDataURL => {\n    const agentuityApiKey = process.env.REACT_APP_AGENTUITY_API_KEY;\n    const webhookUrl = process.env.REACT_APP_AGENTUITY_WEBHOOK_URL;\n    if (!agentuityApiKey || !webhookUrl) {\n      setChatGPTResult('Agentuity configuration missing. Please check environment variables.');\n      setAiAnalysisResult('Agentuity configuration missing. Please check environment variables.');\n      setShowAnalysisPanel(true);\n      return;\n    }\n\n    // Rate limiting check with more conservative timing\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall;\n    const minDelay = 5000; // 5 seconds between calls for Agentuity\n\n    if (timeSinceLastCall < minDelay) {\n      const waitTime = Math.ceil((minDelay - timeSinceLastCall) / 1000);\n      const waitMessage = `⏱️ Rate Limiting Protection\\n\\nPlease wait ${waitTime} seconds before making another request.\\n\\nThis prevents overloading your Agentuity agent.`;\n      setAiAnalysisResult(waitMessage);\n      setShowAnalysisPanel(true);\n      return;\n    }\n    setLastApiCall(now);\n    setIsUsingChatGPT(true);\n    setChatGPTResult('🤖 Analyzing scene with your Agentuity AI Agent...');\n    setAiAnalysisResult('🤖 Analyzing scene with your Agentuity AI Agent...');\n    setShowAnalysisPanel(true);\n    try {\n      // Convert base64 image to blob for multipart upload\n      const response = await fetch(imageDataURL);\n      const blob = await response.blob();\n\n      // Create FormData for the webhook\n      const formData = new FormData();\n      formData.append('image', blob, 'analysis.jpg');\n      formData.append('message', `Please provide a comprehensive analysis of this image. I want to understand everything that's happening in this scene. Please include:\n\n📋 **SCENE OVERVIEW:**\n- What type of environment is this? (classroom, office, meeting room, etc.)\n- What is the main focus or subject?\n\n🔍 **DETAILED OBSERVATIONS:**\n- All text visible (handwritten, printed, on boards, signs, etc.)\n- People present (count, what they're doing, clothing, gestures)\n- Objects and equipment (whiteboards, computers, furniture, tools)\n- Colors, lighting, and atmosphere\n\n📝 **TEXT CONTENT:**\n- Transcribe ALL visible text accurately\n- Note the context of each text element\n- Identify any diagrams, equations, or drawings\n\n🎯 **EDUCATIONAL CONTENT:**\n- If this appears to be educational, what subject/topic?\n- Key concepts being taught or discussed\n- Any visual aids or teaching materials\n\n📊 **SUMMARY:**\n- Main purpose/activity in this scene\n- Most important information conveyed\n- Overall assessment of what's happening\n\nBe thorough and detailed - I want to understand everything about this scene!`);\n      const webhookResponse = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${agentuityApiKey}`\n          // Don't set Content-Type, let browser set it for FormData\n        },\n        body: formData\n      });\n      if (!webhookResponse.ok) {\n        let errorMessage = `Agentuity Agent Error: ${webhookResponse.status} ${webhookResponse.statusText}`;\n        if (webhookResponse.status === 429) {\n          errorMessage = `⚠️ Rate Limit Exceeded\\n\\nYour Agentuity agent is temporarily overloaded. Please wait a moment and try again.`;\n        } else if (webhookResponse.status === 401) {\n          errorMessage = `🔑 Authentication Error\\n\\nYour Agentuity API key appears to be invalid. Please check your configuration.`;\n        } else if (webhookResponse.status === 400) {\n          errorMessage = `⚠️ Bad Request\\n\\nThere was an issue with the request. Please try again.`;\n        }\n        throw new Error(errorMessage);\n      }\n      const data = await webhookResponse.json();\n\n      // Handle Agentuity's asynchronous response pattern\n      if (data.success && data.data && data.data.sessionId) {\n        const sessionId = data.data.sessionId;\n        setChatGPTResult('🔄 Processing your image analysis... Please wait while our AI agent analyzes the content.');\n        setAiAnalysisResult('🔄 Processing your image analysis... Please wait while our AI agent analyzes the content.');\n\n        // Poll for the result with session ID\n        await pollForResult(sessionId, agentuityApiKey);\n      } else {\n        // Fallback for direct response (if format changes)\n        const analysis = data.response || data.message || data.content || 'Analysis complete - check with your agent for results';\n        setChatGPTResult(analysis);\n        setAiAnalysisResult(analysis);\n        setShowAnalysisPanel(true);\n        setDetectedText(`🤖 Agentuity AI Analysis Complete! Check the analysis panel for detailed results.`);\n      }\n    } catch (error) {\n      console.error('Agentuity Agent error:', error);\n      const errorMsg = `Error: ${error.message}`;\n      setChatGPTResult(errorMsg);\n      setAiAnalysisResult(errorMsg);\n      setShowAnalysisPanel(true);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // AI Agent for Q&A about analyzed content\n  // AI Agent Q&A using Agentuity Agent\n  const askQuestionAboutContent = async () => {\n    const agentuityApiKey = process.env.REACT_APP_AGENTUITY_API_KEY;\n    const webhookUrl = process.env.REACT_APP_AGENTUITY_WEBHOOK_URL;\n    if (!agentuityApiKey || !webhookUrl) {\n      alert('Agentuity configuration missing. Please check environment variables.');\n      return;\n    }\n    if (!userQuestion.trim()) {\n      alert('Please enter a question');\n      return;\n    }\n    if (!aiAnalysisResult) {\n      alert('Please analyze some content first before asking questions');\n      return;\n    }\n\n    // Rate limiting check\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall;\n    const minDelay = 3000; // 3 seconds for Q&A with Agentuity\n\n    if (timeSinceLastCall < minDelay) {\n      const waitTime = Math.ceil((minDelay - timeSinceLastCall) / 1000);\n      alert(`Please wait ${waitTime} seconds before asking another question.`);\n      return;\n    }\n    setLastApiCall(now);\n    setIsUsingChatGPT(true);\n    try {\n      // Create the context-aware message for Agentuity\n      const contextualQuestion = `Based on my previous image analysis, please answer this question:\n\nPREVIOUS ANALYSIS CONTEXT:\n${aiAnalysisResult}\n\nCONVERSATION HISTORY:\n${conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nCURRENT QUESTION: ${userQuestion}\n\nPlease provide a helpful answer based on the analysis and conversation context above.`;\n      const response = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${agentuityApiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: contextualQuestion,\n          type: 'question'\n        })\n      });\n      if (!response.ok) {\n        let errorMessage = `Agentuity Agent Error: ${response.status} ${response.statusText}`;\n        if (response.status === 429) {\n          errorMessage = `⚠️ Rate Limit Exceeded\\n\\nToo many questions too quickly. Please wait a moment before asking another question.`;\n        } else if (response.status === 401) {\n          errorMessage = `🔑 Authentication Error\\n\\nYour Agentuity API key appears to be invalid.`;\n        }\n        throw new Error(errorMessage);\n      }\n      const data = await response.json();\n\n      // Handle Agentuity's asynchronous response pattern for Q&A\n      if (data.success && data.data && data.data.sessionId) {\n        const sessionId = data.data.sessionId;\n\n        // Poll for the Q&A result\n        await pollForQAResult(sessionId, agentuityApiKey, userQuestion);\n      } else {\n        // Fallback for direct response\n        const answer = data.response || data.message || data.content || 'Response received from agent';\n\n        // Add to conversation history\n        const newConversation = [...conversationHistory, {\n          role: \"user\",\n          content: userQuestion\n        }, {\n          role: \"assistant\",\n          content: answer\n        }];\n\n        // Keep only last 6 messages (3 Q&A pairs) to manage context length\n        const trimmedHistory = newConversation.slice(-6);\n        setConversationHistory(trimmedHistory);\n\n        // Clear the input\n        setUserQuestion('');\n      }\n    } catch (error) {\n      console.error('Agentuity Agent error:', error);\n      alert(`Error: ${error.message}`);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Full Scene Analysis - capture frame and analyze everything with AI Vision\n  const analyzeCurrentScene = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n    setIsDetecting(true);\n    setDetectedText('📸 Capturing frame for AI analysis...');\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw current video frame without any preprocessing for AI Vision\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // Convert to data URL for AI Vision API\n      const dataURL = canvas.toDataURL('image/jpeg', 0.8); // Use JPEG for smaller size\n\n      // Run AI Vision analysis\n      await analyzeSceneWithAI(dataURL);\n    } catch (error) {\n      console.error('Scene analysis failed:', error);\n      setDetectedText('Scene analysis failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Enhanced OCR with ChatGPT integration\n  const detectTextWithChatGPT = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n    setIsDetecting(true);\n    setDetectedText('Running OCR + ChatGPT analysis...');\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      setDetectedText('Preprocessing image...');\n\n      // Apply image preprocessing for better OCR\n      preprocessImage(canvas, ctx);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n      if (worker) {\n        setDetectedText('Running OCR...');\n\n        // Convert processed canvas to data URL\n        const dataURL = canvas.toDataURL('image/png');\n        const {\n          data: {\n            text,\n            confidence\n          }\n        } = await worker.recognize(dataURL);\n        const ocrText = text.trim() || 'No text detected';\n        setDetectedText(`OCR Result: ${ocrText}\\n\\nSending to ChatGPT for enhancement...`);\n\n        // Send to ChatGPT for enhancement\n        await enhanceWithChatGPT(dataURL, ocrText);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n    } catch (error) {\n      console.error('OCR + ChatGPT detection failed:', error);\n      setDetectedText('Detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Auto-detect text and take screenshot\n  const detectAndCapture = async () => {\n    await detectText();\n    setTimeout(() => {\n      takeScreenshot();\n    }, 500); // Small delay to ensure text is updated\n  };\n\n  // Clear all screenshots\n  const clearScreenshots = () => {\n    screenshots.forEach(screenshot => {\n      if (screenshot.url) {\n        URL.revokeObjectURL(screenshot.url);\n      }\n    });\n    setScreenshots([]);\n  };\n\n  // Backend API Integration Functions\n  const API_BASE_URL = 'http://localhost:3000';\n\n  // Upload video to backend\n  const uploadVideoToBackend = async videoFile => {\n    const formData = new FormData();\n    formData.append('video', videoFile);\n    try {\n      const response = await fetch(`${API_BASE_URL}/upload`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend upload error:', error);\n      throw error;\n    }\n  };\n\n  // Process video with backend\n  const processVideoWithBackend = async (videoPath, title = 'Untitled Lecture') => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ingest`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          videoPath,\n          title\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Processing failed: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend processing error:', error);\n      throw error;\n    }\n  };\n\n  // Query processed lecture\n  const queryLecture = async (lectureId, query) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          lectureId,\n          query\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Query failed: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend query error:', error);\n      throw error;\n    }\n  };\n\n  // Handle querying the backend\n  const handleBackendQuery = async () => {\n    if (!lectureId || !queryText.trim()) {\n      setQueryResult('Please ensure video is processed and enter a query');\n      return;\n    }\n    setIsQuerying(true);\n    setQueryResult('Analyzing lecture content...');\n    try {\n      const result = await queryLecture(lectureId, queryText.trim());\n      console.log('Query result:', result);\n      let formattedResult = `Answer: ${result.answer}\\n\\n`;\n      if (result.links && result.links.length > 0) {\n        formattedResult += 'Relevant timestamps:\\n';\n        result.links.forEach(link => {\n          formattedResult += `• ${link.timecode}: ${link.text}\\n`;\n        });\n        formattedResult += '\\n';\n      }\n      if (result.flashcards && result.flashcards.length > 0) {\n        formattedResult += 'Generated flashcard:\\n';\n        result.flashcards.forEach(card => {\n          formattedResult += `Q: ${card.question}\\nA: ${card.answer}\\n`;\n        });\n      }\n      setQueryResult(formattedResult);\n    } catch (error) {\n      console.error('Query failed:', error);\n      setQueryResult(`Query failed: ${error.message}`);\n    } finally {\n      setIsQuerying(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uFFFD AI Scene Analyzer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1023,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Upload videos and analyze everything with AI Vision + OCR text detection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1024,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1022,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"video-upload\",\n          className: \"upload-label\",\n          children: \"Choose Video File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1030,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"video-upload\",\n          type: \"file\",\n          accept: \"video/*\",\n          onChange: handleFileUpload,\n          className: \"file-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1033,\n          columnNumber: 11\n        }, this), !videoFile && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-prompt\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uD83D\\uDCF9 Select a video file to get started\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1042,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"small\", {\n              children: \"Supported formats: MP4, WebM, AVI\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1043,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1043,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1041,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1029,\n        columnNumber: 9\n      }, this), videoURL && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"api-config\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83E\\uDD16 AI-Powered Analysis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1053,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"api-input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              placeholder: \"Enter your OpenAI API key...\",\n              value: apiKey,\n              onChange: e => setApiKey(e.target.value),\n              className: \"api-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1055,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"api-help\",\n              children: [\"Get your API key from \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"https://platform.openai.com/api-keys\",\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                children: \"OpenAI Platform\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1063,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1064,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Features:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1065,\n                columnNumber: 19\n              }, this), \" OCR Enhancement + Full Scene Analysis with AI Vision\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1062,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1054,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1052,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"backend-config\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83D\\uDE80 Backend Analysis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1072,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"backend-toggle\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"toggle-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: isUsingBackend,\n                onChange: e => setIsUsingBackend(e.target.checked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1075,\n                columnNumber: 19\n              }, this), \"Use backend API for full lecture analysis\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1074,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"backend-help\",\n              children: \"Enable this to upload videos to the backend for comprehensive analysis including board change detection and Q&A capabilities\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1082,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1073,\n            columnNumber: 15\n          }, this), uploadProgress && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status-message upload-status\",\n            children: uploadProgress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1089,\n            columnNumber: 17\n          }, this), processingStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"status-message processing-status\",\n            children: processingStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1095,\n            columnNumber: 17\n          }, this), lectureId && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"query-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\uD83D\\uDD0D Ask Questions About This Lecture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1103,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"query-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Ask a question about the lecture content...\",\n                value: queryText,\n                onChange: e => setQueryText(e.target.value),\n                className: \"query-input\",\n                onKeyPress: e => e.key === 'Enter' && handleBackendQuery()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1105,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleBackendQuery,\n                disabled: isQuerying || !queryText.trim(),\n                className: \"query-button\",\n                children: isQuerying ? 'Analyzing...' : 'Ask Question'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1113,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1104,\n              columnNumber: 19\n            }, this), queryResult && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"query-result\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"\\uD83D\\uDCCB Analysis Result:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1124,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n                className: \"result-text\",\n                children: queryResult\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1125,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1123,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1102,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1071,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: videoRef,\n            src: videoURL,\n            controls: true,\n            className: \"video-player\",\n            children: \"Your browser does not support the video tag.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1133,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: canvasRef,\n            style: {\n              display: 'none'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1141,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1132,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: takeScreenshot,\n            className: \"btn primary\",\n            children: \"\\uD83D\\uDCF8 Screenshot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1146,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: analyzeCurrentScene,\n            disabled: isDetecting || !apiKey,\n            className: \"btn ai-vision primary-action\",\n            children: isDetecting ? '� Analyzing with AI...' : '� Analyze Full Scene with AI'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1149,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: initializeOCR,\n            disabled: isDetecting,\n            className: \"btn info\",\n            children: \"\\uD83D\\uDD27 Initialize OCR\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1156,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: detectAndCapture,\n            disabled: isDetecting,\n            className: \"btn highlight\",\n            children: isDetecting ? '⚡ Processing...' : '⚡ Detect & Capture'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1163,\n            columnNumber: 15\n          }, this), screenshots.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: clearScreenshots,\n            className: \"btn danger\",\n            children: [\"\\uD83D\\uDDD1\\uFE0F Clear All (\", screenshots.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1171,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              alert(`API Status:\\n- API Key: ${apiKey ? 'Present' : 'Missing'}\\n- Connection: Testing...\\n\\nCheck console for details.`);\n              console.log('API Key Check:', {\n                hasKey: !!apiKey,\n                keyLength: apiKey === null || apiKey === void 0 ? void 0 : apiKey.length,\n                keyStart: (apiKey === null || apiKey === void 0 ? void 0 : apiKey.substring(0, 15)) + '...',\n                timestamp: new Date().toISOString()\n              });\n            },\n            className: \"btn info\",\n            title: \"Test API connection and debug\",\n            children: \"\\uD83D\\uDD27 Test API\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1175,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-detection\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83D\\uDD0D Detected Text:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1194,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detected-text-box\",\n            children: detectedText || 'Click \"Detect Text\" to analyze the current frame'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1195,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1193,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1050,\n        columnNumber: 11\n      }, this), showAnalysisPanel && aiAnalysisResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ai-analysis-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83D\\uDEF8 AI Vision Analysis Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1207,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowAnalysisPanel(false),\n            className: \"close-panel-btn\",\n            children: \"\\u2715\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1208,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1206,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"analysis-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\uD83D\\uDCCA Scene Analysis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1217,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n              className: \"analysis-text\",\n              children: aiAnalysisResult\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1218,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1216,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"qa-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"\\uD83E\\uDD16 Ask Questions About This Content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1223,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"qa-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Ask a question about what you see in the image...\",\n                value: userQuestion,\n                onChange: e => setUserQuestion(e.target.value),\n                className: \"qa-input\",\n                onKeyPress: e => e.key === 'Enter' && askQuestionAboutContent(),\n                disabled: isUsingChatGPT\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1225,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: askQuestionAboutContent,\n                disabled: isUsingChatGPT || !userQuestion.trim(),\n                className: \"qa-button\",\n                children: isUsingChatGPT ? '🤔 Thinking...' : '💬 Ask'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1234,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1224,\n              columnNumber: 17\n            }, this), conversationHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"conversation-history\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"\\uD83D\\uDCAD Conversation\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1246,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"conversation-messages\",\n                children: conversationHistory.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `message ${message.role === 'user' ? 'user-message' : 'ai-message'}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"message-role\",\n                    children: message.role === 'user' ? '👤 You:' : '🤖 AI:'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1253,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"message-content\",\n                    children: message.content\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1256,\n                    columnNumber: 27\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1249,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1247,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setConversationHistory([]),\n                className: \"clear-conversation-btn\",\n                children: \"\\uD83D\\uDDD1\\uFE0F Clear Conversation\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1260,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1245,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1222,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1215,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1205,\n        columnNumber: 11\n      }, this), screenshots.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gallery-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"\\uD83D\\uDCF1 Screenshots (\", screenshots.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1276,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gallery\",\n          children: screenshots.map(screenshot => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"screenshot-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: screenshot.url,\n              alt: `Screenshot at ${screenshot.timestamp.toFixed(1)}s`,\n              className: \"screenshot-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1280,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"screenshot-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"\\u23F1\\uFE0F Time:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1286,\n                  columnNumber: 24\n                }, this), \" \", screenshot.timestamp.toFixed(1), \"s\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1286,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"\\uD83D\\uDCDD Text:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1287,\n                  columnNumber: 24\n                }, this), \" \", screenshot.detectedText]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1287,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1285,\n              columnNumber: 19\n            }, this)]\n          }, screenshot.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1279,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1277,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1275,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1027,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1021,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JEtL4CWbzXrrll3DN4uWK6z43qM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useRef","useState","Tesseract","jsxDEV","_jsxDEV","App","_s","videoFile","setVideoFile","videoURL","setVideoURL","screenshots","setScreenshots","isDetecting","setIsDetecting","detectedText","setDetectedText","ocrWorker","setOcrWorker","apiKey","setApiKey","process","env","REACT_APP_OPENAI_API_KEY","isUsingChatGPT","setIsUsingChatGPT","chatGPTResult","setChatGPTResult","aiAnalysisResult","setAiAnalysisResult","showAnalysisPanel","setShowAnalysisPanel","lastApiCall","setLastApiCall","rateLimitCooldown","setRateLimitCooldown","conversationHistory","setConversationHistory","userQuestion","setUserQuestion","apiKeyStatus","setApiKeyStatus","testApiKey","response","fetch","method","headers","ok","console","log","error","isUsingBackend","setIsUsingBackend","lectureId","setLectureId","uploadProgress","setUploadProgress","processingStatus","setProcessingStatus","queryText","setQueryText","queryResult","setQueryResult","isQuerying","setIsQuerying","videoRef","canvasRef","initializeOCR","worker","createWorker","logger","m","setParameters","tessedit_char_whitelist","tessedit_pageseg_mode","preserve_interword_spaces","tessedit_do_invert","message","handleFileUpload","event","file","target","files","type","startsWith","url","URL","createObjectURL","uploadResult","uploadVideoToBackend","processResult","processVideoWithBackend","video","path","name","setTimeout","alert","takeScreenshot","current","canvas","ctx","getContext","width","videoWidth","height","videoHeight","drawImage","toBlob","blob","screenshot","id","Date","now","timestamp","currentTime","prev","preprocessImage","imageData","getImageData","data","i","length","gray","Math","round","enhanced","max","min","threshold","putImageData","detectText","dataURL","toDataURL","text","confidence","recognize","rectangle","top","left","cleanText","trim","confidenceText","toFixed","detectTextEnhanced","results","dataURL1","result1","push","dataURL2","result2","dataURL3","result3","bestResult","reduce","best","displayText","forEach","result","_result$confidence","enhanceWithChatGPT","imageDataURL","ocrText","_data$choices$","_data$choices$$messag","body","JSON","stringify","model","messages","role","content","image_url","max_tokens","errorMessage","status","statusText","Error","json","correctedText","choices","pollForResult","sessionId","maxAttempts","pollUrl","attempt","sessionData","analysis","waitTime","Promise","resolve","dots","repeat","pollForQAResult","originalQuestion","answer","newConversation","trimmedHistory","slice","analyzeSceneWithAI","agentuityApiKey","REACT_APP_AGENTUITY_API_KEY","webhookUrl","REACT_APP_AGENTUITY_WEBHOOK_URL","timeSinceLastCall","minDelay","ceil","waitMessage","formData","FormData","append","webhookResponse","success","errorMsg","askQuestionAboutContent","contextualQuestion","map","msg","join","analyzeCurrentScene","detectTextWithChatGPT","detectAndCapture","clearScreenshots","revokeObjectURL","API_BASE_URL","videoPath","title","queryLecture","query","handleBackendQuery","formattedResult","links","link","timecode","flashcards","card","question","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","accept","onChange","placeholder","value","e","href","rel","checked","onKeyPress","key","onClick","disabled","ref","src","controls","style","display","hasKey","keyLength","keyStart","substring","toISOString","index","alt","_c","$RefreshReg$"],"sources":["/Users/kyleprice/south_florida_hackstreet/whiteboard-detector/src/App.js"],"sourcesContent":["import { useRef, useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\n\nfunction App() {\n  const [videoFile, setVideoFile] = useState(null);\n  const [videoURL, setVideoURL] = useState(null);\n  const [screenshots, setScreenshots] = useState([]);\n  const [isDetecting, setIsDetecting] = useState(false);\n  const [detectedText, setDetectedText] = useState('');\n  const [ocrWorker, setOcrWorker] = useState(null);\n  const [apiKey, setApiKey] = useState(process.env.REACT_APP_OPENAI_API_KEY || '');\n  const [isUsingChatGPT, setIsUsingChatGPT] = useState(false);\n  const [chatGPTResult, setChatGPTResult] = useState('');\n  \n  // AI Vision Analysis Results\n  const [aiAnalysisResult, setAiAnalysisResult] = useState('');\n  const [showAnalysisPanel, setShowAnalysisPanel] = useState(false);\n  \n  // Rate limiting and conversation state\n  const [lastApiCall, setLastApiCall] = useState(0);\n  const [rateLimitCooldown, setRateLimitCooldown] = useState(0);\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const [userQuestion, setUserQuestion] = useState('');\n  const [apiKeyStatus, setApiKeyStatus] = useState('unchecked'); // unchecked, valid, invalid\n  \n  // Test API key validity\n  const testApiKey = async () => {\n    if (!apiKey) {\n      setApiKeyStatus('invalid');\n      return;\n    }\n    \n    try {\n      const response = await fetch('https://api.openai.com/v1/models', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`\n        }\n      });\n      \n      if (response.ok) {\n        setApiKeyStatus('valid');\n        console.log('✅ API key is valid');\n      } else {\n        setApiKeyStatus('invalid');\n        console.log('❌ API key is invalid');\n      }\n    } catch (error) {\n      setApiKeyStatus('invalid');\n      console.log('❌ API key test failed:', error);\n    }\n  };\n  \n  // Backend integration state\n  const [isUsingBackend, setIsUsingBackend] = useState(false);\n  const [lectureId, setLectureId] = useState('');\n  const [uploadProgress, setUploadProgress] = useState('');\n  const [processingStatus, setProcessingStatus] = useState('');\n  const [queryText, setQueryText] = useState('');\n  const [queryResult, setQueryResult] = useState('');\n  const [isQuerying, setIsQuerying] = useState(false);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Initialize OCR worker with handwriting optimizations\n  const initializeOCR = async () => {\n    if (ocrWorker) return ocrWorker;\n    \n    try {\n      console.log('Starting OCR initialization...');\n      const worker = await Tesseract.createWorker('eng', 1, {\n        logger: m => console.log('OCR Logger:', m)\n      });\n      \n      // Configure for better handwriting recognition\n      await worker.setParameters({\n        tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?()[]{}=-+*/\\'\"@#$%^&_|\\\\~ ',\n        tessedit_pageseg_mode: '6', // Uniform block of text\n        preserve_interword_spaces: '1',\n        tessedit_do_invert: '0'\n      });\n      \n      console.log('OCR worker created successfully');\n      setOcrWorker(worker);\n      return worker;\n    } catch (error) {\n      console.error('OCR initialization failed:', error);\n      setDetectedText('OCR initialization failed: ' + error.message);\n      return null;\n    }\n  };\n\n  // Handle video file upload\n  const handleFileUpload = async (event) => {\n    const file = event.target.files[0];\n    if (file && file.type.startsWith('video/')) {\n      setVideoFile(file);\n      const url = URL.createObjectURL(file);\n      setVideoURL(url);\n      setScreenshots([]);\n      setDetectedText('');\n      setOcrWorker(null); // Reset worker for new video\n      setLectureId('');\n      setProcessingStatus('');\n      setQueryResult('');\n      \n      // If using backend, upload and process the video\n      if (isUsingBackend) {\n        try {\n          setUploadProgress('Uploading video to backend...');\n          const uploadResult = await uploadVideoToBackend(file);\n          console.log('Upload result:', uploadResult);\n          \n          setUploadProgress('Upload complete! Processing video...');\n          const processResult = await processVideoWithBackend(\n            uploadResult.video.path, \n            file.name\n          );\n          console.log('Process result:', processResult);\n          \n          setLectureId(processResult.lectureId);\n          setProcessingStatus(`Processing started. Lecture ID: ${processResult.lectureId}`);\n          setUploadProgress('');\n        } catch (error) {\n          console.error('Backend upload/processing failed:', error);\n          setUploadProgress(`Error: ${error.message}`);\n        }\n      } else {\n        // Initialize OCR for local processing\n        setTimeout(() => {\n          initializeOCR();\n        }, 1000);\n      }\n    } else {\n      alert('Please select a valid video file');\n    }\n  };\n\n  // Take a screenshot of current video frame\n  const takeScreenshot = async () => {\n    if (!videoRef.current || !canvasRef.current) return;\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Draw video frame to canvas\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Convert to blob and create screenshot object\n    canvas.toBlob((blob) => {\n      const screenshot = {\n        id: Date.now(),\n        blob: blob,\n        url: URL.createObjectURL(blob),\n        timestamp: video.currentTime,\n        detectedText: detectedText || 'No text detected'\n      };\n      setScreenshots(prev => [...prev, screenshot]);\n    }, 'image/png');\n  };\n\n  // Image preprocessing for better OCR\n  const preprocessImage = (canvas, ctx) => {\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n    \n    // Convert to grayscale and enhance contrast\n    for (let i = 0; i < data.length; i += 4) {\n      // Convert to grayscale\n      const gray = Math.round(0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]);\n      \n      // Enhance contrast - make text darker and background lighter\n      let enhanced;\n      if (gray < 128) {\n        // Dark pixels (likely text) - make darker\n        enhanced = Math.max(0, gray - 30);\n      } else {\n        // Light pixels (likely background) - make lighter\n        enhanced = Math.min(255, gray + 30);\n      }\n      \n      // Apply threshold for better text separation\n      const threshold = enhanced < 100 ? 0 : 255;\n      \n      data[i] = threshold;     // Red\n      data[i + 1] = threshold; // Green\n      data[i + 2] = threshold; // Blue\n      // Alpha channel (data[i + 3]) remains unchanged\n    }\n    \n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n  };\n\n  // OCR text detection with preprocessing\n  const detectText = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n\n    setIsDetecting(true);\n    setDetectedText('Initializing OCR...');\n\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      \n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      setDetectedText('Preprocessing image for handwriting...');\n\n      // Apply image preprocessing for better OCR\n      preprocessImage(canvas, ctx);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n\n      if (worker) {\n        setDetectedText('Running enhanced OCR...');\n        \n        // Convert processed canvas to data URL and run OCR\n        const dataURL = canvas.toDataURL('image/png');\n        \n        const { data: { text, confidence } } = await worker.recognize(dataURL, {\n          rectangle: { top: 0, left: 0, width: canvas.width, height: canvas.height }\n        });\n        \n        const cleanText = text.trim() || 'No text detected';\n        const confidenceText = confidence ? ` (Confidence: ${confidence.toFixed(1)}%)` : '';\n        setDetectedText(cleanText + confidenceText);\n        console.log('OCR Result:', cleanText, 'Confidence:', confidence);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n\n    } catch (error) {\n      console.error('Text detection failed:', error);\n      setDetectedText('Detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Enhanced OCR for messy handwriting\n  const detectTextEnhanced = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n\n    setIsDetecting(true);\n    setDetectedText('Initializing enhanced handwriting detection...');\n\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      \n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n\n      if (worker) {\n        // Try multiple preprocessing approaches\n        const results = [];\n        \n        // Method 1: High contrast black/white\n        setDetectedText('Method 1: High contrast processing...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        preprocessImage(canvas, ctx);\n        const dataURL1 = canvas.toDataURL('image/png');\n        \n        await worker.setParameters({\n          tessedit_pageseg_mode: '6', // Uniform block of text\n          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,!?()[]{}=-+*/\\'\"@#$%^&_|\\\\~ \\n'\n        });\n        \n        const result1 = await worker.recognize(dataURL1);\n        results.push({ method: 'High Contrast', text: result1.data.text, confidence: result1.data.confidence });\n\n        // Method 2: Single character mode for individual letters\n        setDetectedText('Method 2: Character-by-character analysis...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        \n        await worker.setParameters({\n          tessedit_pageseg_mode: '8', // Single character\n          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n        });\n        \n        const dataURL2 = canvas.toDataURL('image/png');\n        const result2 = await worker.recognize(dataURL2);\n        results.push({ method: 'Character Mode', text: result2.data.text, confidence: result2.data.confidence });\n\n        // Method 3: Raw text detection with minimal processing\n        setDetectedText('Method 3: Raw text detection...');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        \n        await worker.setParameters({\n          tessedit_pageseg_mode: '13', // Raw line. Treat the image as a single text line\n          preserve_interword_spaces: '1'\n        });\n        \n        const dataURL3 = canvas.toDataURL('image/png');\n        const result3 = await worker.recognize(dataURL3);\n        results.push({ method: 'Raw Line', text: result3.data.text, confidence: result3.data.confidence });\n\n        // Find best result\n        const bestResult = results.reduce((best, current) => \n          current.confidence > best.confidence ? current : best\n        );\n\n        // Display all results\n        let displayText = `🏆 BEST (${bestResult.method}): ${bestResult.text}\\n\\n`;\n        results.forEach(result => {\n          displayText += `${result.method} (${result.confidence?.toFixed(1)}%): ${result.text}\\n\\n`;\n        });\n\n        setDetectedText(displayText);\n        console.log('Enhanced OCR Results:', results);\n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n\n    } catch (error) {\n      console.error('Enhanced text detection failed:', error);\n      setDetectedText('Enhanced detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // ChatGPT integration for better text interpretation\n  const enhanceWithChatGPT = async (imageDataURL, ocrText) => {\n    if (!apiKey) {\n      setChatGPTResult('Please enter your OpenAI API key first');\n      return;\n    }\n\n    setIsUsingChatGPT(true);\n    setChatGPTResult('Sending to ChatGPT for analysis...');\n\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-4o\",\n          messages: [\n            {\n              role: \"user\",\n              content: [\n                {\n                  type: \"text\",\n                  text: `I have handwritten text on a whiteboard that OCR is struggling to read accurately. The OCR detected this text: \"${ocrText}\". Please look at the image and provide a clean, corrected version of what is actually written. Focus on:\n1. Correcting OCR errors and misread characters\n2. Fixing spacing and formatting\n3. Interpreting unclear handwriting\n4. Organizing the text logically\n5. Only return the corrected text content, nothing else.`\n                },\n                {\n                  type: \"image_url\",\n                  image_url: {\n                    url: imageDataURL\n                  }\n                }\n              ]\n            }\n          ],\n          max_tokens: 500\n        })\n      });\n\n      if (!response.ok) {\n        let errorMessage = `API error: ${response.status} ${response.statusText}`;\n        \n        if (response.status === 429) {\n          errorMessage = `⚠️ Rate Limit Exceeded (429)\\n\\nYou've made too many requests to the OpenAI API. This usually means:\\n• You've exceeded your API rate limit\\n• Your API key has insufficient credits\\n• Too many requests in a short time\\n\\nPlease wait a few minutes and try again, or check your OpenAI account for usage limits.`;\n        } else if (response.status === 401) {\n          errorMessage = `🔑 Authentication Error (401)\\n\\nYour API key appears to be invalid or expired. Please check:\\n• The API key is correct\\n• The key has proper permissions\\n• Your OpenAI account is in good standing`;\n        } else if (response.status === 400) {\n          errorMessage = `⚠️ Bad Request (400)\\n\\nThere was an issue with the request format. This might be due to:\\n• Image format not supported\\n• Request too large\\n• Invalid parameters`;\n        }\n        \n        throw new Error(errorMessage);\n      }\n\n      const data = await response.json();\n      const correctedText = data.choices[0]?.message?.content || 'No response from ChatGPT';\n      setChatGPTResult(correctedText);\n      \n      // Update the main detected text with ChatGPT result\n      setDetectedText(`🤖 ChatGPT Enhanced:\\n${correctedText}\\n\\n📝 Original OCR:\\n${ocrText}`);\n      \n    } catch (error) {\n      console.error('ChatGPT API error:', error);\n      setChatGPTResult(`Error: ${error.message}`);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Poll for Agentuity session result\n  const pollForResult = async (sessionId, apiKey, maxAttempts = 12) => {\n    const pollUrl = `https://agentuity.ai/api/sessions/${sessionId}`;\n    \n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n      try {\n        const response = await fetch(pollUrl, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        if (response.ok) {\n          const sessionData = await response.json();\n          \n          // Check if the session has completed\n          if (sessionData.status === 'completed' && sessionData.response) {\n            const analysis = sessionData.response;\n            setChatGPTResult(analysis);\n            setAiAnalysisResult(analysis);\n            setShowAnalysisPanel(true);\n            setDetectedText(`🤖 Agentuity AI Analysis Complete! Check the analysis panel for detailed results.`);\n            return;\n          } else if (sessionData.status === 'failed') {\n            throw new Error('Agent processing failed: ' + (sessionData.error || 'Unknown error'));\n          }\n          // If still processing, continue polling\n        }\n        \n        // Wait before next poll (exponential backoff)\n        const waitTime = Math.min(2000 * attempt, 10000); // 2s, 4s, 6s... max 10s\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n        \n        // Update status message with dots for visual feedback\n        const dots = '.'.repeat((attempt % 3) + 1);\n        setChatGPTResult(`🔄 Processing your image analysis${dots} Please wait while our AI agent analyzes the content.`);\n        setAiAnalysisResult(`🔄 Processing your image analysis${dots} Please wait while our AI agent analyzes the content.`);\n        \n      } catch (error) {\n        console.error(`Poll attempt ${attempt} failed:`, error);\n        if (attempt === maxAttempts) {\n          throw new Error('Failed to get analysis result. Please try again.');\n        }\n      }\n    }\n    \n    throw new Error('Analysis timed out. Please try again.');\n  };\n\n  // Poll for Agentuity Q&A session result\n  const pollForQAResult = async (sessionId, apiKey, originalQuestion, maxAttempts = 10) => {\n    const pollUrl = `https://agentuity.ai/api/sessions/${sessionId}`;\n    \n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n      try {\n        const response = await fetch(pollUrl, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        if (response.ok) {\n          const sessionData = await response.json();\n          \n          // Check if the session has completed\n          if (sessionData.status === 'completed' && sessionData.response) {\n            const answer = sessionData.response;\n            \n            // Add to conversation history\n            const newConversation = [\n              ...conversationHistory,\n              { role: \"user\", content: originalQuestion },\n              { role: \"assistant\", content: answer }\n            ];\n            \n            // Keep only last 6 messages (3 Q&A pairs) to manage context length\n            const trimmedHistory = newConversation.slice(-6);\n            setConversationHistory(trimmedHistory);\n            \n            // Clear the input\n            setUserQuestion('');\n            return;\n          } else if (sessionData.status === 'failed') {\n            throw new Error('Q&A processing failed: ' + (sessionData.error || 'Unknown error'));\n          }\n          // If still processing, continue polling\n        }\n        \n        // Wait before next poll\n        const waitTime = Math.min(1500 * attempt, 8000); // 1.5s, 3s, 4.5s... max 8s\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n        \n      } catch (error) {\n        console.error(`Q&A poll attempt ${attempt} failed:`, error);\n        if (attempt === maxAttempts) {\n          throw new Error('Failed to get answer. Please try again.');\n        }\n      }\n    }\n    \n    throw new Error('Q&A timed out. Please try again.');\n  };\n\n  // AI Vision Analysis using Agentuity Agent\n  const analyzeSceneWithAI = async (imageDataURL) => {\n    const agentuityApiKey = process.env.REACT_APP_AGENTUITY_API_KEY;\n    const webhookUrl = process.env.REACT_APP_AGENTUITY_WEBHOOK_URL;\n    \n    if (!agentuityApiKey || !webhookUrl) {\n      setChatGPTResult('Agentuity configuration missing. Please check environment variables.');\n      setAiAnalysisResult('Agentuity configuration missing. Please check environment variables.');\n      setShowAnalysisPanel(true);\n      return;\n    }\n\n    // Rate limiting check with more conservative timing\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall;\n    const minDelay = 5000; // 5 seconds between calls for Agentuity\n    \n    if (timeSinceLastCall < minDelay) {\n      const waitTime = Math.ceil((minDelay - timeSinceLastCall) / 1000);\n      const waitMessage = `⏱️ Rate Limiting Protection\\n\\nPlease wait ${waitTime} seconds before making another request.\\n\\nThis prevents overloading your Agentuity agent.`;\n      setAiAnalysisResult(waitMessage);\n      setShowAnalysisPanel(true);\n      return;\n    }\n\n    setLastApiCall(now);\n    setIsUsingChatGPT(true);\n    setChatGPTResult('🤖 Analyzing scene with your Agentuity AI Agent...');\n    setAiAnalysisResult('🤖 Analyzing scene with your Agentuity AI Agent...');\n    setShowAnalysisPanel(true);\n\n    try {\n      // Convert base64 image to blob for multipart upload\n      const response = await fetch(imageDataURL);\n      const blob = await response.blob();\n      \n      // Create FormData for the webhook\n      const formData = new FormData();\n      formData.append('image', blob, 'analysis.jpg');\n      formData.append('message', `Please provide a comprehensive analysis of this image. I want to understand everything that's happening in this scene. Please include:\n\n📋 **SCENE OVERVIEW:**\n- What type of environment is this? (classroom, office, meeting room, etc.)\n- What is the main focus or subject?\n\n🔍 **DETAILED OBSERVATIONS:**\n- All text visible (handwritten, printed, on boards, signs, etc.)\n- People present (count, what they're doing, clothing, gestures)\n- Objects and equipment (whiteboards, computers, furniture, tools)\n- Colors, lighting, and atmosphere\n\n📝 **TEXT CONTENT:**\n- Transcribe ALL visible text accurately\n- Note the context of each text element\n- Identify any diagrams, equations, or drawings\n\n🎯 **EDUCATIONAL CONTENT:**\n- If this appears to be educational, what subject/topic?\n- Key concepts being taught or discussed\n- Any visual aids or teaching materials\n\n📊 **SUMMARY:**\n- Main purpose/activity in this scene\n- Most important information conveyed\n- Overall assessment of what's happening\n\nBe thorough and detailed - I want to understand everything about this scene!`);\n\n      const webhookResponse = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${agentuityApiKey}`,\n          // Don't set Content-Type, let browser set it for FormData\n        },\n        body: formData\n      });\n\n      if (!webhookResponse.ok) {\n        let errorMessage = `Agentuity Agent Error: ${webhookResponse.status} ${webhookResponse.statusText}`;\n        \n        if (webhookResponse.status === 429) {\n          errorMessage = `⚠️ Rate Limit Exceeded\\n\\nYour Agentuity agent is temporarily overloaded. Please wait a moment and try again.`;\n        } else if (webhookResponse.status === 401) {\n          errorMessage = `🔑 Authentication Error\\n\\nYour Agentuity API key appears to be invalid. Please check your configuration.`;\n        } else if (webhookResponse.status === 400) {\n          errorMessage = `⚠️ Bad Request\\n\\nThere was an issue with the request. Please try again.`;\n        }\n        \n        throw new Error(errorMessage);\n      }\n\n      const data = await webhookResponse.json();\n      \n      // Handle Agentuity's asynchronous response pattern\n      if (data.success && data.data && data.data.sessionId) {\n        const sessionId = data.data.sessionId;\n        setChatGPTResult('🔄 Processing your image analysis... Please wait while our AI agent analyzes the content.');\n        setAiAnalysisResult('🔄 Processing your image analysis... Please wait while our AI agent analyzes the content.');\n        \n        // Poll for the result with session ID\n        await pollForResult(sessionId, agentuityApiKey);\n      } else {\n        // Fallback for direct response (if format changes)\n        const analysis = data.response || data.message || data.content || 'Analysis complete - check with your agent for results';\n        setChatGPTResult(analysis);\n        setAiAnalysisResult(analysis);\n        setShowAnalysisPanel(true);\n        setDetectedText(`🤖 Agentuity AI Analysis Complete! Check the analysis panel for detailed results.`);\n      }\n      \n    } catch (error) {\n      console.error('Agentuity Agent error:', error);\n      const errorMsg = `Error: ${error.message}`;\n      setChatGPTResult(errorMsg);\n      setAiAnalysisResult(errorMsg);\n      setShowAnalysisPanel(true);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // AI Agent for Q&A about analyzed content\n  // AI Agent Q&A using Agentuity Agent\n  const askQuestionAboutContent = async () => {\n    const agentuityApiKey = process.env.REACT_APP_AGENTUITY_API_KEY;\n    const webhookUrl = process.env.REACT_APP_AGENTUITY_WEBHOOK_URL;\n    \n    if (!agentuityApiKey || !webhookUrl) {\n      alert('Agentuity configuration missing. Please check environment variables.');\n      return;\n    }\n    \n    if (!userQuestion.trim()) {\n      alert('Please enter a question');\n      return;\n    }\n    \n    if (!aiAnalysisResult) {\n      alert('Please analyze some content first before asking questions');\n      return;\n    }\n\n    // Rate limiting check\n    const now = Date.now();\n    const timeSinceLastCall = now - lastApiCall;\n    const minDelay = 3000; // 3 seconds for Q&A with Agentuity\n    \n    if (timeSinceLastCall < minDelay) {\n      const waitTime = Math.ceil((minDelay - timeSinceLastCall) / 1000);\n      alert(`Please wait ${waitTime} seconds before asking another question.`);\n      return;\n    }\n\n    setLastApiCall(now);\n    setIsUsingChatGPT(true);\n\n    try {\n      // Create the context-aware message for Agentuity\n      const contextualQuestion = `Based on my previous image analysis, please answer this question:\n\nPREVIOUS ANALYSIS CONTEXT:\n${aiAnalysisResult}\n\nCONVERSATION HISTORY:\n${conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nCURRENT QUESTION: ${userQuestion}\n\nPlease provide a helpful answer based on the analysis and conversation context above.`;\n\n      const response = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${agentuityApiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: contextualQuestion,\n          type: 'question'\n        })\n      });\n\n      if (!response.ok) {\n        let errorMessage = `Agentuity Agent Error: ${response.status} ${response.statusText}`;\n        \n        if (response.status === 429) {\n          errorMessage = `⚠️ Rate Limit Exceeded\\n\\nToo many questions too quickly. Please wait a moment before asking another question.`;\n        } else if (response.status === 401) {\n          errorMessage = `🔑 Authentication Error\\n\\nYour Agentuity API key appears to be invalid.`;\n        }\n        \n        throw new Error(errorMessage);\n      }\n\n      const data = await response.json();\n      \n      // Handle Agentuity's asynchronous response pattern for Q&A\n      if (data.success && data.data && data.data.sessionId) {\n        const sessionId = data.data.sessionId;\n        \n        // Poll for the Q&A result\n        await pollForQAResult(sessionId, agentuityApiKey, userQuestion);\n      } else {\n        // Fallback for direct response\n        const answer = data.response || data.message || data.content || 'Response received from agent';\n        \n        // Add to conversation history\n        const newConversation = [\n          ...conversationHistory,\n          { role: \"user\", content: userQuestion },\n          { role: \"assistant\", content: answer }\n        ];\n        \n        // Keep only last 6 messages (3 Q&A pairs) to manage context length\n        const trimmedHistory = newConversation.slice(-6);\n        setConversationHistory(trimmedHistory);\n        \n        // Clear the input\n        setUserQuestion('');\n      }\n      \n    } catch (error) {\n      console.error('Agentuity Agent error:', error);\n      alert(`Error: ${error.message}`);\n    } finally {\n      setIsUsingChatGPT(false);\n    }\n  };\n\n  // Full Scene Analysis - capture frame and analyze everything with AI Vision\n  const analyzeCurrentScene = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n\n    setIsDetecting(true);\n    setDetectedText('📸 Capturing frame for AI analysis...');\n\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      \n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw current video frame without any preprocessing for AI Vision\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      \n      // Convert to data URL for AI Vision API\n      const dataURL = canvas.toDataURL('image/jpeg', 0.8); // Use JPEG for smaller size\n      \n      // Run AI Vision analysis\n      await analyzeSceneWithAI(dataURL);\n      \n    } catch (error) {\n      console.error('Scene analysis failed:', error);\n      setDetectedText('Scene analysis failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Enhanced OCR with ChatGPT integration\n  const detectTextWithChatGPT = async () => {\n    if (!videoRef.current || !canvasRef.current) {\n      setDetectedText('Video or canvas not available');\n      return;\n    }\n\n    setIsDetecting(true);\n    setDetectedText('Running OCR + ChatGPT analysis...');\n\n    try {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Set canvas size and draw current frame\n      canvas.width = video.videoWidth || 640;\n      canvas.height = video.videoHeight || 480;\n      \n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        setDetectedText('Video not loaded properly');\n        setIsDetecting(false);\n        return;\n      }\n\n      // Draw video frame\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      setDetectedText('Preprocessing image...');\n\n      // Apply image preprocessing for better OCR\n      preprocessImage(canvas, ctx);\n\n      // Get or initialize OCR worker\n      let worker = ocrWorker;\n      if (!worker) {\n        worker = await initializeOCR();\n      }\n\n      if (worker) {\n        setDetectedText('Running OCR...');\n        \n        // Convert processed canvas to data URL\n        const dataURL = canvas.toDataURL('image/png');\n        \n        const { data: { text, confidence } } = await worker.recognize(dataURL);\n        const ocrText = text.trim() || 'No text detected';\n        \n        setDetectedText(`OCR Result: ${ocrText}\\n\\nSending to ChatGPT for enhancement...`);\n        \n        // Send to ChatGPT for enhancement\n        await enhanceWithChatGPT(dataURL, ocrText);\n        \n      } else {\n        setDetectedText('OCR worker initialization failed');\n      }\n\n    } catch (error) {\n      console.error('OCR + ChatGPT detection failed:', error);\n      setDetectedText('Detection failed: ' + error.message);\n    } finally {\n      setIsDetecting(false);\n    }\n  };\n\n  // Auto-detect text and take screenshot\n  const detectAndCapture = async () => {\n    await detectText();\n    setTimeout(() => {\n      takeScreenshot();\n    }, 500); // Small delay to ensure text is updated\n  };\n\n  // Clear all screenshots\n  const clearScreenshots = () => {\n    screenshots.forEach(screenshot => {\n      if (screenshot.url) {\n        URL.revokeObjectURL(screenshot.url);\n      }\n    });\n    setScreenshots([]);\n  };\n\n  // Backend API Integration Functions\n  const API_BASE_URL = 'http://localhost:3000';\n\n  // Upload video to backend\n  const uploadVideoToBackend = async (videoFile) => {\n    const formData = new FormData();\n    formData.append('video', videoFile);\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/upload`, {\n        method: 'POST',\n        body: formData\n      });\n\n      if (!response.ok) {\n        throw new Error(`Upload failed: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend upload error:', error);\n      throw error;\n    }\n  };\n\n  // Process video with backend\n  const processVideoWithBackend = async (videoPath, title = 'Untitled Lecture') => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ingest`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          videoPath,\n          title\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Processing failed: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend processing error:', error);\n      throw error;\n    }\n  };\n\n  // Query processed lecture\n  const queryLecture = async (lectureId, query) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          lectureId,\n          query\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Query failed: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Backend query error:', error);\n      throw error;\n    }\n  };\n\n  // Handle querying the backend\n  const handleBackendQuery = async () => {\n    if (!lectureId || !queryText.trim()) {\n      setQueryResult('Please ensure video is processed and enter a query');\n      return;\n    }\n\n    setIsQuerying(true);\n    setQueryResult('Analyzing lecture content...');\n\n    try {\n      const result = await queryLecture(lectureId, queryText.trim());\n      console.log('Query result:', result);\n      \n      let formattedResult = `Answer: ${result.answer}\\n\\n`;\n      \n      if (result.links && result.links.length > 0) {\n        formattedResult += 'Relevant timestamps:\\n';\n        result.links.forEach(link => {\n          formattedResult += `• ${link.timecode}: ${link.text}\\n`;\n        });\n        formattedResult += '\\n';\n      }\n      \n      if (result.flashcards && result.flashcards.length > 0) {\n        formattedResult += 'Generated flashcard:\\n';\n        result.flashcards.forEach(card => {\n          formattedResult += `Q: ${card.question}\\nA: ${card.answer}\\n`;\n        });\n      }\n      \n      setQueryResult(formattedResult);\n    } catch (error) {\n      console.error('Query failed:', error);\n      setQueryResult(`Query failed: ${error.message}`);\n    } finally {\n      setIsQuerying(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>� AI Scene Analyzer</h1>\n        <p>Upload videos and analyze everything with AI Vision + OCR text detection</p>\n      </header>\n\n      <main className=\"App-main\">\n        {/* File Upload */}\n        <div className=\"upload-section\">\n          <label htmlFor=\"video-upload\" className=\"upload-label\">\n            Choose Video File\n          </label>\n          <input\n            id=\"video-upload\"\n            type=\"file\"\n            accept=\"video/*\"\n            onChange={handleFileUpload}\n            className=\"file-input\"\n          />\n          {!videoFile && (\n            <div className=\"upload-prompt\">\n              <p>📹 Select a video file to get started</p>\n              <p><small>Supported formats: MP4, WebM, AVI</small></p>\n            </div>\n          )}\n        </div>\n\n        {/* Video Player */}\n        {videoURL && (\n          <div className=\"video-section\">\n            {/* API Key Input */}\n            <div className=\"api-config\">\n              <h3>🤖 AI-Powered Analysis</h3>\n              <div className=\"api-input-group\">\n                <input\n                  type=\"password\"\n                  placeholder=\"Enter your OpenAI API key...\"\n                  value={apiKey}\n                  onChange={(e) => setApiKey(e.target.value)}\n                  className=\"api-input\"\n                />\n                <small className=\"api-help\">\n                  Get your API key from <a href=\"https://platform.openai.com/api-keys\" target=\"_blank\" rel=\"noopener noreferrer\">OpenAI Platform</a>\n                  <br />\n                  <strong>Features:</strong> OCR Enhancement + Full Scene Analysis with AI Vision\n                </small>\n              </div>\n            </div>\n\n            {/* Backend Integration Toggle */}\n            <div className=\"backend-config\">\n              <h3>🚀 Backend Analysis</h3>\n              <div className=\"backend-toggle\">\n                <label className=\"toggle-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={isUsingBackend}\n                    onChange={(e) => setIsUsingBackend(e.target.checked)}\n                  />\n                  Use backend API for full lecture analysis\n                </label>\n                <small className=\"backend-help\">\n                  Enable this to upload videos to the backend for comprehensive analysis including board change detection and Q&A capabilities\n                </small>\n              </div>\n              \n              {/* Upload/Processing Status */}\n              {uploadProgress && (\n                <div className=\"status-message upload-status\">\n                  {uploadProgress}\n                </div>\n              )}\n              \n              {processingStatus && (\n                <div className=\"status-message processing-status\">\n                  {processingStatus}\n                </div>\n              )}\n              \n              {/* Query Interface */}\n              {lectureId && (\n                <div className=\"query-section\">\n                  <h4>🔍 Ask Questions About This Lecture</h4>\n                  <div className=\"query-input-group\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Ask a question about the lecture content...\"\n                      value={queryText}\n                      onChange={(e) => setQueryText(e.target.value)}\n                      className=\"query-input\"\n                      onKeyPress={(e) => e.key === 'Enter' && handleBackendQuery()}\n                    />\n                    <button\n                      onClick={handleBackendQuery}\n                      disabled={isQuerying || !queryText.trim()}\n                      className=\"query-button\"\n                    >\n                      {isQuerying ? 'Analyzing...' : 'Ask Question'}\n                    </button>\n                  </div>\n                  \n                  {queryResult && (\n                    <div className=\"query-result\">\n                      <h5>📋 Analysis Result:</h5>\n                      <pre className=\"result-text\">{queryResult}</pre>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"video-container\">\n              <video\n                ref={videoRef}\n                src={videoURL}\n                controls\n                className=\"video-player\"\n              >\n                Your browser does not support the video tag.\n              </video>\n              <canvas ref={canvasRef} style={{ display: 'none' }} />\n            </div>\n\n            {/* Controls */}\n            <div className=\"controls\">\n              <button onClick={takeScreenshot} className=\"btn primary\">\n                📸 Screenshot\n              </button>\n              <button \n                onClick={analyzeCurrentScene} \n                disabled={isDetecting || !apiKey}\n                className=\"btn ai-vision primary-action\"\n              >\n                {isDetecting ? '� Analyzing with AI...' : '� Analyze Full Scene with AI'}\n              </button>\n              <button \n                onClick={initializeOCR} \n                disabled={isDetecting}\n                className=\"btn info\"\n              >\n                🔧 Initialize OCR\n              </button>\n              <button \n                onClick={detectAndCapture} \n                disabled={isDetecting}\n                className=\"btn highlight\"\n              >\n                {isDetecting ? '⚡ Processing...' : '⚡ Detect & Capture'}\n              </button>\n              {screenshots.length > 0 && (\n                <button onClick={clearScreenshots} className=\"btn danger\">\n                  🗑️ Clear All ({screenshots.length})\n                </button>\n              )}\n              <button \n                onClick={() => {\n                  alert(`API Status:\\n- API Key: ${apiKey ? 'Present' : 'Missing'}\\n- Connection: Testing...\\n\\nCheck console for details.`);\n                  console.log('API Key Check:', { \n                    hasKey: !!apiKey, \n                    keyLength: apiKey?.length,\n                    keyStart: apiKey?.substring(0, 15) + '...',\n                    timestamp: new Date().toISOString()\n                  });\n                }}\n                className=\"btn info\"\n                title=\"Test API connection and debug\"\n              >\n                🔧 Test API\n              </button>\n            </div>\n\n            {/* Detected Text Display */}\n            <div className=\"text-detection\">\n              <h3>🔍 Detected Text:</h3>\n              <div className=\"detected-text-box\">\n                {detectedText || 'Click \"Detect Text\" to analyze the current frame'}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Screenshots Gallery */}\n        {/* AI Vision Analysis Panel */}\n        {showAnalysisPanel && aiAnalysisResult && (\n          <div className=\"ai-analysis-panel\">\n            <div className=\"panel-header\">\n              <h3>🛸 AI Vision Analysis Results</h3>\n              <button \n                onClick={() => setShowAnalysisPanel(false)}\n                className=\"close-panel-btn\"\n              >\n                ✕\n              </button>\n            </div>\n            <div className=\"analysis-content\">\n              <div className=\"analysis-section\">\n                <h4>📊 Scene Analysis</h4>\n                <pre className=\"analysis-text\">{aiAnalysisResult}</pre>\n              </div>\n              \n              {/* AI Agent Q&A Interface */}\n              <div className=\"qa-section\">\n                <h4>🤖 Ask Questions About This Content</h4>\n                <div className=\"qa-input-group\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Ask a question about what you see in the image...\"\n                    value={userQuestion}\n                    onChange={(e) => setUserQuestion(e.target.value)}\n                    className=\"qa-input\"\n                    onKeyPress={(e) => e.key === 'Enter' && askQuestionAboutContent()}\n                    disabled={isUsingChatGPT}\n                  />\n                  <button\n                    onClick={askQuestionAboutContent}\n                    disabled={isUsingChatGPT || !userQuestion.trim()}\n                    className=\"qa-button\"\n                  >\n                    {isUsingChatGPT ? '🤔 Thinking...' : '💬 Ask'}\n                  </button>\n                </div>\n                \n                {/* Conversation History */}\n                {conversationHistory.length > 0 && (\n                  <div className=\"conversation-history\">\n                    <h5>💭 Conversation</h5>\n                    <div className=\"conversation-messages\">\n                      {conversationHistory.map((message, index) => (\n                        <div \n                          key={index} \n                          className={`message ${message.role === 'user' ? 'user-message' : 'ai-message'}`}\n                        >\n                          <div className=\"message-role\">\n                            {message.role === 'user' ? '👤 You:' : '🤖 AI:'}\n                          </div>\n                          <div className=\"message-content\">{message.content}</div>\n                        </div>\n                      ))}\n                    </div>\n                    <button \n                      onClick={() => setConversationHistory([])}\n                      className=\"clear-conversation-btn\"\n                    >\n                      🗑️ Clear Conversation\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Screenshots Gallery */}\n        {screenshots.length > 0 && (\n          <div className=\"gallery-section\">\n            <h3>📱 Screenshots ({screenshots.length})</h3>\n            <div className=\"gallery\">\n              {screenshots.map((screenshot) => (\n                <div key={screenshot.id} className=\"screenshot-item\">\n                  <img \n                    src={screenshot.url} \n                    alt={`Screenshot at ${screenshot.timestamp.toFixed(1)}s`}\n                    className=\"screenshot-image\"\n                  />\n                  <div className=\"screenshot-info\">\n                    <p><strong>⏱️ Time:</strong> {screenshot.timestamp.toFixed(1)}s</p>\n                    <p><strong>📝 Text:</strong> {screenshot.detectedText}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}